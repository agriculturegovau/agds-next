{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Loading, empty and error states"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"loading-error-empty-states","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Loading state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The loading state provides feedback to users that data is being loaded.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Loading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/skeleton\",\n        children: \"Skeleton components\"\n      }), \" can be used as visual placeholders for information that is still loading - e.g. cells inside of a table.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Table loading state example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Below is an example of a \", _jsx(_components.a, {\n        href: \"/components/table\",\n        children: \"Table\"\n      }), \" in a loading state.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TableWrapper>\\n\\t<Table tableLayout=\\\"fixed\\\">\\n\\t\\t<TableHead>\\n\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t<TableHeader width=\\\"6rem\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t\\tID\\n\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Name</TableHeader>\\n\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Email</TableHeader>\\n\\t\\t\\t</TableRow>\\n\\t\\t</TableHead>\\n\\t\\t<TableBody>\\n\\t\\t\\t{Array.from(Array(5)).map((_, idx) => (\\n\\t\\t\\t\\t<TableRow key={idx}>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t))}\\n\\t\\t</TableBody>\\n\\t</Table>\\n</TableWrapper>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Cards loading state example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Below is an example of a list of \", _jsx(_components.a, {\n        href: \"/components/card\",\n        children: \"Cards\"\n      }), \" in a loading state.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Columns as=\\\"ul\\\" cols={{ xs: 2 }}>\\n\\t{Array.from(Array(2).keys()).map((i) => (\\n\\t\\t<Card key={i} as=\\\"li\\\" shadow>\\n\\t\\t\\t<CardInner>\\n\\t\\t\\t\\t<Stack gap={1}>\\n\\t\\t\\t\\t\\t<SkeletonHeading type=\\\"h3\\\" width=\\\"50%\\\" />\\n\\t\\t\\t\\t\\t<SkeletonText fontSize=\\\"sm\\\" width=\\\"25%\\\" />\\n\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t</Stack>\\n\\t\\t\\t</CardInner>\\n\\t\\t</Card>\\n\\t))}\\n</Columns>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The error state provides feedback to users that an error has occurred while loading the data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When creating an error message:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be specific in describing the error\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Distil technical jargon into more simple and conversational language where possible\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Describe how and when the error can be resolved\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Don’t blame the user for the error\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Include the error code in the message if possible. It may be helpful is a user accesses human-led support.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If applicable, use a \", _jsx(_components.a, {\n        href: \"/components-button\",\n        children: \"Button\"\n      }), \" component to provide the user with an option to retrieve the data again.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Section level error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an error that occured at the section level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<AlertFilledIcon color=\\\"error\\\" size=\\\"lg\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tFailed to load\\n\\t\\t</Heading>\\n\\t\\t<Text>There was an error loading the data. Click retry to try again.</Text>\\n\\t</Stack>\\n\\t<Button>Retry</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Component level error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an error that occured at the component level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Flex gap={0.75} role=\\\"alert\\\">\\n\\t<AlertFilledIcon color=\\\"error\\\" />\\n\\t<Stack gap={1} alignItems=\\\"flex-start\\\">\\n\\t\\t<Stack gap={0.5}>\\n\\t\\t\\t<Text fontWeight=\\\"bold\\\">Failed to load</Text>\\n\\t\\t\\t<Text>\\n\\t\\t\\t\\tThere was an error loading the data. Click retry to try again.\\n\\t\\t\\t</Text>\\n\\t\\t</Stack>\\n\\n\\t\\t<Button variant=\\\"text\\\">Retry</Button>\\n\\t</Stack>\\n</Flex>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Page level error state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For errors which occur at the page level, see the \", _jsx(_components.a, {\n        href: \"/template/error-page\",\n        children: \"Error page template\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The empty state is displayed when data has loaded succesfully, but there is nothing available to show to the user.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This state could potentially be a result of either:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"a new user vists a service for the first time and needs to create data\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"a user applies a number of filters or settings which do return any results\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Depending on what the cause the empty state is, provide clear messaging and a helpful action to get rid of the empty state via a \", _jsx(_components.a, {\n        href: \"/components/button\",\n        children: \"Button\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Section level empty state examples\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of two different empty states at the section level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<FactoryIcon size=\\\"lg\\\" color=\\\"muted\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tAdd an establishment\\n\\t\\t</Heading>\\n\\t\\t<Text>You haven’t added any establishments yet.</Text>\\n\\t</Stack>\\n\\t<Button>Add establishment</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<HelpIcon size=\\\"lg\\\" color=\\\"muted\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tNo results found\\n\\t\\t</Heading>\\n\\t\\t<Text>Try adjusting your filter options.</Text>\\n\\t</Stack>\\n\\t<Button>Clear filters</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Component level empty state example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an empty state at the component level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Flex gap={0.75} role=\\\"alert\\\">\\n\\t<HelpIcon color=\\\"muted\\\" />\\n\\t<Stack gap={1} alignItems=\\\"flex-start\\\">\\n\\t\\t<Stack gap={0.5}>\\n\\t\\t\\t<Text fontWeight=\\\"bold\\\">No results found</Text>\\n\\t\\t\\t<Text>Try adjusting your filter options.</Text>\\n\\t\\t</Stack>\\n\\t\\t<Button variant=\\\"text\\\">Clear filters</Button>\\n\\t</Stack>\\n</Flex>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Loading, empty and error states","group":"Patterns","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","figmaTemplateNodeId":"18846-97172","storybookPath":"/story/patterns-data-loading-cards--basic","relatedComponents":["button","heading","icon","skeleton","text"]}},"content":"\n## Loading state\n\nThe loading state provides feedback to users that data is being loaded.\n\nLoading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\n\n[Skeleton components](/components/skeleton) can be used as visual placeholders for information that is still loading - e.g. cells inside of a table.\n\n### Table loading state example\n\nBelow is an example of a [Table](/components/table) in a loading state.\n\n```jsx live\n<TableWrapper>\n\t<Table tableLayout=\"fixed\">\n\t\t<TableHead>\n\t\t\t<TableRow>\n\t\t\t\t<TableHeader width=\"6rem\" scope=\"col\">\n\t\t\t\t\tID\n\t\t\t\t</TableHeader>\n\t\t\t\t<TableHeader scope=\"col\">Name</TableHeader>\n\t\t\t\t<TableHeader scope=\"col\">Email</TableHeader>\n\t\t\t</TableRow>\n\t\t</TableHead>\n\t\t<TableBody>\n\t\t\t{Array.from(Array(5)).map((_, idx) => (\n\t\t\t\t<TableRow key={idx}>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t</TableRow>\n\t\t\t))}\n\t\t</TableBody>\n\t</Table>\n</TableWrapper>\n```\n\n### Cards loading state example\n\nBelow is an example of a list of [Cards](/components/card) in a loading state.\n\n```jsx live\n<Columns as=\"ul\" cols={{ xs: 2 }}>\n\t{Array.from(Array(2).keys()).map((i) => (\n\t\t<Card key={i} as=\"li\" shadow>\n\t\t\t<CardInner>\n\t\t\t\t<Stack gap={1}>\n\t\t\t\t\t<SkeletonHeading type=\"h3\" width=\"50%\" />\n\t\t\t\t\t<SkeletonText fontSize=\"sm\" width=\"25%\" />\n\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t</Stack>\n\t\t\t</CardInner>\n\t\t</Card>\n\t))}\n</Columns>\n```\n\n## Error state\n\nThe error state provides feedback to users that an error has occurred while loading the data.\n\nWhen creating an error message:\n\n- Be specific in describing the error\n- Distil technical jargon into more simple and conversational language where possible\n- Describe how and when the error can be resolved\n- Don’t blame the user for the error\n- Include the error code in the message if possible. It may be helpful is a user accesses human-led support.\n\nIf applicable, use a [Button](/components-button) component to provide the user with an option to retrieve the data again.\n\n### Section level error state\n\nBelow is an example of an error that occured at the section level.\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t<Stack gap={1}>\n\t\t<AlertFilledIcon color=\"error\" size=\"lg\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tFailed to load\n\t\t</Heading>\n\t\t<Text>There was an error loading the data. Click retry to try again.</Text>\n\t</Stack>\n\t<Button>Retry</Button>\n</Stack>\n```\n\n### Component level error state\n\nBelow is an example of an error that occured at the component level.\n\n```jsx live\n<Flex gap={0.75} role=\"alert\">\n\t<AlertFilledIcon color=\"error\" />\n\t<Stack gap={1} alignItems=\"flex-start\">\n\t\t<Stack gap={0.5}>\n\t\t\t<Text fontWeight=\"bold\">Failed to load</Text>\n\t\t\t<Text>\n\t\t\t\tThere was an error loading the data. Click retry to try again.\n\t\t\t</Text>\n\t\t</Stack>\n\n\t\t<Button variant=\"text\">Retry</Button>\n\t</Stack>\n</Flex>\n```\n\n### Page level error state\n\nFor errors which occur at the page level, see the [Error page template](/template/error-page).\n\n## Empty state\n\nThe empty state is displayed when data has loaded succesfully, but there is nothing available to show to the user.\n\nThis state could potentially be a result of either:\n\n- a new user vists a service for the first time and needs to create data\n- a user applies a number of filters or settings which do return any results\n\nDepending on what the cause the empty state is, provide clear messaging and a helpful action to get rid of the empty state via a [Button](/components/button) component.\n\n### Section level empty state examples\n\nBelow is an example of two different empty states at the section level.\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\">\n\t<Stack gap={1}>\n\t\t<FactoryIcon size=\"lg\" color=\"muted\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tAdd an establishment\n\t\t</Heading>\n\t\t<Text>You haven’t added any establishments yet.</Text>\n\t</Stack>\n\t<Button>Add establishment</Button>\n</Stack>\n```\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t<Stack gap={1}>\n\t\t<HelpIcon size=\"lg\" color=\"muted\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tNo results found\n\t\t</Heading>\n\t\t<Text>Try adjusting your filter options.</Text>\n\t</Stack>\n\t<Button>Clear filters</Button>\n</Stack>\n```\n\n### Component level empty state example\n\nBelow is an example of an empty state at the component level.\n\n```jsx live\n<Flex gap={0.75} role=\"alert\">\n\t<HelpIcon color=\"muted\" />\n\t<Stack gap={1} alignItems=\"flex-start\">\n\t\t<Stack gap={0.5}>\n\t\t\t<Text fontWeight=\"bold\">No results found</Text>\n\t\t\t<Text>Try adjusting your filter options.</Text>\n\t\t</Stack>\n\t\t<Button variant=\"text\">Clear filters</Button>\n\t</Stack>\n</Flex>\n```\n","data":{"title":"Loading, empty and error states","group":"Patterns","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","figmaTemplateNodeId":"18846-97172","storybookPath":"/story/patterns-data-loading-cards--basic","relatedComponents":["button","heading","icon","skeleton","text"]},"title":"Loading, empty and error states","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","figmaTemplateNodeId":"18846-97172","githubTemplatePath":null,"storybookPath":"/story/patterns-data-loading-cards--basic","relatedComponents":["button","heading","icon","skeleton","text"]},"toc":[{"id":"loading-state","title":"Loading state","level":2,"slug":"loading-state","items":[{"id":"table-loading-state-example","title":"Table loading state example","level":3,"slug":"table-loading-state-example","items":[]},{"id":"cards-loading-state-example","title":"Cards loading state example","level":3,"slug":"cards-loading-state-example","items":[]}]},{"id":"error-state","title":"Error state","level":2,"slug":"error-state","items":[{"id":"section-level-error-state","title":"Section level error state","level":3,"slug":"section-level-error-state","items":[]},{"id":"component-level-error-state","title":"Component level error state","level":3,"slug":"component-level-error-state","items":[]},{"id":"page-level-error-state","title":"Page level error state","level":3,"slug":"page-level-error-state","items":[]}]},{"id":"empty-state","title":"Empty state","level":2,"slug":"empty-state","items":[{"id":"section-level-empty-state-examples","title":"Section level empty state examples","level":3,"slug":"section-level-empty-state-examples","items":[]},{"id":"component-level-empty-state-example","title":"Component level empty state example","level":3,"slug":"component-level-empty-state-example","items":[]}]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"relatedComponents":[{"slug":"button","name":"button","title":"Button","description":"A button communicates an action to a user and indicates what will happen next.","storybookPath":"/story/forms-button--primary","figmaGalleryNodeId":"12444%3A100219","subNavItems":[{"label":"Overview","href":"/components/button","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/overview.mdx"},{"label":"Rationale","href":"/components/button/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/rationale.mdx"},{"label":"Content","href":"/components/button/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/content.mdx"},{"label":"Code","href":"/components/button/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/code.mdx"},{"label":"Accessibility","href":"/components/button/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/accessibility.mdx"}],"relatedComponents":null,"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"heading","name":"heading","title":"Heading","description":"Headings are a typographic component that create semantic structure, allow users to scan content by creating relative visual prominence and support search engine optimisation.","storybookPath":"/story/content-heading--basic","figmaGalleryNodeId":"11981%3A101624","subNavItems":[{"label":"Overview","href":"/components/heading","path":"/home/runner/work/agds-next/agds-next/packages/react/src/heading/docs/overview.mdx"},{"label":"Content","href":"/components/heading/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/heading/docs/content.mdx"},{"label":"Code","href":"/components/heading/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/heading/docs/code.mdx"}],"relatedComponents":["list","text"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"icon","name":"icon","title":"Icon","description":"The Agriculture Design System supports the use of universal system icons. The icon component is used to apply our set of universal icons to more complex components of the system.","storybookPath":"/story/foundations-icon--all-icons","figmaGalleryNodeId":null,"subNavItems":[{"label":"Overview","href":"/components/icon","path":"/home/runner/work/agds-next/agds-next/packages/react/src/icon/docs/overview.mdx"},{"label":"Code","href":"/components/icon/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/icon/docs/code.mdx"}],"relatedComponents":null,"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"skeleton","name":"skeleton","title":"Skeleton","description":"Skeletons are visual placeholders for information while data is still loading.","storybookPath":"/story/content-skeleton-skeletonheading--basic","figmaGalleryNodeId":"11981%3A101691","subNavItems":[{"label":"Overview","href":"/components/skeleton","path":"/home/runner/work/agds-next/agds-next/packages/react/src/skeleton/docs/overview.mdx"},{"label":"Code","href":"/components/skeleton/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/skeleton/docs/code.mdx"},{"label":"Accessibility","href":"/components/skeleton/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/skeleton/docs/accessibility.mdx"}],"relatedComponents":["loading"],"relatedPatterns":["loading-error-empty-states"],"deprecated":false,"unreleased":false},{"slug":"text","name":"text","title":"Text","description":"A primitive typographic component for constrained text styles.","storybookPath":"/story/foundations-text--basic","figmaGalleryNodeId":null,"subNavItems":[{"label":"Overview","href":"/components/text","path":"/home/runner/work/agds-next/agds-next/packages/react/src/text/docs/overview.mdx"},{"label":"Code","href":"/components/text/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/text/docs/code.mdx"}],"relatedComponents":["heading","text-link","list"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}