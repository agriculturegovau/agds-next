{"pageProps":{"pkg":{"slug":"page-alert","name":"page-alert","title":"Page alert","description":"Page alerts are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey. They should not be confused with Callouts.","storybookPath":"/story/content-pagealert--basic","figmaGalleryNodeId":"11981%3A101690","subNavItems":[{"label":"Overview","href":"/components/page-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/overview.mdx"},{"label":"Rationale","href":"/components/page-alert/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/rationale.mdx"},{"label":"Content","href":"/components/page-alert/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/content.mdx"},{"label":"Code","href":"/components/page-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/code.mdx"},{"label":"Accessibility","href":"/components/page-alert/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/accessibility.mdx"}],"relatedComponents":["callout","global-alert","section-alert"],"relatedPatterns":["accessible-form-validation-and-recovery","messaging"],"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Page alert"}],"toc":[{"id":"tones","title":"Tones","level":2,"slug":"tones","items":[{"id":"info","title":"Info","level":3,"slug":"info","items":[]},{"id":"success","title":"Success","level":3,"slug":"success","items":[]},{"id":"error","title":"Error","level":3,"slug":"error","items":[]},{"id":"warning","title":"Warning","level":3,"slug":"warning","items":[]}]},{"id":"dismissable","title":"Dismissable","level":2,"slug":"dismissable","items":[]},{"id":"focusing-the-alert","title":"Focusing the alert","level":2,"slug":"focusing-the-alert","items":[{"id":"automatically-focus-on-mount","title":"Automatically focus on mount","level":3,"slug":"automatically-focus-on-mount","items":[]},{"id":"automatically-focus-on-update","title":"Automatically focus on update","level":3,"slug":"automatically-focus-on-update","items":[]},{"id":"manually-set-focus","title":"Manually set focus","level":3,"slug":"manually-set-focus","items":[]}]},{"id":"customising-the-title","title":"Customising the title","level":2,"slug":"customising-the-title","items":[]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    em: \"em\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Typically page alerts appear at the top of a page following a submit action.\"\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"place the Page alert component near the top of the page, under the H1 and introductory paragraph, when validating forms and focus immediately after a submission attempt\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use constructive, no-blame language, avoid vague descriptions and always provide a solution\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"keep it short â€“ content should be understood at a glance\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"use the correct colour tone for the message (see \", _jsx(_components.a, {\n          href: \"#tones\",\n          children: \"tones\"\n        }), \" below)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"insert a Page alert into a \", _jsx(_components.a, {\n          href: \"/components/hero-banner#hero-category-banner\",\n          children: \"Hero category banner\"\n        }), \", instead position the page alert after the h1\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"repeat the title in the description\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"if the alert title is enough to convey the message, a description may not be necessary\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for common actions such as deleting an email or tasks where an action can be undone\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for information unrelated to the specific journey\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use in a form with only one input error - assign focus to the input where the error occurred\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"include a close button for error messages.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tones\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choosing a tone for a PageAlert allows the user to understand the importance and severity of the message at a glance.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The four supported tones are \", _jsx(_components.code, {\n        children: \"info\"\n      }), \", \", _jsx(_components.code, {\n        children: \"success\"\n      }), \", \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"warning\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Info\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The information page alert (blue) is used to highlight important information to the user before they move on. Info alerts should be used sparingly.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"info\\\" title=\\\"Notice\\\">\\n\\t<Text as=\\\"p\\\">\\n\\t\\tAll vacancies close on the advertised closing date unless otherwise\\n\\t\\tspecified.\\n\\t</Text>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Success\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The success page alert (green) is used for notifying the user that a task is fully completed.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"success\\\" title=\\\"Submission successful\\\">\\n\\t<Text as=\\\"p\\\">Your application has been successfully submitted.</Text>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Error\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The error page alert (red) should be used with form validation errors or other errors which the user must action before they can can continue.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"error\\\" title=\\\"There is a problem\\\">\\n\\t<Text as=\\\"p\\\">Please correct the following fields and try again</Text>\\n\\t<UnorderedList>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Full name must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Email must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t</UnorderedList>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Warning\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use warning page alerts (orange) to tell the user how to avoid a problem. Only use an alert if the information will help the user avoid a problem.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"warning\\\" title=\\\"Browser out of date\\\">\\n\\t<Text as=\\\"p\\\">Your web browser is out of date.</Text>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dismissable\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Page alerts can be dismissed by a user if they have understood the message and no longer need to see it.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"onClose\"\n      }), \" prop to make the alert dismissable. Ensure Page alerts that are closed by the user are never seen again. You could do this through a feature flag in a database, or by setting a value in the browser.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a user dismisses an alert, itâ€™s important to manage their focus appropriately to help them continue their task or journey. In some cases, there may not be an obvious (or any) element to send focus to, such as when the alert was triggered by an action on a previous page or from a drawer that is now closed. Always carefully consider the context and previous user actions before moving their focus to ensure a smooth and accessible experience.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"info\\\" title=\\\"New update\\\" onClose={console.log}>\\n\\t<Text as=\\\"p\\\">\\n\\t\\tA new feature has been added to the service.{' '}\\n\\t\\t<TextLink href=\\\"#\\\">Learn more</TextLink>.\\n\\t</Text>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Focusing the alert\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"NOTE: When focusing an alert after closing a \", _jsx(_components.code, {\n          children: \"Drawer\"\n        }), \", use the \", _jsx(_components.a, {\n          href: \"/components/drawer#focus-custom-element-on-close\",\n          children: \"focusElementOnClose prop in the Drawer component\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the event you need to focus the alert, you can do so in one of three ways:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#automatically-focus-on-mount\",\n          children: \"Automatically focus on mount\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#automatically-focus-on-update\",\n          children: \"Automatically focus on update\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#manually-set-focus\",\n          children: \"Manually set focus\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Automatically focus on mount\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the \\\"Toggle alert\\\" button below to mount/unmount the alert. Notice that each time the alert is mounted it will be focused. Here we use the \", _jsx(_components.code, {\n        children: \"focusOnMount\"\n      }), \" boolean prop to automatically handle the focusing.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [showAlert, setShowAlert] = React.useState(false);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\talignSelf=\\\"start\\\"\\n\\t\\t\\t\\tonClick={() => setShowAlert((prevShowAlert) => !prevShowAlert)}\\n\\t\\t\\t>\\n\\t\\t\\t\\tToggle alert\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t{showAlert && (\\n\\t\\t\\t\\t<PageAlert focusOnMount title=\\\"There is a problem\\\" tone=\\\"error\\\">\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">Please correct the following fields and try again</Text>\\n\\t\\t\\t\\t\\t<UnorderedList>\\n\\t\\t\\t\\t\\t\\t<ListItem>\\n\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">Full name must not be empty.</TextLink>\\n\\t\\t\\t\\t\\t\\t</ListItem>\\n\\t\\t\\t\\t\\t\\t<ListItem>\\n\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">Email must not be empty.</TextLink>\\n\\t\\t\\t\\t\\t\\t</ListItem>\\n\\t\\t\\t\\t\\t</UnorderedList>\\n\\t\\t\\t\\t</PageAlert>\\n\\t\\t\\t)}\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Automatically focus on update\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the \\\"Toggle alert\\\" button below to mount/unmount the alert. Notice that each time the alert is mounted and subsequently updated it will be focused. Here we use the \", _jsx(_components.code, {\n        children: \"focusOnUpdate\"\n      }), \" prop to automatically handle the focusing both on mount, and on updates to the alert's content.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once the alert is displayed, try updating the content by pressing the \\\"Update alert content\\\" button. This will focus the alert.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst availableErrors = [\\n\\t\\t'Full name must not be empty.',\\n\\t\\t'Email must not be empty.',\\n\\t\\t'Phone number must not be empty.',\\n\\t];\\n\\n\\tconst [errors, setErrors] = React.useState([\\n\\t\\tavailableErrors[0], // When we have one error, we don't display the page alert (see do's and don'ts for more info)\\n\\t]);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\talignSelf=\\\"start\\\"\\n\\t\\t\\t\\tonClick={() =>\\n\\t\\t\\t\\t\\t// Here we mock the updating of errors in our list\\n\\t\\t\\t\\t\\tsetErrors((prevErrors) =>\\n\\t\\t\\t\\t\\t\\tavailableErrors\\n\\t\\t\\t\\t\\t\\t\\t.toReversed()\\n\\t\\t\\t\\t\\t\\t\\t.slice(availableErrors.length - prevErrors.length - 1)\\n\\t\\t\\t\\t\\t\\t\\t.reverse()\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t}\\n\\t\\t\\t>\\n\\t\\t\\t\\tUpdate alert errors\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t{errors.length > 1 && (\\n\\t\\t\\t\\t<PageAlert\\n\\t\\t\\t\\t\\tfocusOnUpdate={errors}\\n\\t\\t\\t\\t\\ttitle=\\\"There is a problem\\\"\\n\\t\\t\\t\\t\\ttone=\\\"error\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">Please correct the following fields and try again</Text>\\n\\t\\t\\t\\t\\t<UnorderedList>\\n\\t\\t\\t\\t\\t\\t{errors.map((text) => (\\n\\t\\t\\t\\t\\t\\t\\t<ListItem key={text}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">{text}</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t</ListItem>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</UnorderedList>\\n\\t\\t\\t\\t</PageAlert>\\n\\t\\t\\t)}\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Manually set focus\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the \\\"Focus the alert\\\" button below to set focus on the alert. To achieve this, we set the \", _jsx(_components.code, {\n        children: \"tabIndex\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"-1\"\n      }), \". This will allow programmatic focusing and will render a focus ring to aid accessibility.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst alertRef = React.useRef(null);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button alignSelf=\\\"start\\\" onClick={() => alertRef.current.focus()}>\\n\\t\\t\\t\\tFocus the alert\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t<PageAlert\\n\\t\\t\\t\\tref={alertRef}\\n\\t\\t\\t\\ttabIndex={-1}\\n\\t\\t\\t\\ttitle=\\\"Submission successful\\\"\\n\\t\\t\\t\\ttone=\\\"success\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<Text as=\\\"p\\\">Your application has been successfully submitted.</Text>\\n\\t\\t\\t</PageAlert>\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Customising the title\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, \", _jsx(_components.code, {\n        children: \"PageAlert\"\n      }), \" renders its title as an \", _jsx(_components.code, {\n        children: \"h2\"\n      }), \". However, should the need arise, you can change the titleâ€™s semantic tag to an \", _jsx(_components.code, {\n        children: \"h3\"\n      }), \", for example, by passing the \", _jsx(_components.code, {\n        children: \"PageAlertTitle\"\n      }), \" component to the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" prop. For information on maintaining proper heading levels, refer to \", _jsx(_components.a, {\n        href: \"/content/content-structure#structuring-headings-and-labels\",\n        children: \"Structuring headings and labels\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { PageAlertTitle } from '@ag.ds-next/react/page-alert';\\n\\n<PageAlert\\n\\ttone=\\\"success\\\"\\n\\ttitle={<PageAlertTitle as=\\\"h3\\\">Submission successful</PageAlertTitle>}\\n>\\n\\t<Text as=\\\"p\\\">Your application has been successfully submitted.</Text>\\n</PageAlert>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Page alert","description":"Page alerts are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey. They should not be confused with Callouts.","group":"Content","storybookPath":"/story/content-pagealert--basic","figmaGalleryNodeId":"11981%3A101690","relatedComponents":["callout","global-alert","section-alert"],"relatedPatterns":["accessible-form-validation-and-recovery","messaging"]}},"relatedPatterns":[{"slug":"accessible-form-validation-and-recovery","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    ol: \"ol\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"summarise the errors as a list inside of a \", _jsx(_components.a, {\n          href: \"/components/page-alert\",\n          children: \"Page alert\"\n        }), \" component with the \", _jsx(_components.code, {\n          children: \"'error'\"\n        }), \" tone when more than one form validation error has occurred\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"place the \", _jsx(_components.a, {\n          href: \"/components/page-alert\",\n          children: \"Page alert\"\n        }), \" component near the top of the page, below the H1 and introductory paragraph, and focus immediately after a submission attempt\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"validate a form page when the user attempts to submit or save and continue\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"always display fields with form validation errors as invalid with error messages\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"retain the userâ€™s input after an unsuccessful form submission\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"use the \", _jsx(_components.a, {\n          href: \"/components/page-alert\",\n          children: \"Page alert\"\n        }), \" component if there is only one form validation error - instead focus the invalid field\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use native HTML5 validation\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"validate a form when the user is typing\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"depend only on client-side validation - also use server-side validation\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"When to validate\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A form should validate when a user attempts to submit the form. This should occur when the user presses the submit or save and continue button at the bottom of the form page.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This approach prevents interrupting users while they are still entering information. Real-time validation while the user is still typing can be problematic, especially for users who type slowly.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Retaining usersâ€™ input\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It is important that users do not lose the data they have entered when they attempt to submit the form. Retaining the userâ€™s input allows them to correct any errors without starting over.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Summarising form validation errors\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When more than one form validation error has occurred, form validation errors should be summarised as a list inside of a \", _jsx(_components.a, {\n        href: \"/components/page-alert\",\n        children: \"Page alert\"\n      }), \" component with the \", _jsx(_components.code, {\n        children: \"'error'\"\n      }), \" tone. The \", _jsx(_components.a, {\n        href: \"/components/page-alert\",\n        children: \"Page alert\"\n      }), \" component should be placed at the top of the form and focused immediately after a submission attempt to ensure it is visible and announced to screen reader users.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To helps users quickly identify and navigate to the problematic areas of the form, each error in the list should scroll and focus the respective form field when clicked. This can be done with the \", _jsx(_components.a, {\n        href: \"/components/field#usescrolltofield\",\n        children: \"useScrollToField\"\n      }), \" hook.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there is only one form validation error, the \", _jsx(_components.a, {\n        href: \"/components/page-alert\",\n        children: \"Page alert\"\n      }), \" component and error summary should not be displayed and the invalid form field should be focused immediately after a submission attempt.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid form fields\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Form validation errors should also be displayed as invalid field error messages. Use the same error message in the invalid field and in the error summary, if there is more than one error, so they are consistent and reduce the cognitive effort needed to understand what has happened.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an invalid form field:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"First name\\\" required invalid message=\\\"Enter a first name\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disabling HTML5 validation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTML5 validation is a type of client-side validation built into browsers. However, it is not recommended for use with the AgDS due to the following reasons:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Inconsistent visual style, placement and content:\"\n        }), \" HTML5 validation error messages cannot be made customised to be consistent with design system components\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Accessibility concerns:\"\n        }), \" AgDS components that are used to display form validation errors have been designed to be as accessible and inclusive as possible.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To disable HTML5 validation, add the \", _jsx(_components.code, {\n        children: \"noValidate\"\n      }), \" attribute to your \", _jsx(_components.code, {\n        children: \"form\"\n      }), \" tags.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<form onSubmit={() => {}} noValidate>\\n\\t...\\n</form>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Templates\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This pattern has been implemented in the following templates:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/templates/single-page-form\",\n          children: \"Single-page form template\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/templates/multi-page-form\",\n          children: \"Multi-page form template\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Accessible form validation and error recovery","description":"Form validation is a critical aspect of creating usable and accessible applications. By providing effective error feedback and guidance, you can help users submit accurate information while minimising frustrations.","relatedComponents":["page-alert"]}},"content":"\n<DoHeading />\n\n- summarise the errors as a list inside of a [Page alert](/components/page-alert) component with the `'error'` tone when more than one form validation error has occurred\n- place the [Page alert](/components/page-alert) component near the top of the page, below the H1 and introductory paragraph, and focus immediately after a submission attempt\n- validate a form page when the user attempts to submit or save and continue\n- always display fields with form validation errors as invalid with error messages\n- retain the userâ€™s input after an unsuccessful form submission\n\n<DontHeading />\n\n- use the [Page alert](/components/page-alert) component if there is only one form validation error - instead focus the invalid field\n- use native HTML5 validation\n- validate a form when the user is typing\n- depend only on client-side validation - also use server-side validation\n\n## When to validate\n\nA form should validate when a user attempts to submit the form. This should occur when the user presses the submit or save and continue button at the bottom of the form page.\n\nThis approach prevents interrupting users while they are still entering information. Real-time validation while the user is still typing can be problematic, especially for users who type slowly.\n\n## Retaining usersâ€™ input\n\nIt is important that users do not lose the data they have entered when they attempt to submit the form. Retaining the userâ€™s input allows them to correct any errors without starting over.\n\n## Summarising form validation errors\n\nWhen more than one form validation error has occurred, form validation errors should be summarised as a list inside of a [Page alert](/components/page-alert) component with the `'error'` tone. The [Page alert](/components/page-alert) component should be placed at the top of the form and focused immediately after a submission attempt to ensure it is visible and announced to screen reader users.\n\nTo helps users quickly identify and navigate to the problematic areas of the form, each error in the list should scroll and focus the respective form field when clicked. This can be done with the [useScrollToField](/components/field#usescrolltofield) hook.\n\nIf there is only one form validation error, the [Page alert](/components/page-alert) component and error summary should not be displayed and the invalid form field should be focused immediately after a submission attempt.\n\n## Invalid form fields\n\nForm validation errors should also be displayed as invalid field error messages. Use the same error message in the invalid field and in the error summary, if there is more than one error, so they are consistent and reduce the cognitive effort needed to understand what has happened.\n\nBelow is an example of an invalid form field:\n\n```jsx live\n<TextInput label=\"First name\" required invalid message=\"Enter a first name\" />\n```\n\n## Disabling HTML5 validation\n\nHTML5 validation is a type of client-side validation built into browsers. However, it is not recommended for use with the AgDS due to the following reasons:\n\n1. **Inconsistent visual style, placement and content:** HTML5 validation error messages cannot be made customised to be consistent with design system components\n2. **Accessibility concerns:** AgDS components that are used to display form validation errors have been designed to be as accessible and inclusive as possible.\n\nTo disable HTML5 validation, add the `noValidate` attribute to your `form` tags.\n\n```jsx\n<form onSubmit={() => {}} noValidate>\n\t...\n</form>\n```\n\n## Templates\n\nThis pattern has been implemented in the following templates:\n\n- [Single-page form template](/templates/single-page-form)\n- [Multi-page form template](/templates/multi-page-form)\n","data":{"title":"Accessible form validation and error recovery","description":"Form validation is a critical aspect of creating usable and accessible applications. By providing effective error feedback and guidance, you can help users submit accurate information while minimising frustrations.","relatedComponents":["page-alert"]},"title":"Accessible form validation and error recovery","description":"Form validation is a critical aspect of creating usable and accessible applications. By providing effective error feedback and guidance, you can help users submit accurate information while minimising frustrations.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["page-alert"]},{"slug":"messaging","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Global alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/global-alert\",\n        children: \"Global alerts\"\n      }), \" display prominent service or system wide messages at the top of the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"They are used to communicate system or service wide messages, not page or feature messages. Global alerts are not initiated by the user and should persist for a session but can be dismissed by the user.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<GlobalAlert title=\\\"Alert title\\\">\\n\\t<Text as=\\\"p\\\">\\n\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce massa nibh,\\n\\t\\taliquam vel dolor non, gravida porttitor nulla. Pellentesque cursus orci\\n\\t\\tvulputate nibh sagittis blandit.\\n\\t</Text>\\n</GlobalAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Page alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/page-alert\",\n        children: \"Page alerts\"\n      }), \" are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Typically page alerts appear near the top of a page, under the H1 and introductory paragraph, following a submit action.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"error\\\" title=\\\"There is a problem\\\">\\n\\t<Text as=\\\"p\\\">Please correct the following fields and try again</Text>\\n\\t<UnorderedList>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Full name must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Email must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t</UnorderedList>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Section alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/section-alert\",\n        children: \"Section alerts\"\n      }), \" are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages that are delivered in context at a specific section of the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Section alerts appear above an interactive component or at the top of a page section, and provide information or status following an action.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"success\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid field\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Invalid \", _jsx(_components.a, {\n        href: \"/components/field\",\n        children: \"Fields\"\n      }), \" alert the user of something that has happened in an input component. They appear above the input and after any label or hint text.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A border is added to the left-margin of the input to group the message to the component.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput\\n\\tlabel=\\\"Email\\\"\\n\\tinvalid\\n\\tmessage=\\\"Enter an email address in the correct format, like name@example.com\\\"\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Callout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/callout\",\n        children: \"Callouts\"\n      }), \" are used draw attention to persistent, important or interesting information and should not be used to communicate validation or status.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An information hierarchy can be created with Callouts by applying the Feature, Information and Neutral variants of the component. The Feature variant of Callout has a larger icon and heading to draw a userâ€™s attention.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Callout title=\\\"Callout heading\\\">\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Loading, empty and error states\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When loading data in an application, it is important to consider and design for loading, empty, and error states. The compositions in our \", _jsx(_components.a, {\n        href: \"/patterns/loading-error-empty-states\",\n        children: \"Loading, Error and Empty state\"\n      }), \" patterns are designed to help you communicate these states to users.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<AlertFilledIcon color=\\\"error\\\" size=\\\"lg\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tFailed to load\\n\\t\\t</Heading>\\n\\t\\t<Text>There was an error loading the data. Click retry to try again.</Text>\\n\\t</Stack>\\n\\t<Button>Retry</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error page template\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/templates/error-page\",\n        children: \"Error page template\"\n      }), \" is used to display a full page error message to the user, if something goes wrong while loading the page.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This could include 404 errors, or if the application is down for maintenance.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/templates/error-page.webp\",\n        alt: \"Screenshot of error page template\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","relatedComponents":["page-alert","global-alert","section-alert","field","callout"]}},"content":"\n## Global alert\n\n[Global alerts](/components/global-alert) display prominent service or system wide messages at the top of the screen.\n\nThey are used to communicate system or service wide messages, not page or feature messages. Global alerts are not initiated by the user and should persist for a session but can be dismissed by the user.\n\n```jsx live\n<GlobalAlert title=\"Alert title\">\n\t<Text as=\"p\">\n\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce massa nibh,\n\t\taliquam vel dolor non, gravida porttitor nulla. Pellentesque cursus orci\n\t\tvulputate nibh sagittis blandit.\n\t</Text>\n</GlobalAlert>\n```\n\n## Page alert\n\n[Page alerts](/components/page-alert) are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey.\n\nTypically page alerts appear near the top of a page, under the H1 and introductory paragraph, following a submit action.\n\n```jsx live\n<PageAlert tone=\"error\" title=\"There is a problem\">\n\t<Text as=\"p\">Please correct the following fields and try again</Text>\n\t<UnorderedList>\n\t\t<ListItem>\n\t\t\t<TextLink href=\"#\">Full name must not be empty</TextLink>\n\t\t</ListItem>\n\t\t<ListItem>\n\t\t\t<TextLink href=\"#\">Email must not be empty</TextLink>\n\t\t</ListItem>\n\t</UnorderedList>\n</PageAlert>\n```\n\n## Section alert\n\n[Section alerts](/components/section-alert) are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages that are delivered in context at a specific section of the screen.\n\nSection alerts appear above an interactive component or at the top of a page section, and provide information or status following an action.\n\n```jsx live\n<SectionAlert title=\"Your changes have been saved\" tone=\"success\" />\n```\n\n## Invalid field\n\nInvalid [Fields](/components/field) alert the user of something that has happened in an input component. They appear above the input and after any label or hint text.\n\nA border is added to the left-margin of the input to group the message to the component.\n\n```jsx live\n<TextInput\n\tlabel=\"Email\"\n\tinvalid\n\tmessage=\"Enter an email address in the correct format, like name@example.com\"\n/>\n```\n\n## Callout\n\n[Callouts](/components/callout) are used draw attention to persistent, important or interesting information and should not be used to communicate validation or status.\n\nAn information hierarchy can be created with Callouts by applying the Feature, Information and Neutral variants of the component. The Feature variant of Callout has a larger icon and heading to draw a userâ€™s attention.\n\n```jsx live\n<Callout title=\"Callout heading\">\n\t<Text as=\"p\">Description of the callout.</Text>\n</Callout>\n```\n\n## Loading, empty and error states\n\nWhen loading data in an application, it is important to consider and design for loading, empty, and error states. The compositions in our [Loading, Error and Empty state](/patterns/loading-error-empty-states) patterns are designed to help you communicate these states to users.\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t<Stack gap={1}>\n\t\t<AlertFilledIcon color=\"error\" size=\"lg\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tFailed to load\n\t\t</Heading>\n\t\t<Text>There was an error loading the data. Click retry to try again.</Text>\n\t</Stack>\n\t<Button>Retry</Button>\n</Stack>\n```\n\n## Error page template\n\nThe [Error page template](/templates/error-page) is used to display a full page error message to the user, if something goes wrong while loading the page.\n\nThis could include 404 errors, or if the application is down for maintenance.\n\n![Screenshot of error page template](/img/templates/error-page.webp)\n","data":{"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","relatedComponents":["page-alert","global-alert","section-alert","field","callout"]},"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["page-alert","global-alert","section-alert","field","callout"]}],"relatedComponents":[{"slug":"callout","name":"callout","title":"Callout","description":"Callouts are an excerpt of text used to draw attention to important or interesting information. They should not be confused with Page alerts.","storybookPath":"/story/content-callout--basic","figmaGalleryNodeId":"11981%3A101425","subNavItems":[{"label":"Overview","href":"/components/callout","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/overview.mdx"},{"label":"Code","href":"/components/callout/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/code.mdx"},{"label":"Accessibility","href":"/components/callout/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/accessibility.mdx"}],"relatedComponents":["global-alert","page-alert"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},{"slug":"global-alert","name":"global-alert","title":"Global alert","description":"Global alerts display prominent service or system wide messages at the top of the screen.","storybookPath":"/story/content-globalalert--basic","figmaGalleryNodeId":"15243%3A46718","subNavItems":[{"label":"Overview","href":"/components/global-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/global-alert/docs/overview.mdx"},{"label":"Code","href":"/components/global-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/global-alert/docs/code.mdx"}],"relatedComponents":["callout","page-alert","section-alert"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},{"slug":"section-alert","name":"section-alert","title":"Section alert","description":"Section alerts are non-disruptive notifications that provide Success, Error and Warning messages about a state change in a section of a page.","storybookPath":"/story/Content-SectionAlert--basic","figmaGalleryNodeId":"19223%3A12705","subNavItems":[{"label":"Overview","href":"/components/section-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/overview.mdx"},{"label":"Content","href":"/components/section-alert/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/content.mdx"},{"label":"Code","href":"/components/section-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/code.mdx"}],"relatedComponents":["page-alert","global-alert"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false}]},"__N_SSG":true}