{"pageProps":{"pkg":{"slug":"callout","name":"callout","title":"Callout","description":"Callouts are an excerpt of text used to draw attention to important or interesting information. They should not be confused with Page alerts.","storybookPath":"/story/content-callout--basic","figmaGalleryNodeId":"11981%3A101425","subNavItems":[{"label":"Overview","href":"/components/callout","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/overview.mdx"},{"label":"Code","href":"/components/callout/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/code.mdx"},{"label":"Accessibility","href":"/components/callout/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/accessibility.mdx"}],"relatedComponents":["global-alert","page-alert"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Callout"}],"toc":[{"id":"tones","title":"Tones","level":2,"slug":"tones","items":[{"id":"neutral-callout","title":"Neutral Callout","level":3,"slug":"neutral-callout","items":[]},{"id":"information-callout","title":"Information Callout","level":3,"slug":"information-callout","items":[]}]},{"id":"compact","title":"Compact","level":2,"slug":"compact","items":[]},{"id":"feature","title":"Feature","level":2,"slug":"feature","items":[]},{"id":"colour","title":"Colour","level":2,"slug":"colour","items":[]},{"id":"customising-the-title","title":"Customising the title","level":2,"slug":"customising-the-title","items":[]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Callout title=\\\"Callout heading\\\">\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use callout to draw a user’s attention to important snippets of static information.\"\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use sparingly as they are intrusive\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use to help users quickly scan to find essential information in a long text page\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use to reiterate important content\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for quotes in long-form content\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use different tones and variants on the same page to convey information hierarchy\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use to format content not included in the main text such as support and contact details, checklists, definitions and ‘Did you know?’ content.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"embed form inputs in Callouts\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use in conditionally revealed checkbox or radio groups\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"make them the focus of content; they are a supporting tool\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for errors and alerts – use a Page alert or Section alert instead\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for primary content, as it may be missed\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"mix colour palettes.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tones\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Callouts can be used to convey different tones of information. The tone of a callout is conveyed through the background colour and icon.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Neutral Callout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The default tone of a callout is \", _jsx(_components.code, {\n        children: \"neutral\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Callout title=\\\"Callout heading\\\">\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, neutral Callouts make use of the \", _jsx(_components.code, {\n        children: \"shade\"\n      }), \" \", _jsx(_components.a, {\n        href: \"/foundations/tokens/colour#background-colours\",\n        children: \"background token\"\n      }), \", which must be paired with the normal \", _jsx(_components.code, {\n        children: \"body\"\n      }), \" background.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the neutral Callout component is placed on a page with \", _jsx(_components.code, {\n        children: \"bodyAlt\"\n      }), \" background, set the \", _jsx(_components.code, {\n        children: \"onBodyAlt\"\n      }), \" prop to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \". This ensures the correct shade background token is used by the component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack background=\\\"bodyAlt\\\" padding={2} gap={1}>\\n\\t<Text>An area with `bodyAlt` background</Text>\\n\\t<Callout title=\\\"Callout heading\\\" tone=\\\"neutral\\\" onBodyAlt>\\n\\t\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n\\t</Callout>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Information Callout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use an \", _jsx(_components.code, {\n        children: \"info\"\n      }), \" tone to highlight information which is important for users.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Callout title=\\\"Callout heading\\\" tone=\\\"info\\\">\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Compact\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Compact version of the callout can be used when there is limited space, such as inside of an Accordion.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Accordion>\\n\\t<AccordionItem title=\\\"Accordion 1\\\">\\n\\t\\t<AccordionItemContent>\\n\\t\\t\\t<Text as=\\\"p\\\">Here is the accordion content.</Text>\\n\\t\\t</AccordionItemContent>\\n\\t</AccordionItem>\\n\\t<AccordionItem isInitiallyOpen title=\\\"Accordion 2\\\">\\n\\t\\t<AccordionItemContent>\\n\\t\\t\\t<Stack gap=\\\"1\\\">\\n\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\tHere is the conditionally revealed content with callout.\\n\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t<TextLink href=\\\"#\\\">Light link</TextLink>\\n\\t\\t\\t\\t<Callout title=\\\"Callout heading\\\" tone=\\\"info\\\" variant=\\\"compact\\\">\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n\\t\\t\\t\\t</Callout>\\n\\t\\t\\t</Stack>\\n\\t\\t</AccordionItemContent>\\n\\t</AccordionItem>\\n\\t<AccordionItem title=\\\"Accordion 3\\\">\\n\\t\\t<AccordionItemContent>\\n\\t\\t\\t<Text as=\\\"p\\\">Here is the accordion content.</Text>\\n\\t\\t</AccordionItemContent>\\n\\t</AccordionItem>\\n\\t<AccordionItem title=\\\"Accordion 4\\\">\\n\\t\\t<AccordionItemContent>\\n\\t\\t\\t<Text as=\\\"p\\\">Here is the accordion content.</Text>\\n\\t\\t</AccordionItemContent>\\n\\t</AccordionItem>\\n</Accordion>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Feature\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The feature variant of the callout can be used to draw even more emphasis to the content.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Callout title=\\\"Feature Callout heading\\\" tone=\\\"info\\\" variant=\\\"feature\\\">\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Colour\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AgDS foreground components respond to the background colour of their parent container. When placed on a dark palette background, the dark palette variant of the component is displayed. When placed on a light palette background the light palette variant is displayed.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This logic ensures sufficient contrast between foreground and background elements is maintained to meet WCAG 2.1AA, 4.5:1 contrast ratio for text (WCAG 1.4.3) and 3:1 for graphic elements that convey information (WCAG 1.4.11).\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Fragment>\\n\\t<Stack as=\\\"ul\\\" css={{ listStyle: 'none' }} gap=\\\"1\\\" paddingBottom=\\\"1\\\">\\n\\t\\t<Box as=\\\"li\\\">\\n\\t\\t\\t<Callout title=\\\"Callout light 1\\\">\\n\\t\\t\\t\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n\\t\\t\\t</Callout>\\n\\t\\t</Box>\\n\\t\\t<Box as=\\\"li\\\">\\n\\t\\t\\t<Callout title=\\\"Callout light 2\\\" tone=\\\"info\\\">\\n\\t\\t\\t\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n\\t\\t\\t</Callout>\\n\\t\\t</Box>\\n\\t</Stack>\\n\\n\\t<Stack as=\\\"ul\\\" css={{ listStyle: 'none' }} gap=\\\"1\\\" palette=\\\"dark\\\">\\n\\t\\t<Box as=\\\"li\\\">\\n\\t\\t\\t<Callout title=\\\"Callout dark 1\\\">\\n\\t\\t\\t\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n\\t\\t\\t</Callout>\\n\\t\\t</Box>\\n\\t\\t<Box as=\\\"li\\\">\\n\\t\\t\\t<Callout title=\\\"Callout dark 2\\\" tone=\\\"info\\\">\\n\\t\\t\\t\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n\\t\\t\\t</Callout>\\n\\t\\t</Box>\\n\\t</Stack>\\n</Fragment>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Customising the title\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, \", _jsx(_components.code, {\n        children: \"Callout\"\n      }), \" renders its title as an \", _jsx(_components.code, {\n        children: \"h2\"\n      }), \". However, should the need arise, you can change the title’s semantic tag to an \", _jsx(_components.code, {\n        children: \"h3\"\n      }), \", for example, by passing the \", _jsx(_components.code, {\n        children: \"CalloutTitle\"\n      }), \" component to the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" prop. For information on maintaining proper heading levels, refer to \", _jsx(_components.a, {\n        href: \"/content/content-structure#structuring-headings-and-labels\",\n        children: \"Structuring headings and labels\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { CalloutTitle } from '@ag.ds-next/react/callout';\\n\\n<Callout\\n\\ttone=\\\"info\\\"\\n\\tvariant=\\\"feature\\\"\\n\\ttitle={<CalloutTitle as=\\\"h3\\\">Callout heading</CalloutTitle>}\\n>\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Callout","description":"Callouts are an excerpt of text used to draw attention to important or interesting information. They should not be confused with Page alerts.","group":"Content","storybookPath":"/story/content-callout--basic","figmaGalleryNodeId":"11981%3A101425","relatedComponents":["global-alert","page-alert"],"relatedPatterns":["messaging"]}},"relatedPatterns":[{"slug":"messaging","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Global alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/global-alert\",\n        children: \"Global alerts\"\n      }), \" display prominent service or system wide messages at the top of the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"They are used to communicate system or service wide messages, not page or feature messages. Global alerts are not initiated by the user and should persist for a session but can be dismissed by the user.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<GlobalAlert title=\\\"Alert title\\\">\\n\\t<Text as=\\\"p\\\">\\n\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce massa nibh,\\n\\t\\taliquam vel dolor non, gravida porttitor nulla. Pellentesque cursus orci\\n\\t\\tvulputate nibh sagittis blandit.\\n\\t</Text>\\n</GlobalAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Page alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/page-alert\",\n        children: \"Page alerts\"\n      }), \" are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Typically page alerts appear near the top of a page, under the H1 and introductory paragraph, following a submit action.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"error\\\" title=\\\"There is a problem\\\">\\n\\t<Text as=\\\"p\\\">Please correct the following fields and try again</Text>\\n\\t<UnorderedList>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Full name must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Email must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t</UnorderedList>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Section alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/section-alert\",\n        children: \"Section alerts\"\n      }), \" are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages that are delivered in context at a specific section of the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Section alerts appear above an interactive component or at the top of a page section, and provide information or status following an action.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"success\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid field\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Invalid \", _jsx(_components.a, {\n        href: \"/components/field\",\n        children: \"Fields\"\n      }), \" alert the user of something that has happened in an input component. They appear above the input and after any label or hint text.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A border is added to the left-margin of the input to group the message to the component.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput\\n\\tlabel=\\\"Email\\\"\\n\\tinvalid\\n\\tmessage=\\\"Enter an email address in the correct format, like name@example.com\\\"\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Callout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/callout\",\n        children: \"Callouts\"\n      }), \" are used draw attention to persistent, important or interesting information and should not be used to communicate validation or status.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An information hierarchy can be created with Callouts by applying the Feature, Information and Neutral variants of the component. The Feature variant of Callout has a larger icon and heading to draw a user’s attention.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Callout title=\\\"Callout heading\\\">\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Loading, empty and error states\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When loading data in an application, it is important to consider and design for loading, empty, and error states. The compositions in our \", _jsx(_components.a, {\n        href: \"/patterns/loading-error-empty-states\",\n        children: \"Loading, Error and Empty state\"\n      }), \" patterns are designed to help you communicate these states to users.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<AlertFilledIcon color=\\\"error\\\" size=\\\"lg\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tFailed to load\\n\\t\\t</Heading>\\n\\t\\t<Text>There was an error loading the data. Click retry to try again.</Text>\\n\\t</Stack>\\n\\t<Button>Retry</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error page template\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/templates/error-page\",\n        children: \"Error page template\"\n      }), \" is used to display a full page error message to the user, if something goes wrong while loading the page.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This could include 404 errors, or if the application is down for maintenance.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/templates/error-page.webp\",\n        alt: \"Screenshot of error page template\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","relatedComponents":["page-alert","global-alert","section-alert","field","callout"]}},"content":"\n## Global alert\n\n[Global alerts](/components/global-alert) display prominent service or system wide messages at the top of the screen.\n\nThey are used to communicate system or service wide messages, not page or feature messages. Global alerts are not initiated by the user and should persist for a session but can be dismissed by the user.\n\n```jsx live\n<GlobalAlert title=\"Alert title\">\n\t<Text as=\"p\">\n\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce massa nibh,\n\t\taliquam vel dolor non, gravida porttitor nulla. Pellentesque cursus orci\n\t\tvulputate nibh sagittis blandit.\n\t</Text>\n</GlobalAlert>\n```\n\n## Page alert\n\n[Page alerts](/components/page-alert) are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey.\n\nTypically page alerts appear near the top of a page, under the H1 and introductory paragraph, following a submit action.\n\n```jsx live\n<PageAlert tone=\"error\" title=\"There is a problem\">\n\t<Text as=\"p\">Please correct the following fields and try again</Text>\n\t<UnorderedList>\n\t\t<ListItem>\n\t\t\t<TextLink href=\"#\">Full name must not be empty</TextLink>\n\t\t</ListItem>\n\t\t<ListItem>\n\t\t\t<TextLink href=\"#\">Email must not be empty</TextLink>\n\t\t</ListItem>\n\t</UnorderedList>\n</PageAlert>\n```\n\n## Section alert\n\n[Section alerts](/components/section-alert) are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages that are delivered in context at a specific section of the screen.\n\nSection alerts appear above an interactive component or at the top of a page section, and provide information or status following an action.\n\n```jsx live\n<SectionAlert title=\"Your changes have been saved\" tone=\"success\" />\n```\n\n## Invalid field\n\nInvalid [Fields](/components/field) alert the user of something that has happened in an input component. They appear above the input and after any label or hint text.\n\nA border is added to the left-margin of the input to group the message to the component.\n\n```jsx live\n<TextInput\n\tlabel=\"Email\"\n\tinvalid\n\tmessage=\"Enter an email address in the correct format, like name@example.com\"\n/>\n```\n\n## Callout\n\n[Callouts](/components/callout) are used draw attention to persistent, important or interesting information and should not be used to communicate validation or status.\n\nAn information hierarchy can be created with Callouts by applying the Feature, Information and Neutral variants of the component. The Feature variant of Callout has a larger icon and heading to draw a user’s attention.\n\n```jsx live\n<Callout title=\"Callout heading\">\n\t<Text as=\"p\">Description of the callout.</Text>\n</Callout>\n```\n\n## Loading, empty and error states\n\nWhen loading data in an application, it is important to consider and design for loading, empty, and error states. The compositions in our [Loading, Error and Empty state](/patterns/loading-error-empty-states) patterns are designed to help you communicate these states to users.\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t<Stack gap={1}>\n\t\t<AlertFilledIcon color=\"error\" size=\"lg\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tFailed to load\n\t\t</Heading>\n\t\t<Text>There was an error loading the data. Click retry to try again.</Text>\n\t</Stack>\n\t<Button>Retry</Button>\n</Stack>\n```\n\n## Error page template\n\nThe [Error page template](/templates/error-page) is used to display a full page error message to the user, if something goes wrong while loading the page.\n\nThis could include 404 errors, or if the application is down for maintenance.\n\n![Screenshot of error page template](/img/templates/error-page.webp)\n","data":{"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","relatedComponents":["page-alert","global-alert","section-alert","field","callout"]},"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["page-alert","global-alert","section-alert","field","callout"]}],"relatedComponents":[{"slug":"global-alert","name":"global-alert","title":"Global alert","description":"Global alerts display prominent service or system wide messages at the top of the screen.","storybookPath":"/story/content-globalalert--basic","figmaGalleryNodeId":"15243%3A46718","subNavItems":[{"label":"Overview","href":"/components/global-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/global-alert/docs/overview.mdx"},{"label":"Code","href":"/components/global-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/global-alert/docs/code.mdx"}],"relatedComponents":["callout","page-alert","section-alert"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},{"slug":"page-alert","name":"page-alert","title":"Page alert","description":"Page alerts are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey. They should not be confused with Callouts.","storybookPath":"/story/content-pagealert--basic","figmaGalleryNodeId":"11981%3A101690","subNavItems":[{"label":"Overview","href":"/components/page-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/overview.mdx"},{"label":"Rationale","href":"/components/page-alert/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/rationale.mdx"},{"label":"Content","href":"/components/page-alert/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/content.mdx"},{"label":"Code","href":"/components/page-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/code.mdx"},{"label":"Accessibility","href":"/components/page-alert/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/accessibility.mdx"}],"relatedComponents":["callout","global-alert","section-alert"],"relatedPatterns":["accessible-form-validation-and-recovery","messaging"],"deprecated":false,"unreleased":false}]},"__N_SSG":true}