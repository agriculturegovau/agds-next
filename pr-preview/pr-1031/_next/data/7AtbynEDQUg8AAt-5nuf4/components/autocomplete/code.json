{"pageProps":{"pkg":{"slug":"autocomplete","content":"\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState(null);\n\treturn (\n\t\t<Autocomplete\n\t\t\tlabel=\"Find your state\"\n\t\t\thint=\"Start typing to see results\"\n\t\t\tvalue={value}\n\t\t\tonChange={(value) => setValue(value)}\n\t\t\tloadOptions={async function loadOptions(inputValue) {\n\t\t\t\t// Simulate a slow network call\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1500));\n\t\t\t\treturn [\n\t\t\t\t\t{ label: 'Australian Capital Territory', value: 'act' },\n\t\t\t\t\t{ label: 'New South Wales', value: 'nsw' },\n\t\t\t\t\t{ label: 'Northern Territory', value: 'nt' },\n\t\t\t\t\t{ label: 'Queensland', value: 'qld' },\n\t\t\t\t\t{ label: 'South Australia', value: 'sa' },\n\t\t\t\t\t{ label: 'Tasmania', value: 'tas' },\n\t\t\t\t\t{ label: 'Victoria', value: 'vic' },\n\t\t\t\t\t{ label: 'Western Australia', value: 'wa' },\n\t\t\t\t];\n\t\t\t}}\n\t\t/>\n\t);\n};\n```\n\nBy default, the `Autocomplete` component does not expand to fill the available space.\n\n<DoHeading />\n\n- use to help people complete input from an API\n- use for address input\n- use where spelling or data entry might be challenging\n- use to order results in a meaningful way\n- indicate whether input is optional\n- ensure users can easily filter a list of options\n- provide hint text for instruction\n- deliver suggestions in real-time for low latency.\n\n<DontHeading />\n\n- show more than 10 results at a time\n- use if the list of possible results is small - use Radio instead.\n\n## Required\n\nThe `required` prop can be used to indicate that user input is required on the field before a form can be submitted.\n\nUsing the `required` prop, this component will automatically append \"(optional)\" to the label as well as using [aria-required](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required) to indicate to screen reader user that the field is required.\n\n### Hide optional label\n\nThe `hideOptionalLabel` prop can be used in situations where you want to indiciate to screen reader users that a field is optional but don't want to show the \"(optional)\" label.\n\nThe usage of `hideOptionalLabel` should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState(null);\n\treturn (\n\t\t<Autocomplete\n\t\t\tlabel=\"Find your state\"\n\t\t\thint=\"Start typing to see results\"\n\t\t\trequired\n\t\t\tvalue={value}\n\t\t\tonChange={(value) => setValue(value)}\n\t\t\tloadOptions={async function loadOptions(inputValue) {\n\t\t\t\t// Simulate a slow network call\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1500));\n\t\t\t\treturn [\n\t\t\t\t\t{ label: 'Australian Capital Territory', value: 'act' },\n\t\t\t\t\t{ label: 'New South Wales', value: 'nsw' },\n\t\t\t\t\t{ label: 'Northern Territory', value: 'nt' },\n\t\t\t\t\t{ label: 'Queensland', value: 'qld' },\n\t\t\t\t\t{ label: 'South Australia', value: 'sa' },\n\t\t\t\t\t{ label: 'Tasmania', value: 'tas' },\n\t\t\t\t\t{ label: 'Victoria', value: 'vic' },\n\t\t\t\t\t{ label: 'Western Australia', value: 'wa' },\n\t\t\t\t];\n\t\t\t}}\n\t\t/>\n\t);\n};\n```\n\n## Block\n\nUse the `block` prop to expand the component to fill the available space.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState(null);\n\treturn (\n\t\t<Autocomplete\n\t\t\tlabel=\"Find your state\"\n\t\t\thint=\"Start typing to see results\"\n\t\t\tblock\n\t\t\tvalue={value}\n\t\t\tonChange={(value) => setValue(value)}\n\t\t\tloadOptions={async function loadOptions(inputValue) {\n\t\t\t\t// Simulate a slow network call\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1500));\n\t\t\t\treturn [\n\t\t\t\t\t{ label: 'Australian Capital Territory', value: 'act' },\n\t\t\t\t\t{ label: 'New South Wales', value: 'nsw' },\n\t\t\t\t\t{ label: 'Northern Territory', value: 'nt' },\n\t\t\t\t\t{ label: 'Queensland', value: 'qld' },\n\t\t\t\t\t{ label: 'South Australia', value: 'sa' },\n\t\t\t\t\t{ label: 'Tasmania', value: 'tas' },\n\t\t\t\t\t{ label: 'Victoria', value: 'vic' },\n\t\t\t\t\t{ label: 'Western Australia', value: 'wa' },\n\t\t\t\t];\n\t\t\t}}\n\t\t/>\n\t);\n};\n```\n\n## Invalid\n\nUse the `invalid` prop to indicate if the user input is invalid (does not validate according to the elements settings).\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState(null);\n\tconst invalid = !value;\n\treturn (\n\t\t<Autocomplete\n\t\t\tlabel=\"Find your state\"\n\t\t\thint=\"Start typing to see results\"\n\t\t\tinvalid={invalid}\n\t\t\tmessage={invalid ? 'State is required' : undefined}\n\t\t\tvalue={value}\n\t\t\tonChange={(value) => setValue(value)}\n\t\t\tloadOptions={async function loadOptions(inputValue) {\n\t\t\t\t// Simulate a slow network call\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1500));\n\t\t\t\treturn [\n\t\t\t\t\t{ label: 'Australian Capital Territory', value: 'act' },\n\t\t\t\t\t{ label: 'New South Wales', value: 'nsw' },\n\t\t\t\t\t{ label: 'Northern Territory', value: 'nt' },\n\t\t\t\t\t{ label: 'Queensland', value: 'qld' },\n\t\t\t\t\t{ label: 'South Australia', value: 'sa' },\n\t\t\t\t\t{ label: 'Tasmania', value: 'tas' },\n\t\t\t\t\t{ label: 'Victoria', value: 'vic' },\n\t\t\t\t\t{ label: 'Western Australia', value: 'wa' },\n\t\t\t\t];\n\t\t\t}}\n\t\t/>\n\t);\n};\n```\n","data":{"title":"Autocomplete","description":"Autocomplete, also known as type-ahead, uses predictive text to complete words as they are entered.","group":"Forms","storybookPath":"/story/forms-autocomplete--basic","figmaGalleryNodeId":"12911%3A103687"},"name":"autocomplete","version":"1.3.0","title":"Autocomplete","description":"Autocomplete, also known as type-ahead, uses predictive text to complete words as they are entered.","storybookPath":"/story/forms-autocomplete--basic","figmaGalleryNodeId":"12911%3A103687","subNavItems":[{"label":"Overview","href":"/components/autocomplete","path":"/home/runner/work/agds-next/agds-next/packages/react/src/autocomplete/docs/overview.mdx"},{"label":"Code","href":"/components/autocomplete/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/autocomplete/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"href":"/components/autocomplete","label":"Autocomplete"},{"label":"Code"}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {ComponentPropsTable} = _components;\n  if (!ComponentPropsTable) _missingMdxReference(\"ComponentPropsTable\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Props\"\n    }), \"\\n\", _jsx(ComponentPropsTable, {\n      name: \"Autocomplete\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"toc":[{"id":"props","title":"Props","level":2,"slug":"props","items":[]}]},"__N_SSG":true}