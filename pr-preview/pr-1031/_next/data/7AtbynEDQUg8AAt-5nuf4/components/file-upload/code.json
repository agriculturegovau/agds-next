{"pageProps":{"pkg":{"slug":"file-upload","content":"\n```jsx live\n<FileUpload\n\tlabel=\"Avatar image\"\n\thint=\"Formats accepted: .png, .jpg.\"\n\tmultiple={false}\n\taccept={['image/jpeg', 'image/jpg', 'image/png']}\n/>\n```\n\n`FileUpload` is a [controlled component](https://reactjs.org/docs/forms.html#controlled-components).\n\n<DoHeading />\n\n- provide the accepted file types, maximum file size and whether the user can upload one file at a time or several at once\n- include hint text to provide information about the field\n- indicate file uploading state\n- indicate successful file upload\n- indicate unsuccessful file uploads with a meaningful error message.\n\n<DontHeading />\n\n- use for multiple files in modals or page alerts\n- add a standalone Submit file button inside a form\n- include other fields on the page\n- make File upload a mandatory field.\n\n## Indicating upload status\n\nWhen using FileUpload, you need to consider how the communicate to the user that the upload is in progress. Otherwise the page will appear \"frozen\" as the operation happens in the background.\n\n### Uploading on submission\n\nIn this example, we are submitting a file as part of a typical form submission to an API.\n\nWe recommend wrapping the FileUpload in a LoadingBanner as the form submits, to indicate to the user that any delays are being caused by a potentially larger file being uploaded. If your backend system supports it, you can also use this UI to indicate upload status as a percentage.\n\nAs normal, we indicate that the form is submitting by adding a `loading={true}` to the submit button. This will show animated dots to signify that the user has to wait for the operation to complete.\n\n```jsx live\n<FormStack>\n\t<div style={{ position: 'relative' }}>\n\t\t<FileUpload\n\t\t\tlabel=\"Avatar image\"\n\t\t\thint=\"Formats accepted: .png, .jpg.\"\n\t\t\tmultiple={false}\n\t\t\taccept={['image/jpeg', 'image/jpg', 'image/png']}\n\t\t/>\n\t\t<LoadingBlanket label=\"Uploading file (53%)\" />\n\t</div>\n\t<div>\n\t\t<Button loading>Submit</Button>\n\t</div>\n</FormStack>\n```\n\n### Uploading files instantly\n\nIn this example, the file is instantly uploaded to a file hosting service, and the URL of the uploaded asset would be added to the form for submission. This means the form should not be allowed to submit until all assets are uploaded, but that the submission should be very quick as it's only text content being submitted.\n\n`FileUpload` component allows you to indicate the status of an upload via a `file.status` property.\n\n```jsx live\n() => {\n\tconst uploadingFile = new File(['this is an example file'], 'example.jpg', {\n\t\ttype: 'image/jpg',\n\t});\n\tuploadingFile.status = 'uploading';\n\tconst uploadedFile = new File(\n\t\t['this is another example file that has uploaded'],\n\t\t'example.jpg',\n\t\t{\n\t\t\ttype: 'image/jpg',\n\t\t}\n\t);\n\tuploadedFile.status = 'success';\n\treturn (\n\t\t<FileUpload\n\t\t\tlabel=\"Avatar image\"\n\t\t\thint=\"Formats accepted: .png, .jpg.\"\n\t\t\tmultiple={false}\n\t\t\taccept={['image/jpeg', 'image/jpg', 'image/png']}\n\t\t\tvalue={[uploadedFile, uploadingFile]}\n\t\t\tonChange={console.log}\n\t\t/>\n\t);\n};\n```\n\n---\n\n## Props\n\n### Multiple files\n\nSelecting multiple files is also supported with FileUpload. Simply add `multiple={true}`, and you can select as many files as you want. You can also set `maxFiles` to limit how many files can be selected.\n\n```jsx\n<FileUpload multiple={true} maxFiles={3} />\n```\n\n### Maximum size\n\nUse the `maxSize` prop to set a maximum size for each file. This value is measured in kB.\n\n```jsx\n<FileUpload maxSize={200} /> // 200kB\n<FileUpload maxSize={20000} /> // 20MB\n```\n\n### Accepted files\n\nUsing the `accept` prop, you can specify what filetypes are allowed to be selected. Filetypes include...\n\n- `application/msword`\n- `application/pdf`\n- `application/rtf`\n- `application/vnd.ms-excel`\n- `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet` (.xls)\n- `application/vnd.openxmlformats-officedocument.wordprocessingml.document` (.doc)\n- `application/zip`\n- `audio/*`\n- `audio/mpeg`\n- `audio/wav`\n- `image/*`\n- `image/gif`\n- `image/heic`\n- `image/jpeg`\n- `image/png`\n- `image/svg+xml`\n- `image/tiff`\n- `image/webp`\n- `text/*`\n- `text/csv`\n- `text/plain`\n- `text/rtf`\n- `video/*`\n- `video/mp4`\n- `video/mpeg`\n\n```jsx\n<FileUpload accept={['image/jpeg', 'image/jpg', 'image/png']} />\n```\n","data":{"title":"File upload","description":"This component allows users to select files to upload via drag-and-drop or browsing their device.","group":"Forms","storybookPath":"/story/forms-fileupload--basic","figmaGalleryNodeId":"12444%3A100384"},"name":"file-upload","version":"1.3.0","title":"File upload","description":"This component allows users to select files to upload via drag-and-drop or browsing their device.","storybookPath":"/story/forms-fileupload--basic","figmaGalleryNodeId":"12444%3A100384","subNavItems":[{"label":"Overview","href":"/components/file-upload","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-upload/docs/overview.mdx"},{"label":"Code","href":"/components/file-upload/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-upload/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"href":"/components/file-upload","label":"File upload"},{"label":"Code"}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {ComponentPropsTable} = _components;\n  if (!ComponentPropsTable) _missingMdxReference(\"ComponentPropsTable\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Props\"\n    }), \"\\n\", _jsx(ComponentPropsTable, {\n      name: \"FileUpload\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"toc":[{"id":"props","title":"Props","level":2,"slug":"props","items":[]}]},"__N_SSG":true}