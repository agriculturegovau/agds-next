{"pageProps":{"pkg":{"slug":"task-list","content":"\n```jsx live\n<TaskList\n\titems={[\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Check eligibility',\n\t\t\tstatus: 'done',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Personal details',\n\t\t\tstatus: 'doneRecently',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Lorem ipsum dolor sit amet',\n\t\t\tstatus: 'doing',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Case Studies',\n\t\t\tstatus: 'todo',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Review and submit',\n\t\t\tmessage: 'Not available until previous tasks are done',\n\t\t\tstatus: 'blocked',\n\t\t},\n\t]}\n/>\n```\n\n<DoHeading />\n\n- use when unique information needs to be entered that can’t be answered through preset options\n- indicate if input is optional\n- provide useful hints where necessary\n- provide an error message when input is invalid\n- align form inputs using a FormStack\n- hide the ‘optional’ label when filtering data.\n\n<DontHeading />\n\n- use if a dropdown, select, or radio button can be used instead\n- hide the 'optional' label within a form\n- use placeholder text as a substitute for a label.\n\n## Task status\n\nYou can indicate the status of each task using the `status` parameter. The following values are available:\n\n<Table>\n\t<TableCaption>Available statuses for a TaskList</TableCaption>\n\t<TableHead>\n\t\t<tr>\n\t\t\t<TableHeader scope=\"col\">Status</TableHeader>\n\t\t\t<TableHeader scope=\"col\">Label</TableHeader>\n\t\t\t<TableHeader scope=\"col\">Description</TableHeader>\n\t\t</tr>\n\t</TableHead>\n\t<TableBody>\n\t\t<tr>\n\t\t\t<TableCell>\n\t\t\t\t<code>todo</code>\n\t\t\t</TableCell>\n\t\t\t<TableCell>Not started</TableCell>\n\t\t\t<TableCell>The task is available for the user to do</TableCell>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<TableCell>\n\t\t\t\t<code>doing</code>\n\t\t\t</TableCell>\n\t\t\t<TableCell>In progress</TableCell>\n\t\t\t<TableCell>\n\t\t\t\tThe task has been started, and is ready for the user to continue.\n\t\t\t</TableCell>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<TableCell>\n\t\t\t\t<code>done</code>\n\t\t\t</TableCell>\n\t\t\t<TableCell>Completed</TableCell>\n\t\t\t<TableCell>The task has been completed</TableCell>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<TableCell>\n\t\t\t\t<code>doneRecently</code>\n\t\t\t</TableCell>\n\t\t\t<TableCell>Completed</TableCell>\n\t\t\t<TableCell>\n\t\t\t\tThe task has just been completed recently, so it shows a green highlight\n\t\t\t\tto indicate activity.\n\t\t\t</TableCell>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<TableCell>\n\t\t\t\t<code>blocked</code>\n\t\t\t</TableCell>\n\t\t\t<TableCell>Cannot start yet</TableCell>\n\t\t\t<TableCell>\n\t\t\t\tThe task cannot be completed until other tasks have been.\n\t\t\t</TableCell>\n\t\t</tr>\n\t</TableBody>\n</Table>\n\n## Sequential\n\nIf the list of tasks must be completed in order, you can set the `ordered` prop to `true`.\n\n```jsx live\n<TaskList\n\tordered={true}\n\titems={[\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Check eligibility',\n\t\t\tstatus: 'done',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Lorem ipsum dolor sit amet',\n\t\t\tstatus: 'doing',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Case Studies',\n\t\t\tstatus: 'todo',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Review and submit',\n\t\t\tmessage: 'Not available until previous tasks are done',\n\t\t\tstatus: 'blocked',\n\t\t},\n\t]}\n/>\n```\n\n## Recently completed\n\nIf the user has just completed a task, and then navigated back to the TaskList screen, you can highlight that the task is completed by setting the status of the item to `doneRecently`.\n\nThis should be a temporary state, and should be removed after a short period of time.\n\n```jsx live\n<TaskList\n\titems={[\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Check eligibility',\n\t\t\tstatus: 'doneRecently',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Lorem ipsum dolor sit amet',\n\t\t\tstatus: 'done',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Case Studies',\n\t\t\tstatus: 'todo',\n\t\t},\n\t\t{\n\t\t\thref: '#',\n\t\t\tlabel: 'Review and submit',\n\t\t\tmessage: 'Not available until previous tasks are done',\n\t\t\tstatus: 'blocked',\n\t\t},\n\t]}\n/>\n```\n\n## Buttons\n\nIf an item does not specify a `href` attribute a `button` element will be rendered. This enables you to reponds to various mouse events such as `onClick`.\n\n```jsx live\n<TaskList\n\titems={[\n\t\t{\n\t\t\tonClick: console.log,\n\t\t\tlabel: 'Check eligibility',\n\t\t\tstatus: 'done',\n\t\t},\n\t\t{\n\t\t\tonClick: console.log,\n\t\t\tlabel: 'Lorem ipsum dolor sit amet',\n\t\t\tstatus: 'done',\n\t\t},\n\t\t{\n\t\t\tonClick: console.log,\n\t\t\tlabel: 'Case Studies',\n\t\t\tstatus: 'doing',\n\t\t},\n\t\t{\n\t\t\tonClick: console.log,\n\t\t\tlabel: 'Review and submit',\n\t\t\tmessage: 'Not available until previous tasks are done',\n\t\t\tstatus: 'todo',\n\t\t},\n\t]}\n/>\n```\n","data":{"title":"Task list","description":"Task list is a navigation tool that show users what input is required to complete a task or transaction.","group":"Forms","storybookPath":"/story/forms-tasklist--unordered","figmaGalleryNodeId":"12444%3A100628"},"name":"task-list","version":"1.3.0","title":"Task list","description":"Task list is a navigation tool that show users what input is required to complete a task or transaction.","storybookPath":"/story/forms-tasklist--unordered","figmaGalleryNodeId":"12444%3A100628","subNavItems":[{"label":"Overview","href":"/components/task-list","path":"/home/runner/work/agds-next/agds-next/packages/react/src/task-list/docs/overview.mdx"},{"label":"Code","href":"/components/task-list/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/task-list/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"href":"/components/task-list","label":"Task list"},{"label":"Code"}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {ComponentPropsTable} = _components;\n  if (!ComponentPropsTable) _missingMdxReference(\"ComponentPropsTable\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Props\"\n    }), \"\\n\", _jsx(ComponentPropsTable, {\n      name: \"TaskList\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"toc":[{"id":"props","title":"Props","level":2,"slug":"props","items":[]}]},"__N_SSG":true}