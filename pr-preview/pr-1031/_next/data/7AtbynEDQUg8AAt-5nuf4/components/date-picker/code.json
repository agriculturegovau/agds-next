{"pageProps":{"pkg":{"slug":"date-picker","content":"\n<DoHeading />\n\n- allow year or date navigation\n- use date format dd/mm/yyyy\n- allow approximate date options\n- use autocomplete where it might help with input—for example, date of birth\n- ensure users can use Tab to select a date\n- Make sure error messages are specific about what input is required. For example, dd/mm/yyyy should always be displayed in hint text.\n\n<DontHeading />\n\n- use international date formats such as USA mm/dd/yyyy\n- use Date Select for historical dates such as birthdates – use Date Input\n- hijack built-in keyboard navigation behaviour.\n\n## Date picker\n\n`DatePicker` is a [controlled component](https://reactjs.org/docs/forms.html#controlled-components) which means consumers of this component need to manage the state of this component by using the `value`, `onChange` and `onInputChange` props.\n\nFor an example of using this component in a form built with `react-hook-form` and `yup`, please see the [Single-page form template](/templates/single-page-form).\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\treturn <DatePicker label=\"Select date\" value={value} onChange={setValue} />;\n};\n```\n\n### Tracking the input value\n\nThe `DatePicker` component has two methods of input:\n\n1. Typing in a date string (dd/mm/yyyy) via the text input\n2. Selecting a date via the calendar widget\n\nAs we do not have any sort of input masking due to accessibility concerns, there is a possibilty for the user to enter an invalid value via the text input. In some scenarios, it can be useful to know what the value of the text input is so the user can be informed of any invalid values.\n\nFor example, if the `DatePicker` component was placed inside of a form an optional field. If the user typed in an invalid value via the text input, the `onChange` event would never fire. This may lead the user to believe what they have typed is valid when actually their input will not be saved.\n\nTo fix this issue, you can use the `onInputChange` prop to keep track of the users input. The `value` prop can also be set to a string, which represents the value of the text input.\n\n```jsx live\n() => {\n\t// Set the value to a value that the user might think is valid\n\tconst [value, setValue] = React.useState('31/1o/2020');\n\n\t// This logic is for documentation purposes only. This should be done with `yup` or `zod`.\n\tconst invalid = React.useMemo(() => {\n\t\tif (typeof value === 'undefined' || value == '') return false;\n\t\tif (value instanceof Date && !isNaN(value.getTime())) return false;\n\t\treturn true;\n\t}, [value]);\n\n\treturn (\n\t\t<DatePicker\n\t\t\tlabel=\"Select date\"\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t\tonInputChange={setValue}\n\t\t\t{...(invalid && {\n\t\t\t\tinvalid: true,\n\t\t\t\tmessage: 'Enter a valid date',\n\t\t\t})}\n\t\t/>\n\t);\n};\n```\n\n### Hint\n\nUse the `hint` prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\n\nDon't use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\n\nDon't include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\treturn (\n\t\t<DatePicker\n\t\t\tlabel=\"Select date\"\n\t\t\thint=\"Hint text\"\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t/>\n\t);\n};\n```\n\n### Block\n\nUse the `block` prop to expand the component to fill the available space.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\treturn (\n\t\t<DatePicker label=\"Select date\" value={value} onChange={setValue} block />\n\t);\n};\n```\n\n### Invalid\n\nUse the `invalid` prop to indicate if the user input is invalid (does not validate according to the elements settings).\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\treturn (\n\t\t<DatePicker\n\t\t\tlabel=\"Invalid\"\n\t\t\tinvalid\n\t\t\tmessage=\"Enter a valid date\"\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t/>\n\t);\n};\n```\n\n### Disabled\n\nDisabled input elements are unusable and can not be clicked. This prevents a user from interacting with the input element until another action is complete.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\treturn (\n\t\t<DatePicker\n\t\t\tlabel=\"Select date\"\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t\tdisabled\n\t\t/>\n\t);\n};\n```\n\n### Minimum and maximum dates\n\nThe `minDate` property can be used to disable any days before a specific date.\n\nThe `maxDate` property can be used to disable any days after a specific date.\n\nIf a valid date is entered using the text input but it falls outside the constrained range, the closest valid date will be used.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\n\tconst today = new Date();\n\tconst lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n\tconst nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n\n\treturn (\n\t\t<DatePicker\n\t\t\tlabel=\"Select date\"\n\t\t\tminDate={lastWeek}\n\t\t\tmaxDate={nextWeek}\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t/>\n\t);\n};\n```\n\n### Custom year range\n\nThe `yearRange` prop can be used to change the range of options to display in calendar year select.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\tconst thisYear = new Date().getFullYear();\n\tconst yearRange = { from: thisYear - 2, to: thisYear + 2 };\n\treturn (\n\t\t<DatePicker\n\t\t\tlabel=\"Select date\"\n\t\t\tyearRange={yearRange}\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t/>\n\t);\n};\n```\n\n## Date range picker\n\n`DateRangePicker` is a [controlled component](https://reactjs.org/docs/forms.html#controlled-components) which means consumers of this component need to manage the state of this component by using the `value`, `onChange`, `onFromInputChange` and `onToInputChange` props.\n\nFor an example of using this component in a form built with `react-hook-form` and `yup`, please see the [Single-page form template](/templates/single-page-form).\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\n\treturn <DateRangePicker value={value} onChange={setValue} />;\n};\n```\n\n### Tracking the input value\n\nThe `DateRangePicker` component has two methods of input:\n\n1. Typing in a date string (dd/mm/yyyy) via the text input\n2. Selecting a date via the calendar widget\n\nAs we do not have any sort of input masking due to accessibility concerns, there is a possibilty for the user to enter an invalid value via the text input. In some scenarios, it can be useful to know what the value of the text input is so the user can be informed of any invalid values.\n\nFor example, if the `DateRangePicker` component was placed inside of a form an optional field. If the user typed in an invalid value via the text input, the `onChange` event would never fire. This may lead the user to believe what they have typed is valid when actually their input will not be saved.\n\nTo fix this issue, you can use the `onFromInputChange` and `onToInputChange` props to keep track of the users input. The `value.from` and `value.to` props can also be set to a string, which represents the value of the text input.\n\n```jsx live\n() => {\n\t// Set the value to a value that the user might think is valid\n\tconst [value, setValue] = React.useState({\n\t\tfrom: '30/1o/2020',\n\t\tto: '31/1o/2020',\n\t});\n\n\t// This logic is for documentation purposes only. This should be done with `yup` or `zod`.\n\tconst isInvalid = React.useCallback((value) => {\n\t\tif (typeof value === 'undefined' || value == '') return false;\n\t\tif (value instanceof Date && !isNaN(value.getTime())) return false;\n\t\treturn true;\n\t}, []);\n\n\tconst fromInvalid = isInvalid(value.from);\n\tconst toInvalid = isInvalid(value.from);\n\n\treturn (\n\t\t<DateRangePicker\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t\tonFromInputChange={(from) => setValue({ ...value, from })}\n\t\t\tonToInputChange={(to) => setValue({ ...value, to })}\n\t\t\tfromInvalid={fromInvalid}\n\t\t\ttoInvalid={toInvalid}\n\t\t\tmessage={fromInvalid || toInvalid ? 'Enter a valid date' : undefined}\n\t\t/>\n\t);\n};\n```\n\n### Legend\n\nUse the `legend` prop to describe the purpose of the group of fields.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\n\treturn (\n\t\t<DateRangePicker value={value} onChange={setValue} legend=\"Date period\" />\n\t);\n};\n```\n\n### Hint\n\nUse the `hint` prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\n\nDon't use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\n\nDon't include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\n\treturn (\n\t\t<DateRangePicker\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t\tlegend=\"Date period\"\n\t\t\thint=\"Example hint text\"\n\t\t/>\n\t);\n};\n```\n\n### Invalid\n\nUse the `fromInvalid` and `toInvalid` props to indicate if the user input is invalid (does not validate according to the elements settings).\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\n\treturn (\n\t\t<FormStack>\n\t\t\t<DateRangePicker\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={setValue}\n\t\t\t\tfromInvalid={true}\n\t\t\t\ttoInvalid={true}\n\t\t\t\tlegend=\"Date period\"\n\t\t\t\tmessage=\"Enter a valid date\"\n\t\t\t/>\n\t\t\t<DateRangePicker\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={setValue}\n\t\t\t\tfromInvalid={true}\n\t\t\t\ttoInvalid={false}\n\t\t\t\tlegend=\"Date period\"\n\t\t\t\tmessage=\"Enter a valid date\"\n\t\t\t/>\n\t\t\t<DateRangePicker\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={setValue}\n\t\t\t\tfromInvalid={false}\n\t\t\t\ttoInvalid={true}\n\t\t\t\tlegend=\"Date period\"\n\t\t\t\tmessage=\"Enter a valid date\"\n\t\t\t/>\n\t\t</FormStack>\n\t);\n};\n```\n\n### Custom labels\n\nUse the `fromLabel` and `toLabel` props to change the field labels.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\n\treturn (\n\t\t<DateRangePicker\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t\tfromLabel=\"From\"\n\t\t\ttoLabel=\"To\"\n\t\t/>\n\t);\n};\n```\n\n### Disabled\n\nDisabled input elements are unusable and can not be clicked. This prevents a user from interacting with the input element until another action is complete.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\n\treturn <DateRangePicker value={value} onChange={setValue} disabled />;\n};\n```\n\n### Minimum and maximum dates\n\nThe `minDate` property can be used to disable any days before a specific date.\n\nThe `maxDate` property can be used to disable any days after a specific date.\n\nIf a valid date is entered using the text input but it falls outside the constrained range, the closest valid date will be used.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\n\n\tconst today = new Date();\n\tconst lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n\tconst nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n\n\treturn (\n\t\t<DateRangePicker\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t\tminDate={lastWeek}\n\t\t\tmaxDate={nextWeek}\n\t\t/>\n\t);\n};\n```\n","data":{"title":"Date picker","description":"Date picker allows users to select a single date or range of dates. There are 3 types; date select range, simple date input and date select.","group":"forms","storybookPath":"/story/forms-datepicker-datepicker--basic","figmaGalleryNodeId":"12444%3A100327"},"name":"date-picker","version":"1.3.0","title":"Date picker","description":"Date picker allows users to select a single date or range of dates. There are 3 types; date select range, simple date input and date select.","storybookPath":"/story/forms-datepicker-datepicker--basic","figmaGalleryNodeId":"12444%3A100327","subNavItems":[{"label":"Overview","href":"/components/date-picker","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker/docs/overview.mdx"},{"label":"Code","href":"/components/date-picker/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"href":"/components/date-picker","label":"Date picker"},{"label":"Code"}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {ComponentPropsTable} = _components;\n  if (!ComponentPropsTable) _missingMdxReference(\"ComponentPropsTable\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Props\"\n    }), \"\\n\", _jsx(ComponentPropsTable, {\n      name: \"DatePicker\"\n    }), \"\\n\", _jsx(ComponentPropsTable, {\n      name: \"DateRangePicker\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"toc":[{"id":"props","title":"Props","level":2,"slug":"props","items":[]}]},"__N_SSG":true}