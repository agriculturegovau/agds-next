{"pageProps":{"pkg":{"slug":"field","content":"\n## Default\n\nThe field component connects the label, description and message to the input element.\n\n```jsx live\n<Field label=\"Name\">{(a11yProps) => <input {...a11yProps} />}</Field>\n```\n\n## Label\n\nEach field must be accompanied by a label. Effective form labeling helps users understand what information to enter into the input.\n\n```jsx live\n<Field label=\"Name\">{(a11yProps) => <input {...a11yProps} />}</Field>\n```\n\n## Hint\n\nUse the `hint` prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\n\nDon't use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\n\nDon't include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\n\n```jsx live\n<Field label=\"Email\" hint=\"We will only use this to respond to your question\">\n\t{(a11yProps) => <input type=\"email\" {...a11yProps} />}\n</Field>\n```\n\n## Invalid\n\nError messages are used to notify the user when a form field has not passed validation. Use clear messages to explain what went wrong and how to fix it.\n\n```jsx live\n<Field\n\tlabel=\"Email\"\n\tinvalid\n\tmessage=\"Enter an email address in the correct format, like name@example.com\"\n>\n\t{(a11yProps) => <input type=\"email\" {...a11yProps} />}\n</Field>\n```\n\n## Required\n\nThe `required` prop can be used to indicate that user input is required on the field before a form can be submitted.\n\nUsing the `required` prop, this component will automatically append \"(optional)\" to the label as well as using [aria-required](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required) to indicate to screen reader user that the field is required.\n\n### Hide optional label\n\nThe `hideOptionalLabel` prop can be used in situations where you want to indiciate to screen reader users that a field is optional but don't want to show the \"(optional)\" label.\n\nThe usage of `hideOptionalLabel` should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\n\n```jsx live\n<Stack gap={1}>\n\t<Field label=\"Required\" required={true}>\n\t\t{(a11yProps) => <input {...a11yProps} />}\n\t</Field>\n\t<Field label=\"Optional\" required={false}>\n\t\t{(a11yProps) => <input {...a11yProps} />}\n\t</Field>\n\t<Field\n\t\tlabel=\"Optional with hideOptionalLabel\"\n\t\trequired={false}\n\t\thideOptionalLabel={true}\n\t>\n\t\t{(a11yProps) => <input {...a11yProps} />}\n\t</Field>\n</Stack>\n```\n\n## Hooks\n\n## `useScrollToField`\n\nBy default, the browser will scroll the target into view. Because our labels or legends appear above the input, this means the user will be presented with an input without any context, as the label or legend will be off the top of the screen. Manually handling the click event, scrolling the question into view and then focussing the element solves this.\n\nPlease refer to the [example site single-page form example](https://design-system.agriculture.gov.au/example-site/single-page-form) to see an example of this hook in use.\n\n```jsx\nfunction ExampleForm() {\n\tconst scrollToField = useScrollToField();\n\treturn (\n\t\t<ul>\n\t\t\t{Object.entries(errors).map(([id, errorMessage]) => (\n\t\t\t\t<li key={id}>\n\t\t\t\t\t<a href={`#${id}`} onClick={scrollToField}>\n\t\t\t\t\t\t{errorMessage}\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t);\n}\n```\n","data":{"title":"Field","description":"The field package exposes the elements around form inputs, and an API to compose them.","group":"Forms","storybookPath":"/story/forms-field--basic"},"name":"field","version":"1.3.0","title":"Field","description":"The field package exposes the elements around form inputs, and an API to compose them.","storybookPath":"/story/forms-field--basic","figmaGalleryNodeId":null,"subNavItems":[{"label":"Overview","href":"/components/field","path":"/home/runner/work/agds-next/agds-next/packages/react/src/field/docs/overview.mdx"},{"label":"Code","href":"/components/field/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/field/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Field"}],"toc":[{"id":"default","title":"Default","level":2,"slug":"default","items":[]},{"id":"label","title":"Label","level":2,"slug":"label","items":[]},{"id":"hint","title":"Hint","level":2,"slug":"hint","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"required","title":"Required","level":2,"slug":"required","items":[{"id":"hide-optional-label","title":"Hide optional label","level":3,"slug":"hide-optional-label","items":[]}]},{"id":"hooks","title":"Hooks","level":2,"slug":"hooks","items":[]},{"id":"usescrolltofield","title":"`useScrollToField`","level":2,"slug":"usescrolltofield","items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Default\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The field component connects the label, description and message to the input element.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field label=\\\"Name\\\">{(a11yProps) => <input {...a11yProps} />}</Field>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each field must be accompanied by a label. Effective form labeling helps users understand what information to enter into the input.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field label=\\\"Name\\\">{(a11yProps) => <input {...a11yProps} />}</Field>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hint\"\n      }), \" prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don't use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don't include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field label=\\\"Email\\\" hint=\\\"We will only use this to respond to your question\\\">\\n\\t{(a11yProps) => <input type=\\\"email\\\" {...a11yProps} />}\\n</Field>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Error messages are used to notify the user when a form field has not passed validation. Use clear messages to explain what went wrong and how to fix it.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field\\n\\tlabel=\\\"Email\\\"\\n\\tinvalid\\n\\tmessage=\\\"Enter an email address in the correct format, like name@example.com\\\"\\n>\\n\\t{(a11yProps) => <input type=\\\"email\\\" {...a11yProps} />}\\n</Field>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop, this component will automatically append \\\"(optional)\\\" to the label as well as using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen reader user that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indiciate to screen reader users that a field is optional but don't want to show the \\\"(optional)\\\" label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<Field label=\\\"Required\\\" required={true}>\\n\\t\\t{(a11yProps) => <input {...a11yProps} />}\\n\\t</Field>\\n\\t<Field label=\\\"Optional\\\" required={false}>\\n\\t\\t{(a11yProps) => <input {...a11yProps} />}\\n\\t</Field>\\n\\t<Field\\n\\t\\tlabel=\\\"Optional with hideOptionalLabel\\\"\\n\\t\\trequired={false}\\n\\t\\thideOptionalLabel={true}\\n\\t>\\n\\t\\t{(a11yProps) => <input {...a11yProps} />}\\n\\t</Field>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hooks\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.code, {\n        children: \"useScrollToField\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, the browser will scroll the target into view. Because our labels or legends appear above the input, this means the user will be presented with an input without any context, as the label or legend will be off the top of the screen. Manually handling the click event, scrolling the question into view and then focussing the element solves this.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Please refer to the \", _jsx(_components.a, {\n        href: \"https://design-system.agriculture.gov.au/example-site/single-page-form\",\n        children: \"example site single-page form example\"\n      }), \" to see an example of this hook in use.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"function ExampleForm() {\\n\\tconst scrollToField = useScrollToField();\\n\\treturn (\\n\\t\\t<ul>\\n\\t\\t\\t{Object.entries(errors).map(([id, errorMessage]) => (\\n\\t\\t\\t\\t<li key={id}>\\n\\t\\t\\t\\t\\t<a href={`#${id}`} onClick={scrollToField}>\\n\\t\\t\\t\\t\\t\\t{errorMessage}\\n\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t))}\\n\\t\\t</ul>\\n\\t);\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Field","description":"The field package exposes the elements around form inputs, and an API to compose them.","group":"Forms","storybookPath":"/story/forms-field--basic"}}},"__N_SSG":true}