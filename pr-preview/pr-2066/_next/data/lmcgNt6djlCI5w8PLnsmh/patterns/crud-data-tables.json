{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Create, read, update and delete data in tables"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/ask-users-for-dates-and-times","label":"Ask users for dates and times"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed form content"},{"href":"/patterns/crud-data-tables","label":"Create, read, update and delete data in tables"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-an-option-from-a-list","label":"Selecting an option from a list"},{"href":"/patterns/selecting-multiple-options-from-a-list","label":"Selecting multiple options from a list"},{"href":"/patterns/yourgov-example-application","label":"yourGov example application"}],"pattern":{"slug":"crud-data-tables","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {ImageWithBorder} = _components;\n  if (!ImageWithBorder) _missingMdxReference(\"ImageWithBorder\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Overview\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use CRUD table interactions to help users to Create, Read, Update or Delete (CRUD) data presented in tables. These common interactions can be achieved by providing an additional drawer or subpage surface for the action, to reduce the length and complexity of the form page and to provide the user content that is relevant to the interaction through progressive disclosure.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Create a record in a data table\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When creating a record to a data table is the primary action of the page, provide a primary button immediately before the table so it is above the table in the reading order and page hierarchy.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When adding a record to a data table is a secondary or supplementary action of the page, provide a small secondary action immediately after the table.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before any records have been added to a data table, provide an empty state to inform users there are no available records.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1.5}>\\n\\t\\t<H1>\\n\\t\\t\\t<Text\\n\\t\\t\\t\\tcolor=\\\"muted\\\"\\n\\t\\t\\t\\tdisplay=\\\"block\\\"\\n\\t\\t\\t\\tfontSize=\\\"sm\\\"\\n\\t\\t\\t\\tfontWeight=\\\"bold\\\"\\n\\t\\t\\t\\tlineHeight=\\\"heading\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\tForm title\\n\\t\\t\\t</Text>\\n\\t\\t\\tCreate a record in this data table\\n\\t\\t</H1>\\n\\t\\t<Text as=\\\"p\\\" color=\\\"muted\\\" fontSize=\\\"md\\\">\\n\\t\\t\\tAdd other equipment\\n\\t\\t</Text>\\n\\t</Stack>\\n\\t<Stack gap={2} alignItems=\\\"flex-start\\\">\\n\\t\\t<H2>Table of persistent data records</H2>\\n\\t\\t<Stack gap={1}>\\n\\t\\t\\t<InfoIcon size=\\\"lg\\\" />\\n\\t\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\t\\tNo records added\\n\\t\\t\\t</Heading>\\n\\t\\t\\t<Text>You must add an equipment to proceed.</Text>\\n\\t\\t</Stack>\\n\\t\\t<ButtonGroup>\\n\\t\\t\\t<Button variant=\\\"secondary\\\" size=\\\"sm\\\" iconBefore={PlusIcon}>\\n\\t\\t\\t\\tAdd record\\n\\t\\t\\t</Button>\\n\\t\\t</ButtonGroup>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In most situations, use a side drawer or side page containing all of the form inputs and controls necessary to add a new record. Use \", _jsx(_components.a, {\n        href: \"/components/drawer\",\n        children: \"drawer\"\n      }), \" when the form is small or side pages for longer forms that a user will need to scroll.\"]\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      alt: \"Screenshot of an open side drawer with the title ‘Add record’ and an empty state short form with text input, radio buttons, a select component and form buttons: ‘Add record’ and ‘Cancel’.\",\n      src: \"/img/patterns/crud-tables-create-record.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once the form used for adding a record to the table has been submitted, return the user to the table page and display the new record as a row in the table. Show a \", _jsx(_components.a, {\n        href: \"/components/section-alert\",\n        children: \"section alert\"\n      }), \" immediately above the table to show success. Focus the section alert so the change is announced to screen reader users.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The add record to table pattern is repeatable and scalable.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1.5}>\\n\\t\\t<H1>\\n\\t\\t\\t<Text\\n\\t\\t\\t\\tcolor=\\\"muted\\\"\\n\\t\\t\\t\\tdisplay=\\\"block\\\"\\n\\t\\t\\t\\tfontSize=\\\"sm\\\"\\n\\t\\t\\t\\tfontWeight=\\\"bold\\\"\\n\\t\\t\\t\\tlineHeight=\\\"heading\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\tForm title\\n\\t\\t\\t</Text>\\n\\t\\t\\tCreate a record in this data table\\n\\t\\t</H1>\\n\\t\\t<Text as=\\\"p\\\" color=\\\"muted\\\" fontSize=\\\"md\\\">\\n\\t\\t\\tIntroductory paragraph.\\n\\t\\t</Text>\\n\\t</Stack>\\n\\t<SectionAlert\\n\\t\\tonClose={console.log}\\n\\t\\ttitle=\\\"ABC123456 was added to records\\\"\\n\\t\\ttone=\\\"successHigh\\\"\\n\\t/>\\n\\t<Stack gap={2}>\\n\\t\\t<H2>Table of persistent data records</H2>\\n\\t\\t<TableWrapper>\\n\\t\\t\\t<Table>\\n\\t\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Record name</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Record type</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Location</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Actions</TableHeader>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t<TableCell as=\\\"th\\\" fontWeight=\\\"bold\\\" scope=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\" id=\\\"ABC123456\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\tABC123456\\n\\t\\t\\t\\t\\t\\t\\t</TextLink>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>Type 1</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>123 Address, State</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<Flex gap={1}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TextLink aria-describedby=\\\"ABC123456\\\" href=\\\"#\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tEdit\\n\\t\\t\\t\\t\\t\\t\\t\\t</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TextLink aria-describedby=\\\"ABC123456\\\" href=\\\"#\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tDelete\\n\\t\\t\\t\\t\\t\\t\\t\\t</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t</Flex>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t</Table>\\n\\t\\t</TableWrapper>\\n\\t\\t<ButtonGroup>\\n\\t\\t\\t<Button variant=\\\"secondary\\\" size=\\\"sm\\\" iconBefore={PlusIcon}>\\n\\t\\t\\t\\tAdd record\\n\\t\\t\\t</Button>\\n\\t\\t</ButtonGroup>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Read a record in a data table\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Provide a link in the first column of the table so users can open and read a record. The record number or other unique identifier should be made bold and used for the link label.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Provide a side drawer or side page to provide the record information. Use side drawers for small records or side pages for longer records that a user will need to scroll.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After a user has read the record, return them to the table page.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Reading a record in a table is repeatable and scalable pattern.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Update a record in a data table\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Provide an ‘Edit’ link or button in the last column of the table so users can open and update or edit existing records. If more than two actions can be performed on a record, put them within an ‘Actions’ \", _jsx(_components.a, {\n        href: \"/components/dropdown-menu\",\n        children: \"dropdown menu\"\n      }), \" instead.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a user activates the ‘Edit’ action, open a side drawer or side page containing all of the pre-filled form inputs and controls necessary to edit the record. We do not endorse editing content in-place within tables, as form inputs within table cells compromise accessibility and are difficult for some users.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After the record is edited in the side page or drawer, return the user to the table page with the updated record showing in table, and provide a section alert immediately above the table to show success. Focus the section alert so the change is announced to screen reader users.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The update or edit pattern is repeatable and scalable.\"\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      alt: \"Screenshot of an open side drawer with the title ‘Add record’ and a populated short form with text input, radio buttons, a select component and form buttons: ‘Add record’ and ‘Cancel’.\",\n      src: \"/img/patterns/crud-tables-edit-record.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Delete a record from a data table\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Provide a ’Delete’ button in the last column of the table so users can delete existing records. Delete can be included in a dropdown menu of actions in the last column if there more than two actions are available.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the table supports batch actions, more than one record can be deleted at the same time.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before any record is deleted provide, a destructive action \", _jsx(_components.a, {\n        href: \"/components/modal\",\n        children: \"modal\"\n      }), \" to make sure a user purposely intends to remove the record.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After the record is deleted, remove the record from the table, and provide a section alert immediately above the table to show success. Focus the section alert so the change is announced to screen reader users.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The delete pattern is repeatable and scalable.\"\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      alt: \"Screenshot of an open Modal dialog with the title ‘Are you sure you want to delete this record?’ and description ‘It will be deleted immediately. You can't undo this action.’\",\n      src: \"/img/patterns/crud-tables-delete-record.png\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Upload an unspecified list of files to a table\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use a repeatable file upload pattern when uploading an unspecified list of files of different categories or when specific metadata for each file is required. Metadata can be associated with uploaded files when using this pattern to support back stage processing.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The upload unspecified list of files pattern reduces the amount of form content on the parent page making it easier for users to complete the form, and keeps the user’s context and focus when providing all required metadata in the side drawer or subpage.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before any files are uploaded, provide an empty state. Use a standard empty state rather than an empty table because the experience of the empty state is simpler for many users. Screen reader users will not need to navigate through a table to find out it is empty.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1.5}>\\n\\t\\t<H1>Upload unspecified list of files to data table (repeatable)</H1>\\n\\t</Stack>\\n\\t<Stack gap={2} alignItems=\\\"flex-start\\\">\\n\\t\\t<H2>List of equipment</H2>\\n\\t\\t<Stack gap={1}>\\n\\t\\t\\t<InfoIcon size=\\\"lg\\\" />\\n\\t\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\t\\tNo equipment added\\n\\t\\t\\t</Heading>\\n\\t\\t\\t<Text>You must add an equipment to proceed.</Text>\\n\\t\\t</Stack>\\n\\t\\t<ButtonGroup>\\n\\t\\t\\t<Button variant=\\\"secondary\\\" size=\\\"sm\\\" iconBefore={PlusIcon}>\\n\\t\\t\\t\\tUpload file\\n\\t\\t\\t</Button>\\n\\t\\t</ButtonGroup>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Side page or drawer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This pattern will direct the user to a subpage or side drawer to compete each upload task. The choice of subpage or drawer will be determined by the amount of content, inputs and controls required. We do not encourage side drawers that scroll, so use side pages for longer or more complex upload form pages. Try to choose one option, either side drawer or side page, that can be implemented consistently across the multi-page form or service it is used in.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Metadata for each uploaded file can be provided in a side drawer or side page containing the required inputs and controls. This pattern reduces the amount of form content on the parent page making it easier for users to complete the form. It keeps the user’s context and focus when providing all required metadata in the side drawer or side page.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"File categorisation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The use of a subpage or drawer enables you to insert questions and fields specific to each file upload to define the record category or type, and provide any additional information required about an upload. Radio groups or selects can be used to help the user determine which category should be applied to an uploaded file.\"\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      alt: \"Screenshot of an open side drawer with the title ‘Upload file’ and an empty state short form with text input, radio buttons, text input, a select, file upload and form buttons: ‘Upload file’ and ‘Cancel’.\",\n      src: \"/img/patterns/crud-tables-upload-unspecified-list.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation and focus\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a file is added in a subpage or drawer, return the user to the parent page and set their focus on a section alert to inform them if the upload was successful or an error has occurred.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The uploaded file should also be visible in a table or list on the parent page. Provide an edit or delete action in the table row or list to enable files to be changed.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1.5}>\\n\\t\\t<H1>Upload unspecified list of files to table (repeatable)</H1>\\n\\t</Stack>\\n\\t<SectionAlert\\n\\t\\tonClose={console.log}\\n\\t\\ttitle=\\\"FileName1.png was uploaded\\\"\\n\\t\\ttone=\\\"successHigh\\\"\\n\\t/>\\n\\t<Stack gap={2}>\\n\\t\\t<H2>List of equipment</H2>\\n\\t\\t<TableWrapper>\\n\\t\\t\\t<Table>\\n\\t\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Item</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Qty</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Files</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Actions</TableHeader>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t<TableCell>Type 1</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>1</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell as=\\\"th\\\" scope=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\tFileName1.png\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<TextLink aria-describedby=\\\"FileName1.png\\\" href=\\\"#\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\tRemove\\n\\t\\t\\t\\t\\t\\t\\t</TextLink>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t</Table>\\n\\t\\t</TableWrapper>\\n\\t\\t<ButtonGroup>\\n\\t\\t\\t<Button variant=\\\"secondary\\\" size=\\\"sm\\\" iconBefore={PlusIcon}>\\n\\t\\t\\t\\tUpload file\\n\\t\\t\\t</Button>\\n\\t\\t</ButtonGroup>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a required file is not uploaded before the page is submitted, show an error in the row where the file is missing and provide a section alert above the table to assist with error correction.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Upload a defined list of files to a data table\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A specific or defined list of files can be uploaded several ways. The number of items in the list and number of files for each list item will determine the appropriate pattern to use.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The upload defined list of files pattern reduces the amount of form content on the parent page, making it easier for users to complete the form and keeps the user’s context and focus when providing all required metadata in the side drawer or subpage.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before any files are uploaded, provide an empty state. Use a standard empty state rather than an empty table because the experience of the empty state is simpler for many users. Screen reader users will not need to navigate through a table to find out it is empty.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1.5}>\\n\\t\\t<H1>Upload defined list of files to data table</H1>\\n\\t</Stack>\\n\\t<Stack gap={2} alignItems=\\\"flex-start\\\">\\n\\t\\t<H2>List of equipment</H2>\\n\\t\\t<Stack gap={1}>\\n\\t\\t\\t<InfoIcon size=\\\"lg\\\" />\\n\\t\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\t\\tNo equipment added\\n\\t\\t\\t</Heading>\\n\\t\\t\\t<Text>You must add an equipment to proceed.</Text>\\n\\t\\t</Stack>\\n\\t\\t<ButtonGroup>\\n\\t\\t\\t<Button variant=\\\"secondary\\\" size=\\\"sm\\\" iconBefore={PlusIcon}>\\n\\t\\t\\t\\tUpload file\\n\\t\\t\\t</Button>\\n\\t\\t</ButtonGroup>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Large lists\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When large, defined lists of files in tables are required, a drawer or subpage for each upload action should be used. The \", _jsx(_components.a, {\n        href: \"/components/file-upload\",\n        children: \"file upload\"\n      }), \" component can be used in the side drawer or subpage to allow multiple files for each required category to be upload and added to a table.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"File categorisation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The use of a subpage or drawer enables you to insert questions and fields specific to each file upload to define the record category or type, and provide any metadata related to an upload. Radio groups or selects can be used to help the user determine which category should be applied to an uploaded file.\"\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      alt: \"Screenshot of an open side drawer with the title ‘Add record’ and an empty state short form with a select, file upload and form buttons: ‘Add record’ and ‘Cancel’.\",\n      src: \"/img/patterns/crud-tables-upload-defined-list.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation and focus\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a file is added in a subpage or drawer, return the user to the parent page and set their focus on a section alert to inform them if the upload was successful or an error has occurred.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The uploaded file should be visible in a table or list on the parent page. Provide an edit or remove action in the table row or list to enable the files to be changed.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1.5}>\\n\\t\\t<H1>Upload defined list of files to table</H1>\\n\\t</Stack>\\n\\t<SectionAlert\\n\\t\\tonClose={console.log}\\n\\t\\ttitle=\\\"FileName1.png was uploaded\\\"\\n\\t\\ttone=\\\"successHigh\\\"\\n\\t/>\\n\\t<Stack gap={2}>\\n\\t\\t<H2>List of files</H2>\\n\\t\\t<TableWrapper>\\n\\t\\t\\t<Table>\\n\\t\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Document type</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">File</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Size</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Action</TableHeader>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t{[...Array(4).keys()].map((idx) => {\\n\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow key={idx}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>Required file category {idx + 1}</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Box width=\\\"2rem\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Box width=\\\"2rem\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Button iconBefore={UploadIcon} variant=\\\"text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUpload\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t</Table>\\n\\t\\t</TableWrapper>\\n\\t\\t<ButtonGroup>\\n\\t\\t\\t<Button iconBefore={PlusIcon} size=\\\"sm\\\" variant=\\\"secondary\\\">\\n\\t\\t\\t\\tUpload file\\n\\t\\t\\t</Button>\\n\\t\\t</ButtonGroup>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a required file is not uploaded before the page is submitted, show an error in the row where the file is missing and provide a section alert above the table to assist with error correction.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1.5}>\\n\\t\\t<H1>Upload defined list of files to table</H1>\\n\\t</Stack>\\n\\t<SectionAlert\\n\\t\\tonClose={console.log}\\n\\t\\ttitle=\\\"You must provide all documents in the table below\\\"\\n\\t\\ttone=\\\"errorHigh\\\"\\n\\t>\\n\\t\\t<UnorderedList>\\n\\t\\t\\t<ListItem>Required file category 1 is required</ListItem>\\n\\t\\t\\t<ListItem>Required file category 2 is required</ListItem>\\n\\t\\t\\t<ListItem>Required file category 3 is required</ListItem>\\n\\t\\t</UnorderedList>\\n\\t</SectionAlert>\\n\\t<Stack gap={2}>\\n\\t\\t<H2>List of files</H2>\\n\\t\\t<TableWrapper>\\n\\t\\t\\t<Table>\\n\\t\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Document type</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">File</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Size</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Action</TableHeader>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t{[...Array(3).keys()].map((idx) => {\\n\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow invalid={true} key={idx}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>Required file category {idx + 1}</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Box width=\\\"5rem\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Flex alignItems=\\\"center\\\" gap={0.5}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<AlertFilledIcon color=\\\"error\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Text>File missing</Text>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</Flex>\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Button iconBefore={UploadIcon} variant=\\\"text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUpload\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t</Table>\\n\\t\\t</TableWrapper>\\n\\t\\t<ButtonGroup>\\n\\t\\t\\t<Button iconBefore={PlusIcon} size=\\\"sm\\\" variant=\\\"secondary\\\">\\n\\t\\t\\t\\tUpload file\\n\\t\\t\\t</Button>\\n\\t\\t</ButtonGroup>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Create, read, update and delete data in tables","description":"Applications that require persistent data storage commonly require table layouts to present stored data. Here are some patterns that enable users to create, read, update and delete persistent data in tables.","relatedComponents":["button","file-input","file-upload","section-alert","table"]}},"content":"\n## Overview\n\nUse CRUD table interactions to help users to Create, Read, Update or Delete (CRUD) data presented in tables. These common interactions can be achieved by providing an additional drawer or subpage surface for the action, to reduce the length and complexity of the form page and to provide the user content that is relevant to the interaction through progressive disclosure.\n\n### Create a record in a data table\n\nWhen creating a record to a data table is the primary action of the page, provide a primary button immediately before the table so it is above the table in the reading order and page hierarchy.\n\nWhen adding a record to a data table is a secondary or supplementary action of the page, provide a small secondary action immediately after the table.\n\nBefore any records have been added to a data table, provide an empty state to inform users there are no available records.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1.5}>\n\t\t<H1>\n\t\t\t<Text\n\t\t\t\tcolor=\"muted\"\n\t\t\t\tdisplay=\"block\"\n\t\t\t\tfontSize=\"sm\"\n\t\t\t\tfontWeight=\"bold\"\n\t\t\t\tlineHeight=\"heading\"\n\t\t\t>\n\t\t\t\tForm title\n\t\t\t</Text>\n\t\t\tCreate a record in this data table\n\t\t</H1>\n\t\t<Text as=\"p\" color=\"muted\" fontSize=\"md\">\n\t\t\tAdd other equipment\n\t\t</Text>\n\t</Stack>\n\t<Stack gap={2} alignItems=\"flex-start\">\n\t\t<H2>Table of persistent data records</H2>\n\t\t<Stack gap={1}>\n\t\t\t<InfoIcon size=\"lg\" />\n\t\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\t\tNo records added\n\t\t\t</Heading>\n\t\t\t<Text>You must add an equipment to proceed.</Text>\n\t\t</Stack>\n\t\t<ButtonGroup>\n\t\t\t<Button variant=\"secondary\" size=\"sm\" iconBefore={PlusIcon}>\n\t\t\t\tAdd record\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t</Stack>\n</Stack>\n```\n\nIn most situations, use a side drawer or side page containing all of the form inputs and controls necessary to add a new record. Use [drawer](/components/drawer) when the form is small or side pages for longer forms that a user will need to scroll.\n\n<ImageWithBorder\n\talt=\"Screenshot of an open side drawer with the title ‘Add record’ and an empty state short form with text input, radio buttons, a select component and form buttons: ‘Add record’ and ‘Cancel’.\"\n\tsrc=\"/img/patterns/crud-tables-create-record.png\"\n/>\n\nOnce the form used for adding a record to the table has been submitted, return the user to the table page and display the new record as a row in the table. Show a [section alert](/components/section-alert) immediately above the table to show success. Focus the section alert so the change is announced to screen reader users.\n\nThe add record to table pattern is repeatable and scalable.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1.5}>\n\t\t<H1>\n\t\t\t<Text\n\t\t\t\tcolor=\"muted\"\n\t\t\t\tdisplay=\"block\"\n\t\t\t\tfontSize=\"sm\"\n\t\t\t\tfontWeight=\"bold\"\n\t\t\t\tlineHeight=\"heading\"\n\t\t\t>\n\t\t\t\tForm title\n\t\t\t</Text>\n\t\t\tCreate a record in this data table\n\t\t</H1>\n\t\t<Text as=\"p\" color=\"muted\" fontSize=\"md\">\n\t\t\tIntroductory paragraph.\n\t\t</Text>\n\t</Stack>\n\t<SectionAlert\n\t\tonClose={console.log}\n\t\ttitle=\"ABC123456 was added to records\"\n\t\ttone=\"successHigh\"\n\t/>\n\t<Stack gap={2}>\n\t\t<H2>Table of persistent data records</H2>\n\t\t<TableWrapper>\n\t\t\t<Table>\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Record name</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Record type</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Location</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Actions</TableHeader>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\t\t\t\t<TableBody>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableCell as=\"th\" fontWeight=\"bold\" scope=\"row\">\n\t\t\t\t\t\t\t<TextLink href=\"#\" id=\"ABC123456\">\n\t\t\t\t\t\t\t\tABC123456\n\t\t\t\t\t\t\t</TextLink>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>Type 1</TableCell>\n\t\t\t\t\t\t<TableCell>123 Address, State</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<Flex gap={1}>\n\t\t\t\t\t\t\t\t<TextLink aria-describedby=\"ABC123456\" href=\"#\">\n\t\t\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t\t\t</TextLink>\n\t\t\t\t\t\t\t\t<TextLink aria-describedby=\"ABC123456\" href=\"#\">\n\t\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t\t</TextLink>\n\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t</TableWrapper>\n\t\t<ButtonGroup>\n\t\t\t<Button variant=\"secondary\" size=\"sm\" iconBefore={PlusIcon}>\n\t\t\t\tAdd record\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t</Stack>\n</Stack>\n```\n\n### Read a record in a data table\n\nProvide a link in the first column of the table so users can open and read a record. The record number or other unique identifier should be made bold and used for the link label.\n\nProvide a side drawer or side page to provide the record information. Use side drawers for small records or side pages for longer records that a user will need to scroll.\n\nAfter a user has read the record, return them to the table page.\n\nReading a record in a table is repeatable and scalable pattern.\n\n### Update a record in a data table\n\nProvide an ‘Edit’ link or button in the last column of the table so users can open and update or edit existing records. If more than two actions can be performed on a record, put them within an ‘Actions’ [dropdown menu](/components/dropdown-menu) instead.\n\nWhen a user activates the ‘Edit’ action, open a side drawer or side page containing all of the pre-filled form inputs and controls necessary to edit the record. We do not endorse editing content in-place within tables, as form inputs within table cells compromise accessibility and are difficult for some users.\n\nAfter the record is edited in the side page or drawer, return the user to the table page with the updated record showing in table, and provide a section alert immediately above the table to show success. Focus the section alert so the change is announced to screen reader users.\n\nThe update or edit pattern is repeatable and scalable.\n\n<ImageWithBorder\n\talt=\"Screenshot of an open side drawer with the title ‘Add record’ and a populated short form with text input, radio buttons, a select component and form buttons: ‘Add record’ and ‘Cancel’.\"\n\tsrc=\"/img/patterns/crud-tables-edit-record.png\"\n/>\n\n### Delete a record from a data table\n\nProvide a ’Delete’ button in the last column of the table so users can delete existing records. Delete can be included in a dropdown menu of actions in the last column if there more than two actions are available.\n\nIf the table supports batch actions, more than one record can be deleted at the same time.\n\nBefore any record is deleted provide, a destructive action [modal](/components/modal) to make sure a user purposely intends to remove the record.\n\nAfter the record is deleted, remove the record from the table, and provide a section alert immediately above the table to show success. Focus the section alert so the change is announced to screen reader users.\n\nThe delete pattern is repeatable and scalable.\n\n<ImageWithBorder\n\talt=\"Screenshot of an open Modal dialog with the title ‘Are you sure you want to delete this record?’ and description ‘It will be deleted immediately. You can't undo this action.’\"\n\tsrc=\"/img/patterns/crud-tables-delete-record.png\"\n/>\n\n## Upload an unspecified list of files to a table\n\nUse a repeatable file upload pattern when uploading an unspecified list of files of different categories or when specific metadata for each file is required. Metadata can be associated with uploaded files when using this pattern to support back stage processing.\n\nThe upload unspecified list of files pattern reduces the amount of form content on the parent page making it easier for users to complete the form, and keeps the user’s context and focus when providing all required metadata in the side drawer or subpage.\n\n### Empty state\n\nBefore any files are uploaded, provide an empty state. Use a standard empty state rather than an empty table because the experience of the empty state is simpler for many users. Screen reader users will not need to navigate through a table to find out it is empty.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1.5}>\n\t\t<H1>Upload unspecified list of files to data table (repeatable)</H1>\n\t</Stack>\n\t<Stack gap={2} alignItems=\"flex-start\">\n\t\t<H2>List of equipment</H2>\n\t\t<Stack gap={1}>\n\t\t\t<InfoIcon size=\"lg\" />\n\t\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\t\tNo equipment added\n\t\t\t</Heading>\n\t\t\t<Text>You must add an equipment to proceed.</Text>\n\t\t</Stack>\n\t\t<ButtonGroup>\n\t\t\t<Button variant=\"secondary\" size=\"sm\" iconBefore={PlusIcon}>\n\t\t\t\tUpload file\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t</Stack>\n</Stack>\n```\n\n### Side page or drawer\n\nThis pattern will direct the user to a subpage or side drawer to compete each upload task. The choice of subpage or drawer will be determined by the amount of content, inputs and controls required. We do not encourage side drawers that scroll, so use side pages for longer or more complex upload form pages. Try to choose one option, either side drawer or side page, that can be implemented consistently across the multi-page form or service it is used in.\n\nMetadata for each uploaded file can be provided in a side drawer or side page containing the required inputs and controls. This pattern reduces the amount of form content on the parent page making it easier for users to complete the form. It keeps the user’s context and focus when providing all required metadata in the side drawer or side page.\n\n### File categorisation\n\nThe use of a subpage or drawer enables you to insert questions and fields specific to each file upload to define the record category or type, and provide any additional information required about an upload. Radio groups or selects can be used to help the user determine which category should be applied to an uploaded file.\n\n<ImageWithBorder\n\talt=\"Screenshot of an open side drawer with the title ‘Upload file’ and an empty state short form with text input, radio buttons, text input, a select, file upload and form buttons: ‘Upload file’ and ‘Cancel’.\"\n\tsrc=\"/img/patterns/crud-tables-upload-unspecified-list.png\"\n/>\n\n### Validation and focus\n\nWhen a file is added in a subpage or drawer, return the user to the parent page and set their focus on a section alert to inform them if the upload was successful or an error has occurred.\n\nThe uploaded file should also be visible in a table or list on the parent page. Provide an edit or delete action in the table row or list to enable files to be changed.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1.5}>\n\t\t<H1>Upload unspecified list of files to table (repeatable)</H1>\n\t</Stack>\n\t<SectionAlert\n\t\tonClose={console.log}\n\t\ttitle=\"FileName1.png was uploaded\"\n\t\ttone=\"successHigh\"\n\t/>\n\t<Stack gap={2}>\n\t\t<H2>List of equipment</H2>\n\t\t<TableWrapper>\n\t\t\t<Table>\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Item</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Qty</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Files</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Actions</TableHeader>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\t\t\t\t<TableBody>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableCell>Type 1</TableCell>\n\t\t\t\t\t\t<TableCell>1</TableCell>\n\t\t\t\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\t\t\t\tFileName1.png\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<TextLink aria-describedby=\"FileName1.png\" href=\"#\">\n\t\t\t\t\t\t\t\tRemove\n\t\t\t\t\t\t\t</TextLink>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t</TableWrapper>\n\t\t<ButtonGroup>\n\t\t\t<Button variant=\"secondary\" size=\"sm\" iconBefore={PlusIcon}>\n\t\t\t\tUpload file\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t</Stack>\n</Stack>\n```\n\nIf a required file is not uploaded before the page is submitted, show an error in the row where the file is missing and provide a section alert above the table to assist with error correction.\n\n## Upload a defined list of files to a data table\n\nA specific or defined list of files can be uploaded several ways. The number of items in the list and number of files for each list item will determine the appropriate pattern to use.\n\nThe upload defined list of files pattern reduces the amount of form content on the parent page, making it easier for users to complete the form and keeps the user’s context and focus when providing all required metadata in the side drawer or subpage.\n\n### Empty state\n\nBefore any files are uploaded, provide an empty state. Use a standard empty state rather than an empty table because the experience of the empty state is simpler for many users. Screen reader users will not need to navigate through a table to find out it is empty.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1.5}>\n\t\t<H1>Upload defined list of files to data table</H1>\n\t</Stack>\n\t<Stack gap={2} alignItems=\"flex-start\">\n\t\t<H2>List of equipment</H2>\n\t\t<Stack gap={1}>\n\t\t\t<InfoIcon size=\"lg\" />\n\t\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\t\tNo equipment added\n\t\t\t</Heading>\n\t\t\t<Text>You must add an equipment to proceed.</Text>\n\t\t</Stack>\n\t\t<ButtonGroup>\n\t\t\t<Button variant=\"secondary\" size=\"sm\" iconBefore={PlusIcon}>\n\t\t\t\tUpload file\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t</Stack>\n</Stack>\n```\n\n### Large lists\n\nWhen large, defined lists of files in tables are required, a drawer or subpage for each upload action should be used. The [file upload](/components/file-upload) component can be used in the side drawer or subpage to allow multiple files for each required category to be upload and added to a table.\n\n### File categorisation\n\nThe use of a subpage or drawer enables you to insert questions and fields specific to each file upload to define the record category or type, and provide any metadata related to an upload. Radio groups or selects can be used to help the user determine which category should be applied to an uploaded file.\n\n<ImageWithBorder\n\talt=\"Screenshot of an open side drawer with the title ‘Add record’ and an empty state short form with a select, file upload and form buttons: ‘Add record’ and ‘Cancel’.\"\n\tsrc=\"/img/patterns/crud-tables-upload-defined-list.png\"\n/>\n\n### Validation and focus\n\nWhen a file is added in a subpage or drawer, return the user to the parent page and set their focus on a section alert to inform them if the upload was successful or an error has occurred.\n\nThe uploaded file should be visible in a table or list on the parent page. Provide an edit or remove action in the table row or list to enable the files to be changed.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1.5}>\n\t\t<H1>Upload defined list of files to table</H1>\n\t</Stack>\n\t<SectionAlert\n\t\tonClose={console.log}\n\t\ttitle=\"FileName1.png was uploaded\"\n\t\ttone=\"successHigh\"\n\t/>\n\t<Stack gap={2}>\n\t\t<H2>List of files</H2>\n\t\t<TableWrapper>\n\t\t\t<Table>\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Document type</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">File</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Size</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Action</TableHeader>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\t\t\t\t<TableBody>\n\t\t\t\t\t{[...Array(4).keys()].map((idx) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TableRow key={idx}>\n\t\t\t\t\t\t\t\t<TableCell>Required file category {idx + 1}</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t<Box width=\"2rem\" />\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t<Box width=\"2rem\" />\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t<Button iconBefore={UploadIcon} variant=\"text\">\n\t\t\t\t\t\t\t\t\t\tUpload\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t</TableWrapper>\n\t\t<ButtonGroup>\n\t\t\t<Button iconBefore={PlusIcon} size=\"sm\" variant=\"secondary\">\n\t\t\t\tUpload file\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t</Stack>\n</Stack>\n```\n\nIf a required file is not uploaded before the page is submitted, show an error in the row where the file is missing and provide a section alert above the table to assist with error correction.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1.5}>\n\t\t<H1>Upload defined list of files to table</H1>\n\t</Stack>\n\t<SectionAlert\n\t\tonClose={console.log}\n\t\ttitle=\"You must provide all documents in the table below\"\n\t\ttone=\"errorHigh\"\n\t>\n\t\t<UnorderedList>\n\t\t\t<ListItem>Required file category 1 is required</ListItem>\n\t\t\t<ListItem>Required file category 2 is required</ListItem>\n\t\t\t<ListItem>Required file category 3 is required</ListItem>\n\t\t</UnorderedList>\n\t</SectionAlert>\n\t<Stack gap={2}>\n\t\t<H2>List of files</H2>\n\t\t<TableWrapper>\n\t\t\t<Table>\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Document type</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">File</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Size</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Action</TableHeader>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\t\t\t\t<TableBody>\n\t\t\t\t\t{[...Array(3).keys()].map((idx) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TableRow invalid={true} key={idx}>\n\t\t\t\t\t\t\t\t<TableCell>Required file category {idx + 1}</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t<Box width=\"5rem\" />\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t<Flex alignItems=\"center\" gap={0.5}>\n\t\t\t\t\t\t\t\t\t\t<AlertFilledIcon color=\"error\" />\n\t\t\t\t\t\t\t\t\t\t<Text>File missing</Text>\n\t\t\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t<Button iconBefore={UploadIcon} variant=\"text\">\n\t\t\t\t\t\t\t\t\t\tUpload\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t</TableWrapper>\n\t\t<ButtonGroup>\n\t\t\t<Button iconBefore={PlusIcon} size=\"sm\" variant=\"secondary\">\n\t\t\t\tUpload file\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t</Stack>\n</Stack>\n```\n","data":{"title":"Create, read, update and delete data in tables","description":"Applications that require persistent data storage commonly require table layouts to present stored data. Here are some patterns that enable users to create, read, update and delete persistent data in tables.","relatedComponents":["button","file-input","file-upload","section-alert","table"]},"title":"Create, read, update and delete data in tables","description":"Applications that require persistent data storage commonly require table layouts to present stored data. Here are some patterns that enable users to create, read, update and delete persistent data in tables.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["button","file-input","file-upload","section-alert","table"],"relatedPatterns":null},"relatedComponents":[{"slug":"button","name":"button","title":"Button","description":"A button communicates an action to a user and indicates what will happen next.","storybookPath":"/story/forms-button--primary","figmaGalleryNodeId":"12444%3A100219","subNavItems":[{"label":"Overview","href":"/components/button","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/overview.mdx"},{"label":"Rationale","href":"/components/button/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/rationale.mdx"},{"label":"Content","href":"/components/button/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/content.mdx"},{"label":"Code","href":"/components/button/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/code.mdx"},{"label":"Accessibility","href":"/components/button/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/accessibility.mdx"}],"relatedComponents":null,"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"file-input","name":"file-input","title":"File input","description":"The File input component allows users to attach one file to a form field by browsing their device.","storybookPath":"/story/Forms-FileInput--basic","figmaGalleryNodeId":"16180%3A41550","subNavItems":[{"label":"Overview","href":"/components/file-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-input/docs/overview.mdx"},{"label":"Code","href":"/components/file-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-input/docs/code.mdx"}],"relatedComponents":["file-upload"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"file-upload","name":"file-upload","title":"File upload","description":"The File upload component allows users to attach one or multiple files to a form via drag-and-drop or by browsing their device.","storybookPath":"/story/forms-fileupload--basic","figmaGalleryNodeId":"12444%3A100384","subNavItems":[{"label":"Overview","href":"/components/file-upload","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-upload/docs/overview.mdx"},{"label":"Code","href":"/components/file-upload/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-upload/docs/code.mdx"},{"label":"Accessibility","href":"/components/file-upload/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-upload/docs/accessibility.mdx"}],"relatedComponents":["file-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"section-alert","name":"section-alert","title":"Section alert","description":"Section alerts are non-disruptive notifications that provide Success, Error, Warning, Information and Progress messages about a state change in a section of a page.","storybookPath":"/story/Content-SectionAlert--basic","figmaGalleryNodeId":"19223%3A12705","subNavItems":[{"label":"Overview","href":"/components/section-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/overview.mdx"},{"label":"Content","href":"/components/section-alert/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/content.mdx"},{"label":"Code","href":"/components/section-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/code.mdx"}],"relatedComponents":["callout","global-alert","page-alert","status-badge"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},{"slug":"table","name":"table","title":"Table","description":"Tables help make complex information easier to scan and compare. Use tables for exact values or information that would be hard to read in body text.","storybookPath":"/story/content-table--basic","figmaGalleryNodeId":"11981%3A101727","subNavItems":[{"label":"Overview","href":"/components/table","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/overview.mdx"},{"label":"Rationale","href":"/components/table/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/rationale.mdx"},{"label":"Content","href":"/components/table/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/content.mdx"},{"label":"Code","href":"/components/table/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/code.mdx"},{"label":"Accessibility","href":"/components/table/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/accessibility.mdx"}],"relatedComponents":["summary-list"],"relatedPatterns":["selectable-table-with-batch-actions","search-filters"],"deprecated":false,"unreleased":false}],"relatedPatterns":null,"toc":[{"id":"overview","title":"Overview","level":2,"slug":"overview","items":[{"id":"create-a-record-in-a-data-table","title":"Create a record in a data table","level":3,"slug":"create-a-record-in-a-data-table","items":[]},{"id":"read-a-record-in-a-data-table","title":"Read a record in a data table","level":3,"slug":"read-a-record-in-a-data-table","items":[]},{"id":"update-a-record-in-a-data-table","title":"Update a record in a data table","level":3,"slug":"update-a-record-in-a-data-table","items":[]},{"id":"delete-a-record-from-a-data-table","title":"Delete a record from a data table","level":3,"slug":"delete-a-record-from-a-data-table","items":[]}]},{"id":"upload-an-unspecified-list-of-files-to-a-table","title":"Upload an unspecified list of files to a table","level":2,"slug":"upload-an-unspecified-list-of-files-to-a-table","items":[{"id":"empty-state","title":"Empty state","level":3,"slug":"empty-state","items":[]},{"id":"side-page-or-drawer","title":"Side page or drawer","level":3,"slug":"side-page-or-drawer","items":[]},{"id":"file-categorisation","title":"File categorisation","level":3,"slug":"file-categorisation","items":[]},{"id":"validation-and-focus","title":"Validation and focus","level":3,"slug":"validation-and-focus","items":[]}]},{"id":"upload-a-defined-list-of-files-to-a-data-table","title":"Upload a defined list of files to a data table","level":2,"slug":"upload-a-defined-list-of-files-to-a-data-table","items":[{"id":"empty-state-1","title":"Empty state","level":3,"slug":"empty-state","items":[]},{"id":"large-lists","title":"Large lists","level":3,"slug":"large-lists","items":[]},{"id":"file-categorisation-1","title":"File categorisation","level":3,"slug":"file-categorisation","items":[]},{"id":"validation-and-focus-1","title":"Validation and focus","level":3,"slug":"validation-and-focus","items":[]}]},{"id":"related-components","items":[],"level":2,"slug":"related-components","title":"Related components"}]},"__N_SSG":true}