{"pageProps":{"guide":{"slug":"change-management","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The Design System is a living system. It is constantly evolving to meet the needs of our users. We want to ensure that we are communicating changes to our users in a way that is clear and easy to understand.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Release cadence\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We aim to release a new version of the Design System every two weeks, or the end of a sprint. This is to ensure that we are releasing changes regularly, and to give our users a chance to provide feedback on changes before they are released.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is a general guideline, and we may release more frequently if there are important changes to be released.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Change Types\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When contributing changes to the system, it is important to understand how we classify and communicate them. This helps us to understand the impact of changes and to communicate them to our users.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We follow the \", _jsx(_components.a, {\n        href: \"https://semver.org/\",\n        children: \"Semantic Versioning\"\n      }), \" system to classify changes. This system uses three classificatons to describe the type of change...\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Patch\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Minor\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Major\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Patch (fix)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A change that fixes a bug or makes a small improvement which does not affect the API of the component. The consumer isn't expected to change their code in order to implement the update.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example...\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A minor visual change to a component\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Resolving a crash or other kind of bug\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The PR can merged and released as soon as a AgDS team member is free.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Minor (feature)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A new feature to an existing component, or the introduction of a new standalone component. The user can elect to implement the change but isn't forced to change existing code.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example...\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A new component\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A new prop on an existing component\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The PR can merged and released as soon as a AgDS team member is free.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Major (breaking)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A change which breaks the API of existing component(s). A user is expected to make a change to their code in order for it to continue working.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example...\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Removing a component\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Removing a prop from a component\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Changing the API, behaviour or name of a component\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Before this can be merged\"\n      }), \", the community must be given a chance to give feedback on the change. Please follow the following steps.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Consult the Design System team of the change you intend to make\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Open the PR as a draft, and add the \\\"breaking\\\" label. Notify the AgDS team\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"AgDS team will notify the community via the \\\"Design System\\\" chat in Microsoft Teams\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Leave the PR open for at least one week, to give the community a chance to give feedback by commenting on the GitHub Pull Request\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Consider the feedback given and make any changes\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The AgDS team will decide whether to merge the PR and release the change\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"'No change'\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Changes to the build process, documentation website, or other parts of the system which are not directly related to components, do not require a Changeset.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"About Changesets\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We use \", _jsx(_components.a, {\n        href: \"https://github.com/changesets/changesets\",\n        children: \"Changesets\"\n      }), \" to communicate the changes to our users and to automate the release process.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Every pull request which changes a component must include a changeset file. This file describes the change, and is used to generate the release notes and to determine the version number of the next release.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To create a changeset, run \", _jsx(_components.code, {\n        children: \"yarn changset\"\n      }), \" in the root of the repository. Then commit the changeset file and push it to your branch.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Change Management","opener":"How we classify and communicate changes to our systems"}},"data":{"title":"Change Management","opener":"How we classify and communicate changes to our systems"},"title":"Change Management","opener":"How we classify and communicate changes to our systems"},"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/guides","label":"Guides"},{"label":"Change Management"}],"slug":"change-management"},"__N_SSG":true}