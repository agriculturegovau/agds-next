{"pageProps":{"pkg":{"slug":"control-input","name":"control-input","version":"1.5.1","title":"Control input","description":"Control inputs help users select one or more options from a list. Our control inputs consist of checkboxes and radio buttons.","storybookPath":"/story/forms-controlgroup--checkbox-group","figmaGalleryNodeId":"12926%3A104981","subNavItems":[{"label":"Overview","href":"/components/control-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/control-input/docs/overview.mdx"},{"label":"Code","href":"/components/control-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/control-input/docs/code.mdx"}],"relatedComponents":["switch"],"deprecated":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"SectionAlert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Control input"}],"toc":[{"id":"checkbox","title":"Checkbox","level":2,"slug":"checkbox","items":[]},{"id":"radio","title":"Radio","level":2,"slug":"radio","items":[]},{"id":"block","title":"Block","level":2,"slug":"block","items":[]},{"id":"hint","title":"Hint","level":2,"slug":"hint","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"required","title":"Required","level":2,"slug":"required","items":[{"id":"hide-optional-label","title":"Hide optional label","level":3,"slug":"hide-optional-label","items":[]}]},{"id":"disabled-control-inputs","title":"Disabled control inputs","level":2,"slug":"disabled-control-inputs","items":[]},{"id":"small-control-inputs","title":"Small control inputs","level":2,"slug":"small-control-inputs","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to help users select one or more items\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"use for a concise list of options \", _jsx(_components.code, {\n          children: \"(<10)\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"indicate if input is optional\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ensure users can select one item at a time\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use vertical lists.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use when only one item can be selected\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"provide disabled options unless unavoidable\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use horizontal groups unless unavoidable.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Check boxes allow users to select one or more items.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Radio\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Radio inputs allow users to select one item at a time.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Example\\\" block>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Block\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Inline options can sometimes be difficult to scan. Users may find it challenging to determine with which label the checkbox option corresponds: the one before the checkbox or the one after.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vertical stacking of options, with one choice per line, eliminates this potential cause for confusion.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Block example\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Block example\\\" block>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hint\"\n      }), \" prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don't use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don't include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\" hint=\\\"Hint text\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid (does not validate according to the elements settings).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup\\n\\tlabel=\\\"Invalid example\\\"\\n\\tmessage=\\\"Please choose an option\\\"\\n\\tinvalid\\n\\tblock\\n>\\n\\t<Checkbox>Phone</Checkbox>\\n\\t<Checkbox>Tablet</Checkbox>\\n\\t<Checkbox>Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup\\n\\t\\t\\tlabel=\\\"Invalid example\\\"\\n\\t\\t\\tmessage=\\\"Please choose an option\\\"\\n\\t\\t\\tinvalid\\n\\t\\t\\tblock\\n\\t\\t>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop, this component will automatically append \\\"(optional)\\\" to the label as well as using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen reader user that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indiciate to screen reader users that a field is optional but don't want to show the \\\"(optional)\\\" label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<ControlGroup label=\\\"Required\\\" required block>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n\\t<ControlGroup label=\\\"Optional\\\" required={false} block>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n\\t<ControlGroup\\n\\t\\tlabel=\\\"Optional with hideOptionalLabel\\\"\\n\\t\\trequired={false}\\n\\t\\thideOptionalLabel={true}\\n\\t\\tblock\\n\\t>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disabled control inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Disabled control inputs can be used to indicate inputs that are no longer valid or expired.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Disabled example\\\" block>\\n\\t<Checkbox value=\\\"phone\\\" disabled>\\n\\t\\tPhone\\n\\t</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\" checked disabled>\\n\\t\\tTablet\\n\\t</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\" disabled>\\n\\t\\tLaptop\\n\\t</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Disabled example\\\" block>\\n\\t<Radio disabled>Phone</Radio>\\n\\t<Radio checked disabled>\\n\\t\\tTablet\\n\\t</Radio>\\n\\t<Radio disabled>Laptop</Radio>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Small control inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Smaller versions of control inputs.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Small example\\\" block>\\n\\t<Checkbox size=\\\"sm\\\" value=\\\"phone\\\">\\n\\t\\tPhone\\n\\t</Checkbox>\\n\\t<Checkbox size=\\\"sm\\\" value=\\\"tablet\\\">\\n\\t\\tTablet\\n\\t</Checkbox>\\n\\t<Checkbox size=\\\"sm\\\" value=\\\"laptop\\\">\\n\\t\\tLaptop\\n\\t</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Small example\\\" block>\\n\\t\\t\\t<Radio\\n\\t\\t\\t\\tchecked={isChecked('phone')}\\n\\t\\t\\t\\tonChange={handlerForKey('phone')}\\n\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio\\n\\t\\t\\t\\tchecked={isChecked('tablet')}\\n\\t\\t\\t\\tonChange={handlerForKey('tablet')}\\n\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio\\n\\t\\t\\t\\tchecked={isChecked('laptop')}\\n\\t\\t\\t\\tonChange={handlerForKey('laptop')}\\n\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Control input","description":"Control inputs help users select one or more options from a list. Our control inputs consist of checkboxes and radio buttons.","group":"Forms","storybookPath":"/story/forms-controlgroup--checkbox-group","figmaGalleryNodeId":"12926%3A104981","relatedComponents":["switch"]}},"relatedComponents":[{"slug":"switch","name":"switch","version":"1.5.1","title":"Switch","description":"A Switch allows a user to immediately update interface settings.","storybookPath":"/story/forms-switch--switch","figmaGalleryNodeId":"12444%3A100583","subNavItems":[{"label":"Overview","href":"/components/switch","path":"/home/runner/work/agds-next/agds-next/packages/react/src/switch/docs/overview.mdx"},{"label":"Code","href":"/components/switch/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/switch/docs/code.mdx"}],"relatedComponents":["control-input"],"deprecated":false}]},"__N_SSG":true}