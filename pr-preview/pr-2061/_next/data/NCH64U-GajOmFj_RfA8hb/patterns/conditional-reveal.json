{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Conditionally revealed form content"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed form content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"conditional-reveal","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"limit what is revealed to a single set of related questions or information that does not require its own submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal the related set of questions under the initial input or controls\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use another page if there are multiple related questions that need a submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"only use with vertically stacked checkboxes or radios.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"reveal a complete form with submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use with horizontally stacked checkboxes or radios\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal anything other than questions or supporting information relating directly to the initial option selected by the user.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Radio\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a specific option from a \", _jsx(_components.a, {\n        href: \"/components/radio\",\n        children: \"Radio\"\n      }), \" control group, additional questions or helpful information relevant to their selection can be revealed. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there a large number of items, use \", _jsx(_components.a, {\n        href: \"/components/select\",\n        children: \"Select\"\n      }), \" instead.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('phone')}>\\n\\t\\t\\t\\t<TextInput label=\\\"Phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput label=\\\"Mobile phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a particular \", _jsx(_components.a, {\n        href: \"/components/checkbox\",\n        children: \"Checkbox\"\n      }), \", you can reveal additional questions or provide helpful information that is relevant to the selection after the Checkbox control group. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState([]);\\n\\tconst handlerForKey = React.useCallback(\\n\\t\\t(key) => () =>\\n\\t\\t\\tsetValue((value) =>\\n\\t\\t\\t\\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\\n\\t\\t\\t),\\n\\t\\t[]\\n\\t);\\n\\tconst isChecked = (key) => value.includes(key);\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"How would you like to be contacted?\\\" required block>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('email')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('email')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('phone')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('phone')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalFieldContainer visible={value.length}>\\n\\t\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Phone number\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Mobile phone number\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Select\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a particular option from a \", _jsx(_components.a, {\n        href: \"/components/select\",\n        children: \"Select\"\n      }), \" dropdown, additional questions or helpful information relevant to their selection can be revealed. This ensures that the user only sees content that is pertinent to their choice.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there a small number of items, use \", _jsx(_components.a, {\n        href: \"/components/radio\",\n        children: \"Radio\"\n      }), \" instead.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState('');\\n\\tconst handlerForKey = React.useCallback((e) => setValue(e.target.value), []);\\n\\tconst isChecked = (key) => value === key;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tplaceholder=\\\"Please select\\\"\\n\\t\\t\\t\\tlabel=\\\"How would you like to be contacted?\\\"\\n\\t\\t\\t\\tonChange={handlerForKey}\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'post', label: 'Post' },\\n\\t\\t\\t\\t\\t{ value: 'textMessage', label: 'Text message' },\\n\\t\\t\\t\\t\\t{ value: 'email', label: 'E mail' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t\\trequired\\n\\t\\t\\t\\tvalue={value}\\n\\t\\t\\t/>\\n\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('post')}>\\n\\t\\t\\t\\t<H2>Address</H2>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"text\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Street address\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"text\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Suburb, town or city\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"lg\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"State or territory\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ label: 'ACT', value: 'act' },\\n\\t\\t\\t\\t\\t\\t{ label: 'NSW', value: 'nsw' },\\n\\t\\t\\t\\t\\t\\t{ label: 'NT', value: 'nt' },\\n\\t\\t\\t\\t\\t\\t{ label: 'QLD', value: 'qld' },\\n\\t\\t\\t\\t\\t\\t{ label: 'SA', value: 'sa' },\\n\\t\\t\\t\\t\\t\\t{ label: 'TAS', value: 'tas' },\\n\\t\\t\\t\\t\\t\\t{ label: 'VIC', value: 'vic' },\\n\\t\\t\\t\\t\\t\\t{ label: 'WA', value: 'wa' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Post code\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput inputMode=\\\"text\\\" label=\\\"Mobile phone number\\\" required />\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState('email');\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\ttype=\\\"email\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Email address\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a email address\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('phone')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tlabel=\\\"Phone number\\\"\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a phone number\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t<ConditionalFieldContainer visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tlabel=\\\"Mobile phone number\\\"\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a mobile phone number\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Research\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"March 2025\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before March 2025, conditional form elements were revealed immediately after their parent radio or checkbox, and inside their control group.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This pattern worked well for sighted users who could see the relationship and context between the control and conditionally revealed form elements. However, we observed screen reader users becoming disoriented when they encountered additional form elements between items in the control group. In response, we adjusted our guidance to position the additional questions immediately after the control group.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This updated pattern has been tested in two rounds of usability studies. We have observed no issues since the change.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","relatedComponents":["conditional-field-container"]}},"content":"\n<DoHeading />\n\n- limit what is revealed to a single set of related questions or information that does not require its own submit action\n- reveal the related set of questions under the initial input or controls\n- use another page if there are multiple related questions that need a submit action\n- only use with vertically stacked checkboxes or radios.\n\n<DontHeading />\n\n- reveal a complete form with submit action\n- use with horizontally stacked checkboxes or radios\n- reveal anything other than questions or supporting information relating directly to the initial option selected by the user.\n\n## Radio\n\nWhen a user selects a specific option from a [Radio](/components/radio) control group, additional questions or helpful information relevant to their selection can be revealed. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\n\nIf there a large number of items, use [Select](/components/select) instead.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\t\tEmail\n\t\t\t\t</Radio>\n\t\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\t\tPhone\n\t\t\t\t</Radio>\n\t\t\t\t<Radio\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Radio>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalFieldContainer visible={isChecked('email')}>\n\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t</ConditionalFieldContainer>\n\t\t\t<ConditionalFieldContainer visible={isChecked('phone')}>\n\t\t\t\t<TextInput label=\"Phone number\" inputMode=\"numeric\" required />\n\t\t\t</ConditionalFieldContainer>\n\t\t\t<ConditionalFieldContainer visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput label=\"Mobile phone number\" inputMode=\"numeric\" required />\n\t\t\t</ConditionalFieldContainer>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Checkbox\n\nWhen a user selects a particular [Checkbox](/components/checkbox), you can reveal additional questions or provide helpful information that is relevant to the selection after the Checkbox control group. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState([]);\n\tconst handlerForKey = React.useCallback(\n\t\t(key) => () =>\n\t\t\tsetValue((value) =>\n\t\t\t\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\n\t\t\t),\n\t\t[]\n\t);\n\tconst isChecked = (key) => value.includes(key);\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"How would you like to be contacted?\" required block>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('email')}\n\t\t\t\t\tonChange={handlerForKey('email')}\n\t\t\t\t>\n\t\t\t\t\tEmail\n\t\t\t\t</Checkbox>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('phone')}\n\t\t\t\t\tonChange={handlerForKey('phone')}\n\t\t\t\t>\n\t\t\t\t\tPhone\n\t\t\t\t</Checkbox>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Checkbox>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalFieldContainer visible={value.length}>\n\t\t\t\t{isChecked('email') && (\n\t\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t\t)}\n\t\t\t\t{isChecked('phone') && (\n\t\t\t\t\t<TextInput inputMode=\"numeric\" label=\"Phone number\" required />\n\t\t\t\t)}\n\t\t\t\t{isChecked('textMessage') && (\n\t\t\t\t\t<TextInput inputMode=\"numeric\" label=\"Mobile phone number\" required />\n\t\t\t\t)}\n\t\t\t</ConditionalFieldContainer>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Select\n\nWhen a user selects a particular option from a [Select](/components/select) dropdown, additional questions or helpful information relevant to their selection can be revealed. This ensures that the user only sees content that is pertinent to their choice.\n\nIf there a small number of items, use [Radio](/components/radio) instead.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState('');\n\tconst handlerForKey = React.useCallback((e) => setValue(e.target.value), []);\n\tconst isChecked = (key) => value === key;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<Select\n\t\t\t\tplaceholder=\"Please select\"\n\t\t\t\tlabel=\"How would you like to be contacted?\"\n\t\t\t\tonChange={handlerForKey}\n\t\t\t\toptions={[\n\t\t\t\t\t{ value: 'post', label: 'Post' },\n\t\t\t\t\t{ value: 'textMessage', label: 'Text message' },\n\t\t\t\t\t{ value: 'email', label: 'E mail' },\n\t\t\t\t]}\n\t\t\t\trequired\n\t\t\t\tvalue={value}\n\t\t\t/>\n\n\t\t\t<ConditionalFieldContainer visible={isChecked('post')}>\n\t\t\t\t<H2>Address</H2>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"text\"\n\t\t\t\t\tlabel=\"Street address\"\n\t\t\t\t\tmaxWidth=\"xl\"\n\t\t\t\t\trequired\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"text\"\n\t\t\t\t\tlabel=\"Suburb, town or city\"\n\t\t\t\t\tmaxWidth=\"lg\"\n\t\t\t\t\trequired\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t\t<Select\n\t\t\t\t\tlabel=\"State or territory\"\n\t\t\t\t\tmaxWidth=\"sm\"\n\t\t\t\t\toptions={[\n\t\t\t\t\t\t{ label: 'ACT', value: 'act' },\n\t\t\t\t\t\t{ label: 'NSW', value: 'nsw' },\n\t\t\t\t\t\t{ label: 'NT', value: 'nt' },\n\t\t\t\t\t\t{ label: 'QLD', value: 'qld' },\n\t\t\t\t\t\t{ label: 'SA', value: 'sa' },\n\t\t\t\t\t\t{ label: 'TAS', value: 'tas' },\n\t\t\t\t\t\t{ label: 'VIC', value: 'vic' },\n\t\t\t\t\t\t{ label: 'WA', value: 'wa' },\n\t\t\t\t\t]}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\tlabel=\"Post code\"\n\t\t\t\t\trequired\n\t\t\t\t\tmaxWidth=\"sm\"\n\t\t\t\t/>\n\t\t\t</ConditionalFieldContainer>\n\n\t\t\t<ConditionalFieldContainer visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput inputMode=\"text\" label=\"Mobile phone number\" required />\n\t\t\t</ConditionalFieldContainer>\n\n\t\t\t<ConditionalFieldContainer visible={isChecked('email')}>\n\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t</ConditionalFieldContainer>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Invalid\n\nWhen a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState('email');\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\t\tEmail\n\t\t\t\t</Radio>\n\t\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\t\tPhone\n\t\t\t\t</Radio>\n\t\t\t\t<Radio\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Radio>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalFieldContainer visible={isChecked('email')}>\n\t\t\t\t<TextInput\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a email address\"\n\t\t\t\t/>\n\t\t\t</ConditionalFieldContainer>\n\t\t\t<ConditionalFieldContainer visible={isChecked('phone')}>\n\t\t\t\t<TextInput\n\t\t\t\t\tlabel=\"Phone number\"\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a phone number\"\n\t\t\t\t/>\n\t\t\t</ConditionalFieldContainer>\n\t\t\t<ConditionalFieldContainer visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput\n\t\t\t\t\tlabel=\"Mobile phone number\"\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a mobile phone number\"\n\t\t\t\t/>\n\t\t\t</ConditionalFieldContainer>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Research\n\n### March 2025\n\nBefore March 2025, conditional form elements were revealed immediately after their parent radio or checkbox, and inside their control group.\n\nThis pattern worked well for sighted users who could see the relationship and context between the control and conditionally revealed form elements. However, we observed screen reader users becoming disoriented when they encountered additional form elements between items in the control group. In response, we adjusted our guidance to position the additional questions immediately after the control group.\n\nThis updated pattern has been tested in two rounds of usability studies. We have observed no issues since the change.\n","data":{"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","relatedComponents":["conditional-field-container"]},"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["conditional-field-container"],"relatedPatterns":null},"toc":[{"id":"radio","title":"Radio","level":2,"slug":"radio","items":[]},{"id":"checkbox","title":"Checkbox","level":2,"slug":"checkbox","items":[]},{"id":"select","title":"Select","level":2,"slug":"select","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"research","title":"Research","level":2,"slug":"research","items":[{"id":"march-2025","title":"March 2025","level":3,"slug":"march-2025","items":[]}]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"relatedComponents":[{"slug":"conditional-field-container","name":"conditional-field-container","title":"Conditional field container","description":"A standardised pattern for conditionally hiding and revealing the amount of content a user views in a form.","storybookPath":"/story/Forms-ConditionalFieldContainer--basic","figmaGalleryNodeId":null,"subNavItems":[{"label":"Overview","href":"/components/conditional-field-container","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-field-container/docs/overview.mdx"},{"label":"Content","href":"/components/conditional-field-container/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-field-container/docs/content.mdx"},{"label":"Code","href":"/components/conditional-field-container/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-field-container/docs/code.mdx"}],"relatedComponents":null,"relatedPatterns":["conditional-reveal"],"deprecated":false,"unreleased":false}],"relatedPatterns":null},"__N_SSG":true}