{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/content","label":"Content"},{"label":"ARIA and semantic code"}],"description":"The Accessible Rich Internet Application (ARIA) specification helps you to create accessible digital products and services.","editPath":"/docs/content/foundations/accessibility/aria-and-semantic-code.mdx","page":{"slug":"aria-and-semantic-code","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Callout} = _components;\n  if (!Callout) _missingMdxReference(\"Callout\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"ARIA in AgDS\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ARIA has been used throughout AgDS to ensure that our components and design patterns are fully accessible to everyone. This means you can get started on building accessibility into your digital products and services right away.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The ARIA usage in our components achieved full WCAG conformance in accessibility audits in 2022 and 2024. Our implementation of ARIA is also demonstrated in the \", _jsx(_components.a, {\n        href: \"/yourgov\",\n        children: \"yourGov\"\n      }), \" application.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"What is semantic markup?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Semantic markup means using HTML elements according to their intended meaning, structure and purpose, rather than just for visual styling.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using the correct semantic elements provides built-in accessibility, keyboard support, and screen reader compatibility. This also improves the readability and maintainability of your code.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to native HTML, AgDS provides a suite of components that apply semantic markup alongside appropriate visual styling, performance optimisations, and accessibility features.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"What is ARIA?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ARIA (Accessible Rich Internet Applications) is a set of HTML attributes that define roles, states, and properties to help make web content and applications more accessible. This is particularly important for people using assistive technologies like screen readers.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles\",\n        children: \"ARIA roles\"\n      }), \" describe what an element is – for example, \", _jsx(_components.code, {\n        children: \"role=\\\"combobox\\\"\"\n      }), \", \", _jsx(_components.code, {\n        children: \"role=\\\"dialog\\\"\"\n      }), \". This is important when that element doesn’t exist natively in HTML.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes\",\n        children: \"ARIA states and properties\"\n      }), \" and properties describe the current state or behaviour of an element – for example, \", _jsx(_components.code, {\n        children: \"aria-busy\"\n      }), \", \", _jsx(_components.code, {\n        children: \"aria-expanded\"\n      }), \", \", _jsx(_components.code, {\n        children: \"aria-invalid\"\n      }), \", \", _jsx(_components.code, {\n        children: \"aria-labelledby\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Before using ARIA\"\n    }), \"\\n\", _jsxs(Callout, {\n      children: [_jsx(_components.p, {\n        children: \"“If you can use a native HTML element or attribute with the semantics and\\nbehaviour you require already built in, instead of re-purposing an element and\\nadding an ARIA role, state or property to make it accessible, then do so.”\"\n      }), _jsx(\"cite\", {\n        children: _jsxs(_components.p, {\n          children: [\"From \", _jsx(_components.a, {\n            href: \"https://www.w3.org/TR/using-aria/#rule1\",\n            children: \"Using ARIA – First rule of\\nARIA\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You may also hear the phrase:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"“No ARIA is better than bad ARIA.”\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In \", _jsx(_components.a, {\n        href: \"https://webaim.org/projects/million/#aria\",\n        children: \"WebAim’s survey of over one million home pages\"\n      }), \", they found that pages using ARIA averaged 41% more detected accessibility errors than those without it. While ARIA is intended to improve accessibility, incorrect use can significantly worsen the user experience. This is especially true for people relying on assistive technologies.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Requirements\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use semantic HTML wherever possible – for example, \", _jsx(_components.code, {\n          children: \"<button>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<nav>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<header>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<ul>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<h1>\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Only use ARIA when native HTML doesn’t provide the semantics or behaviour needed.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Don’t override native semantics with ARIA roles – for example, avoid \", _jsx(_components.code, {\n          children: \"role=\\\"link\\\"\"\n        }), \" on a \", _jsx(_components.code, {\n          children: \"<button>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"aria-label\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"aria-labelledby\"\n        }), \" to provide accessible names for non-text or custom elements\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"aria-hidden=\\\"true\\\"\"\n        }), \" only to hide non-interactive elements from assistive tech.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use ARIA state attributes like \", _jsx(_components.code, {\n          children: \"aria-expanded\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"aria-selected\"\n        }), \" to reflect UI state where needed.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Ensure interactive elements are focusable and support keyboard interaction.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Follow \", _jsx(_components.a, {\n          href: \"https://www.w3.org/WAI/ARIA/apg/\",\n          children: \"WAI-ARIA Authoring Practices Guide\"\n        }), \" for any custom widgets.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Test with screen readers and keyboard navigation.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Benefits\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Improves accessibility for users relying on assistive technologies.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Provides clearer structure and meaning to content.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Reduces reliance on ARIA, which can be error-prone.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Increases compatibility across browsers and devices.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Makes code easier to maintain and debug.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Helps our components “just work” without needing manual ARIA intervention.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Ensures consistent behaviour across different user agents.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Contributes to meeting WCAG level AA requirements.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"WCAG references\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.w3.org/TR/wai-aria-1.2/\",\n          children: \"Accessible Rich Internet Applications (WAI-ARIA) 1.2\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.w3.org/WAI/ARIA/apg/\",\n          children: \"ARIA Authoring Practices Guide\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.w3.org/TR/using-aria/\",\n          children: \"Using ARIA – W3C\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"content":"## ARIA in AgDS\n\nARIA has been used throughout AgDS to ensure that our components and design patterns are fully accessible to everyone. This means you can get started on building accessibility into your digital products and services right away.\n\nThe ARIA usage in our components achieved full WCAG conformance in accessibility audits in 2022 and 2024. Our implementation of ARIA is also demonstrated in the [yourGov](/yourgov) application.\n\n## What is semantic markup?\n\nSemantic markup means using HTML elements according to their intended meaning, structure and purpose, rather than just for visual styling.\n\nUsing the correct semantic elements provides built-in accessibility, keyboard support, and screen reader compatibility. This also improves the readability and maintainability of your code.\n\nIn addition to native HTML, AgDS provides a suite of components that apply semantic markup alongside appropriate visual styling, performance optimisations, and accessibility features.\n\n## What is ARIA?\n\nARIA (Accessible Rich Internet Applications) is a set of HTML attributes that define roles, states, and properties to help make web content and applications more accessible. This is particularly important for people using assistive technologies like screen readers.\n\n[ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles) describe what an element is – for example, `role=\"combobox\"`, `role=\"dialog\"`. This is important when that element doesn’t exist natively in HTML.\n\n[ARIA states and properties](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes) and properties describe the current state or behaviour of an element – for example, `aria-busy`, `aria-expanded`, `aria-invalid`, `aria-labelledby`.\n\n## Before using ARIA\n\n<Callout>\n\t“If you can use a native HTML element or attribute with the semantics and\n\tbehaviour you require already built in, instead of re-purposing an element and\n\tadding an ARIA role, state or property to make it accessible, then do so.”\n\t<cite>\n\t\tFrom [Using ARIA – First rule of\n\t\tARIA](https://www.w3.org/TR/using-aria/#rule1)\n\t</cite>\n</Callout>\n\nYou may also hear the phrase:\n\n> “No ARIA is better than bad ARIA.”\n\nIn [WebAim’s survey of over one million home pages](https://webaim.org/projects/million/#aria), they found that pages using ARIA averaged 41% more detected accessibility errors than those without it. While ARIA is intended to improve accessibility, incorrect use can significantly worsen the user experience. This is especially true for people relying on assistive technologies.\n\n## Requirements\n\n- Use semantic HTML wherever possible – for example, `<button>`, `<nav>`, `<header>`, `<ul>`, `<h1>`.\n- Only use ARIA when native HTML doesn’t provide the semantics or behaviour needed.\n- Don’t override native semantics with ARIA roles – for example, avoid `role=\"link\"` on a `<button>`.\n- Use `aria-label` or `aria-labelledby` to provide accessible names for non-text or custom elements\n- Use `aria-hidden=\"true\"` only to hide non-interactive elements from assistive tech.\n- Use ARIA state attributes like `aria-expanded` or `aria-selected` to reflect UI state where needed.\n- Ensure interactive elements are focusable and support keyboard interaction.\n- Follow [WAI-ARIA Authoring Practices Guide](https://www.w3.org/WAI/ARIA/apg/) for any custom widgets.\n- Test with screen readers and keyboard navigation.\n\n## Benefits\n\n- Improves accessibility for users relying on assistive technologies.\n- Provides clearer structure and meaning to content.\n- Reduces reliance on ARIA, which can be error-prone.\n- Increases compatibility across browsers and devices.\n- Makes code easier to maintain and debug.\n- Helps our components “just work” without needing manual ARIA intervention.\n- Ensures consistent behaviour across different user agents.\n- Contributes to meeting WCAG level AA requirements.\n\n## WCAG references\n\n- [Accessible Rich Internet Applications (WAI-ARIA) 1.2](https://www.w3.org/TR/wai-aria-1.2/)\n- [ARIA Authoring Practices Guide](https://www.w3.org/WAI/ARIA/apg/)\n- [Using ARIA – W3C](https://www.w3.org/TR/using-aria/)\n","data":{},"title":"aria-and-semantic-code","description":null},"pageTitle":"ARIA and semantic code","toc":[{"id":"aria-in-agds","title":"ARIA in AgDS","level":2,"slug":"aria-in-agds","items":[]},{"id":"what-is-semantic-markup","title":"What is semantic markup?","level":2,"slug":"what-is-semantic-markup","items":[]},{"id":"what-is-aria","title":"What is ARIA?","level":2,"slug":"what-is-aria","items":[]},{"id":"before-using-aria","title":"Before using ARIA","level":2,"slug":"before-using-aria","items":[]},{"id":"requirements","title":"Requirements","level":2,"slug":"requirements","items":[]},{"id":"benefits","title":"Benefits","level":2,"slug":"benefits","items":[]},{"id":"wcag-references","title":"WCAG references","level":2,"slug":"wcag-references","items":[]}]},"__N_SSG":true}