{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Ask users for dates and times"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/ask-users-for-dates-and-times","label":"Ask users for dates and times"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed form content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/review-and-submit","label":"Review and submit"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-an-option-from-a-list","label":"Selecting an option from a list"},{"href":"/patterns/selecting-multiple-options-from-a-list","label":"Selecting multiple options from a list"},{"href":"/patterns/yourgov-example-application","label":"yourGov example application"}],"pattern":{"slug":"ask-users-for-dates-and-times","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Time input\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/time-input\",\n        children: \"Time input\"\n      }), \" allows users to type an exact time - for example, the known time of an incident or event.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When the user enters a time, formatting is applied to collect input in a consistent format.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It should be used in situations when a user knows and can provide an exact and arbitrary time.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\n\\tconst onChange = (timeValue) => {\\n\\t\\tconsole.log('onChange', timeValue);\\n\\t\\tsetValue(timeValue);\\n\\t};\\n\\n\\tconst invalid = value && !isValidTime(value.value);\\n\\n\\treturn (\\n\\t\\t<TimeInput\\n\\t\\t\\thideOptionalLabel\\n\\t\\t\\tinvalid={invalid}\\n\\t\\t\\tlabel=\\\"Time\\\"\\n\\t\\t\\tmessage=\\\"Enter a valid time\\\"\\n\\t\\t\\tonChange={onChange}\\n\\t\\t\\tvalue={value}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Time picker\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/time-picker\",\n        children: \"Time picker\"\n      }), \" is a composition of \", _jsx(_components.a, {\n        href: \"/components/combobox\",\n        children: \"combobox\"\n      }), \" that allows users to select a time from a predefined list of consistent time intervals.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As the user enters text into the field, autocomplete narrows the list to match their input.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The list is closed when a time is selected.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It should be used when a user needs to select from a large list of specific times.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\n\\tconst onChange = (timeValue) => {\\n\\t\\tconsole.log('onChange', timeValue);\\n\\t\\tsetValue(timeValue);\\n\\t};\\n\\n\\treturn (\\n\\t\\t<TimePicker\\n\\t\\t\\thideOptionalLabel\\n\\t\\t\\thint=\\\"Start typing to see results\\\"\\n\\t\\t\\tlabel=\\\"Select a time\\\"\\n\\t\\t\\tonChange={onChange}\\n\\t\\t\\tvalue={value}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Asking for specific known dates\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a specific known date is required, use a format tolerant \", _jsx(_components.a, {\n        href: \"/components/text-input\",\n        children: \"Text input\"\n      }), \" that validates acceptable formats and auto formats minor issues like spaces or capital letters.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Examples of a specific known date are birth date, when an application was made or an expiry date.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput hideOptionalLabel hint=\\\"(e.g. 15/02/1982)\\\" label=\\\"Date of event\\\" />\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/components/date-picker-next\",\n        children: \"Date picker\"\n      }), \" component can also be used when a specific known date is required.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Asking for approximate dates\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When asking for a date that may be general or hard for users to remember, allow them to provide an approximate date.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use a format-tolerant text input that accepts a range of valid formats and automatically reformats minor issues, such as extra spaces or capital letters.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Examples of approximate dates include any dates that are indicative and non-specific like ’January 2025’.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput\\n\\thideOptionalLabel\\n\\thint=\\\"(e.g. December 2025)\\\"\\n\\tlabel=\\\"Approximate date\\\"\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Picking dates\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.a, {\n        href: \"/components/date-picker-next\",\n        children: \"Date picker\"\n      }), \" so a user can pick a specific or available date from a calendar.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Date picker calendar allows selection of both past and future dates. It displays one month at a time, with controls to navigate by month or year.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use Date picker when a user needs to pick an unknown date or when they need to find an available date like when booking appointments.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn (\\n\\t\\t<DatePickerNext\\n\\t\\t\\thideOptionalLabel\\n\\t\\t\\tlabel=\\\"Select date\\\"\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tvalue={value}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Picking date ranges\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.a, {\n        href: \"/components/date-range-picker-next\",\n        children: \"Date range picker\"\n      }), \" when a user needs to pick a specific or available date range from a calendar.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Date range picker calendars allow selection of both past and future dates. They display two months at a time on large screens, with controls to navigate by month or year.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use Date range picker when a user needs to pick a start and end. For example, when providing transport times or booking accommodation.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\\n\\treturn (\\n\\t\\t<DateRangePickerNext value={value} onChange={setValue} hideOptionalLabel />\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Picking a date and time\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.a, {\n        href: \"/components/grouped-fields\",\n        children: \"Grouped fields\"\n      }), \" component to combine closely related inputs like \", _jsx(_components.a, {\n        href: \"/components/date-picker-next\",\n        children: \"Date picker\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/components/time-picker\",\n        children: \"Time picker\"\n      }), \" when asking users to provide a specific date and time.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An examples of when we combine date and time in Grouped fields is booking a departure time or an appointment.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [dateValue, setDateValue] = React.useState();\\n\\tconst [timeValue, setTimeValue] = React.useState();\\n\\treturn (\\n\\t\\t<GroupedFields legend=\\\"Departure time\\\" hideOptionalLabel>\\n\\t\\t\\t{({ field1Props, field2Props }) => (\\n\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t<DatePickerNext\\n\\t\\t\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Date\\\"\\n\\t\\t\\t\\t\\t\\tonChange={setDateValue}\\n\\t\\t\\t\\t\\t\\tvalue={dateValue}\\n\\t\\t\\t\\t\\t\\t{...field1Props}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t<TimePicker\\n\\t\\t\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Time\\\"\\n\\t\\t\\t\\t\\t\\tonChange={setTimeValue}\\n\\t\\t\\t\\t\\t\\tvalue={timeValue}\\n\\t\\t\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</>\\n\\t\\t\\t)}\\n\\t\\t</GroupedFields>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Time zones\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.a, {\n        href: \"/components/grouped-fields\",\n        children: \"Grouped fields\"\n      }), \" component to combine closely related inputs like \", _jsx(_components.a, {\n        href: \"/components/time-picker\",\n        children: \"Time picker\"\n      }), \" and a time zone \", _jsx(_components.a, {\n        href: \"/components/select\",\n        children: \"Select\"\n      }), \" when asking users for a time and the time zone is important.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An example of when we combine time and time zone in Grouped fields is when the time a consignment will arrive in another country is required.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [timeValue, setTimeValue] = React.useState();\\n\\tconst [timezoneValue, setTimezoneValue] = React.useState();\\n\\treturn (\\n\\t\\t<GroupedFields legend=\\\"Departure time\\\" hideOptionalLabel>\\n\\t\\t\\t{({ field1Props, field2Props }) => (\\n\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t<TimePicker\\n\\t\\t\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Time\\\"\\n\\t\\t\\t\\t\\t\\tmessage=\\\"Enter a valid time\\\"\\n\\t\\t\\t\\t\\t\\tonChange={setTimeValue}\\n\\t\\t\\t\\t\\t\\tvalue={timeValue}\\n\\t\\t\\t\\t\\t\\t{...field1Props}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Timezone\\\"\\n\\t\\t\\t\\t\\t\\tonChange={(e) => setTimezoneValue(e.target.value)}\\n\\t\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t\\t{ value: 'AWST', label: 'AWST' },\\n\\t\\t\\t\\t\\t\\t\\t{ value: 'ACWST', label: 'ACWST' },\\n\\t\\t\\t\\t\\t\\t\\t{ value: 'ACST', label: 'ACST' },\\n\\t\\t\\t\\t\\t\\t\\t{ value: 'AEST', label: 'AEST' },\\n\\t\\t\\t\\t\\t\\t\\t{ value: 'LHST', label: 'LHST' },\\n\\t\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\t\\tplaceholder=\\\"Please select\\\"\\n\\t\\t\\t\\t\\t\\tvalue={timezoneValue}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</>\\n\\t\\t\\t)}\\n\\t\\t</GroupedFields>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Ask users for dates and times","description":"When we ask for date, time or a combination of both, there are a range of components that can be used to meet user needs in different situations.","relatedComponents":["date-picker-next","date-range-picker-next","time-input","time-picker"]}},"content":"\n## Time input\n\n[Time input](/components/time-input) allows users to type an exact time - for example, the known time of an incident or event.\n\nWhen the user enters a time, formatting is applied to collect input in a consistent format.\n\nIt should be used in situations when a user knows and can provide an exact and arbitrary time.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\n\tconst onChange = (timeValue) => {\n\t\tconsole.log('onChange', timeValue);\n\t\tsetValue(timeValue);\n\t};\n\n\tconst invalid = value && !isValidTime(value.value);\n\n\treturn (\n\t\t<TimeInput\n\t\t\thideOptionalLabel\n\t\t\tinvalid={invalid}\n\t\t\tlabel=\"Time\"\n\t\t\tmessage=\"Enter a valid time\"\n\t\t\tonChange={onChange}\n\t\t\tvalue={value}\n\t\t/>\n\t);\n};\n```\n\n## Time picker\n\n[Time picker](/components/time-picker) is a composition of [combobox](/components/combobox) that allows users to select a time from a predefined list of consistent time intervals.\n\nAs the user enters text into the field, autocomplete narrows the list to match their input.\n\nThe list is closed when a time is selected.\n\nIt should be used when a user needs to select from a large list of specific times.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState(null);\n\n\tconst onChange = (timeValue) => {\n\t\tconsole.log('onChange', timeValue);\n\t\tsetValue(timeValue);\n\t};\n\n\treturn (\n\t\t<TimePicker\n\t\t\thideOptionalLabel\n\t\t\thint=\"Start typing to see results\"\n\t\t\tlabel=\"Select a time\"\n\t\t\tonChange={onChange}\n\t\t\tvalue={value}\n\t\t/>\n\t);\n};\n```\n\n## Asking for specific known dates\n\nWhen a specific known date is required, use a format tolerant [Text input](/components/text-input) that validates acceptable formats and auto formats minor issues like spaces or capital letters.\n\nExamples of a specific known date are birth date, when an application was made or an expiry date.\n\n```jsx live\n<TextInput hideOptionalLabel hint=\"(e.g. 15/02/1982)\" label=\"Date of event\" />\n```\n\nThe [Date picker](/components/date-picker-next) component can also be used when a specific known date is required.\n\n## Asking for approximate dates\n\nWhen asking for a date that may be general or hard for users to remember, allow them to provide an approximate date.\n\nUse a format-tolerant text input that accepts a range of valid formats and automatically reformats minor issues, such as extra spaces or capital letters.\n\nExamples of approximate dates include any dates that are indicative and non-specific like ’January 2025’.\n\n```jsx live\n<TextInput\n\thideOptionalLabel\n\thint=\"(e.g. December 2025)\"\n\tlabel=\"Approximate date\"\n/>\n```\n\n## Picking dates\n\nUse [Date picker](/components/date-picker-next) so a user can pick a specific or available date from a calendar.\n\nThe Date picker calendar allows selection of both past and future dates. It displays one month at a time, with controls to navigate by month or year.\n\nUse Date picker when a user needs to pick an unknown date or when they need to find an available date like when booking appointments.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\treturn (\n\t\t<DatePickerNext\n\t\t\thideOptionalLabel\n\t\t\tlabel=\"Select date\"\n\t\t\tonChange={setValue}\n\t\t\tvalue={value}\n\t\t/>\n\t);\n};\n```\n\n## Picking date ranges\n\nUse [Date range picker](/components/date-range-picker-next) when a user needs to pick a specific or available date range from a calendar.\n\nThe Date range picker calendars allow selection of both past and future dates. They display two months at a time on large screens, with controls to navigate by month or year.\n\nUse Date range picker when a user needs to pick a start and end. For example, when providing transport times or booking accommodation.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState({ from: undefined, to: undefined });\n\treturn (\n\t\t<DateRangePickerNext value={value} onChange={setValue} hideOptionalLabel />\n\t);\n};\n```\n\n## Picking a date and time\n\nUse the [Grouped fields](/components/grouped-fields) component to combine closely related inputs like [Date picker](/components/date-picker-next) and [Time picker](/components/time-picker) when asking users to provide a specific date and time.\n\nAn examples of when we combine date and time in Grouped fields is booking a departure time or an appointment.\n\n```jsx live\n() => {\n\tconst [dateValue, setDateValue] = React.useState();\n\tconst [timeValue, setTimeValue] = React.useState();\n\treturn (\n\t\t<GroupedFields legend=\"Departure time\" hideOptionalLabel>\n\t\t\t{({ field1Props, field2Props }) => (\n\t\t\t\t<>\n\t\t\t\t\t<DatePickerNext\n\t\t\t\t\t\thideOptionalLabel\n\t\t\t\t\t\tlabel=\"Date\"\n\t\t\t\t\t\tonChange={setDateValue}\n\t\t\t\t\t\tvalue={dateValue}\n\t\t\t\t\t\t{...field1Props}\n\t\t\t\t\t/>\n\t\t\t\t\t<TimePicker\n\t\t\t\t\t\thideOptionalLabel\n\t\t\t\t\t\tlabel=\"Time\"\n\t\t\t\t\t\tonChange={setTimeValue}\n\t\t\t\t\t\tvalue={timeValue}\n\t\t\t\t\t\t{...field2Props}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</GroupedFields>\n\t);\n};\n```\n\n## Time zones\n\nUse the [Grouped fields](/components/grouped-fields) component to combine closely related inputs like [Time picker](/components/time-picker) and a time zone [Select](/components/select) when asking users for a time and the time zone is important.\n\nAn example of when we combine time and time zone in Grouped fields is when the time a consignment will arrive in another country is required.\n\n```jsx live\n() => {\n\tconst [timeValue, setTimeValue] = React.useState();\n\tconst [timezoneValue, setTimezoneValue] = React.useState();\n\treturn (\n\t\t<GroupedFields legend=\"Departure time\" hideOptionalLabel>\n\t\t\t{({ field1Props, field2Props }) => (\n\t\t\t\t<>\n\t\t\t\t\t<TimePicker\n\t\t\t\t\t\thideOptionalLabel\n\t\t\t\t\t\tlabel=\"Time\"\n\t\t\t\t\t\tmessage=\"Enter a valid time\"\n\t\t\t\t\t\tonChange={setTimeValue}\n\t\t\t\t\t\tvalue={timeValue}\n\t\t\t\t\t\t{...field1Props}\n\t\t\t\t\t/>\n\t\t\t\t\t<Select\n\t\t\t\t\t\thideOptionalLabel\n\t\t\t\t\t\tlabel=\"Timezone\"\n\t\t\t\t\t\tonChange={(e) => setTimezoneValue(e.target.value)}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t{ value: 'AWST', label: 'AWST' },\n\t\t\t\t\t\t\t{ value: 'ACWST', label: 'ACWST' },\n\t\t\t\t\t\t\t{ value: 'ACST', label: 'ACST' },\n\t\t\t\t\t\t\t{ value: 'AEST', label: 'AEST' },\n\t\t\t\t\t\t\t{ value: 'LHST', label: 'LHST' },\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tplaceholder=\"Please select\"\n\t\t\t\t\t\tvalue={timezoneValue}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</GroupedFields>\n\t);\n};\n```\n","data":{"title":"Ask users for dates and times","description":"When we ask for date, time or a combination of both, there are a range of components that can be used to meet user needs in different situations.","relatedComponents":["date-picker-next","date-range-picker-next","time-input","time-picker"]},"title":"Ask users for dates and times","description":"When we ask for date, time or a combination of both, there are a range of components that can be used to meet user needs in different situations.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["date-picker-next","date-range-picker-next","time-input","time-picker"],"relatedPatterns":null},"relatedComponents":[{"slug":"date-picker-next","name":"date-picker-next","title":"Date picker (Next)","description":"The Date picker component allows users to select a single date via a calendar or text input.","storybookPath":"/story/forms-datepickerNext-datepickerNext--basic","figmaGalleryNodeId":"12444%3A100327","subNavItems":[{"label":"Overview","href":"/components/date-picker-next","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker-next/docs/overview.mdx"},{"label":"Code","href":"/components/date-picker-next/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker-next/docs/code.mdx"},{"label":"Accessibility","href":"/components/date-picker-next/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker-next/docs/accessibility.mdx"}],"relatedComponents":["date-range-picker-next"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"date-range-picker-next","name":"date-range-picker-next","title":"Date range picker (Next)","description":"The Date range picker component allows users to select a range of dates via a calendar or text input.","storybookPath":"/story/forms-daterangepickerNext--basic","figmaGalleryNodeId":"18834%3A97298","subNavItems":[{"label":"Overview","href":"/components/date-range-picker-next","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker-next/docs/overview.mdx"},{"label":"Code","href":"/components/date-range-picker-next/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker-next/docs/code.mdx"},{"label":"Accessibility","href":"/components/date-range-picker-next/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker-next/docs/accessibility.mdx"}],"relatedComponents":["date-picker-next"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"time-input","name":"time-input","title":"Time input","description":"The Time input component allows users to enter a time in multiple formats.","storybookPath":"/story/Forms-TimeInput--basic","figmaGalleryNodeId":"20846:18895","subNavItems":[{"label":"Overview","href":"/components/time-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-input/docs/overview.mdx"},{"label":"Code","href":"/components/time-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-input/docs/code.mdx"},{"label":"Accessibility","href":"/components/time-input/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-input/docs/accessibility.mdx"}],"relatedComponents":["text-input","time-picker"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"time-picker","name":"time-picker","title":"Time picker","description":"The Time picker component allows users to easily select a time from a list of options.","storybookPath":"/story/Forms-TimePicker--basic","figmaGalleryNodeId":"21379:67824","subNavItems":[{"label":"Overview","href":"/components/time-picker","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-picker/docs/overview.mdx"},{"label":"Code","href":"/components/time-picker/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-picker/docs/code.mdx"},{"label":"Accessibility","href":"/components/time-picker/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-picker/docs/accessibility.mdx"}],"relatedComponents":["combobox","time-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false}],"relatedPatterns":null,"toc":[{"id":"time-input","title":"Time input","level":2,"slug":"time-input","items":[]},{"id":"time-picker","title":"Time picker","level":2,"slug":"time-picker","items":[]},{"id":"asking-for-specific-known-dates","title":"Asking for specific known dates","level":2,"slug":"asking-for-specific-known-dates","items":[]},{"id":"asking-for-approximate-dates","title":"Asking for approximate dates","level":2,"slug":"asking-for-approximate-dates","items":[]},{"id":"picking-dates","title":"Picking dates","level":2,"slug":"picking-dates","items":[]},{"id":"picking-date-ranges","title":"Picking date ranges","level":2,"slug":"picking-date-ranges","items":[]},{"id":"picking-a-date-and-time","title":"Picking a date and time","level":2,"slug":"picking-a-date-and-time","items":[]},{"id":"time-zones","title":"Time zones","level":2,"slug":"time-zones","items":[]},{"id":"related-components","items":[],"level":2,"slug":"related-components","title":"Related components"}]},"__N_SSG":true}