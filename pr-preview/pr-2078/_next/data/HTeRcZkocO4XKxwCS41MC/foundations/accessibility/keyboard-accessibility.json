{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/content","label":"Content"},{"label":"Keyboard accessibility"}],"description":"TODO PAGE DESC.","editPath":"/docs/content/foundations/accessibility/keyboard-accessibility.mdx","page":{"slug":"keyboard-accessibility","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Keyboard accessibility\\nMake all functionality available via keyboard. It's helpful for power users, but essential for people who use assistive technology.\\n[ in-page nav ]\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Keyboard accessibility in AgDS\\nWe consider keyboard accessibility throughout the design system in our components, patterns and documentation. This helps you get started with keyboard accessibility in your digital products and services.\\nThe keyboard accessibility of our components achieved full WCAG conformance in accessibility audits in 2022 and 2024. Implementation of AgDS keyboard accessible patterns are demonstrated in the yourGov application.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Requirements\\n•\\tUsers can navigate to and from any on-screen element using keyboard only.\\n•\\tAll interactive elements are focusable using the Tab key.\\n•\\tTab order must follow a logical sequence that matches visual layout.\\n•\\tKeyboard focus is always visible when navigating.\\n•\\tDocument custom keyboard shortcuts and ensure they don’t conflict with assistive technology.\\n•\\tCharacter-only shortcut keys can be turned off or remapped.\\n•\\tAll components with actions activate using Enter or Space keys, depending on the type component – follow implementation examples at Patterns – APG – WAI – W3C.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Benefits\\n•\\tEnables use by people who can’t use a mouse or touchscreen.\\n•\\tSupports limited dexterity users who rely on keyboard navigation.\\n•\\tImproves usability for screen reader users.\\n•\\tEnsures compatibility with a wide range of input devices.\\n•\\tIncreases efficiency for power users who prefer keyboard use.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WCAG references\\n•\\tUnderstanding success criterion 2.1.1 Keyboard\\n•\\tUnderstanding success criterion 2.1.2 No keyboard trap\\n•\\tUnderstanding success criterion 2.1.4 Character key shortcuts\\n•\\tUnderstanding success criterion 2.4.3 Focus order\\n•\\tUnderstanding success criterion 2.4.7 Focus visible\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"content":"Keyboard accessibility\nMake all functionality available via keyboard. It's helpful for power users, but essential for people who use assistive technology.\n[ in-page nav ]\n\nKeyboard accessibility in AgDS\nWe consider keyboard accessibility throughout the design system in our components, patterns and documentation. This helps you get started with keyboard accessibility in your digital products and services.\nThe keyboard accessibility of our components achieved full WCAG conformance in accessibility audits in 2022 and 2024. Implementation of AgDS keyboard accessible patterns are demonstrated in the yourGov application.\n\nRequirements \n•\tUsers can navigate to and from any on-screen element using keyboard only.\n•\tAll interactive elements are focusable using the Tab key.\n•\tTab order must follow a logical sequence that matches visual layout.\n•\tKeyboard focus is always visible when navigating.\n•\tDocument custom keyboard shortcuts and ensure they don’t conflict with assistive technology.\n•\tCharacter-only shortcut keys can be turned off or remapped.\n•\tAll components with actions activate using Enter or Space keys, depending on the type component – follow implementation examples at Patterns – APG – WAI – W3C.\n\nBenefits\n•\tEnables use by people who can’t use a mouse or touchscreen.\n•\tSupports limited dexterity users who rely on keyboard navigation.\n•\tImproves usability for screen reader users.\n•\tEnsures compatibility with a wide range of input devices.\n•\tIncreases efficiency for power users who prefer keyboard use.\n\nWCAG references\n•\tUnderstanding success criterion 2.1.1 Keyboard\n•\tUnderstanding success criterion 2.1.2 No keyboard trap\n•\tUnderstanding success criterion 2.1.4 Character key shortcuts\n•\tUnderstanding success criterion 2.4.3 Focus order\n•\tUnderstanding success criterion 2.4.7 Focus visible\n\n","data":{},"title":"keyboard-accessibility","description":null},"pageTitle":"Keyboard accessibility","toc":[]},"__N_SSG":true}