{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/content","label":"Content"},{"label":"ARIA and semantic code"}],"description":"TODO PAGE DESC.","editPath":"/docs/content/foundations/accessibility/aria-and-semantic-code.mdx","page":{"slug":"aria-and-semantic-code","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"ARIA and semantic code\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Accessible Rich Internet Application (ARIA) specification helps you to create accessible digital products and services.\\n[ in-page nav ]\\nARIA in AgDS\\nARIA has been used throughout AgDS to ensure that our components and design patterns are fully accessible to everyone. This means you can get started on building accessibility into your digital products and services right away.\\nThe ARIA usage in our components achieved full WCAG conformance in accessibility audits in 2022 and 2024.  Our implementation of ARIA is also demonstrated in the yourGov application.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"What is semantic markup?\\nSemantic markup means using HTML elements according to their intended meaning, structure and purpose, rather than just for visual styling.\\nUsing the correct semantic elements provides built-in accessibility, keyboard support, and screen reader compatibility. This also improves the readability and maintainability of your code.\\nIn addition to native HTML, AgDS provides a suite of components that apply semantic markup alongside appropriate visual styling, performance optimisations, and accessibility features.\\nWhat is ARIA?\\nARIA (Accessible Rich Internet Applications) is a set of HTML attributes that define roles, states, and properties to help make web content and applications more accessible. This is particularly important for people using assistive technologies like screen readers.\\nARIA roles describe what an element is – for example, \", _jsx(_components.code, {\n        children: \"role=\\\"combobox\\\"\"\n      }), \", \", _jsx(_components.code, {\n        children: \"role=\\\"dialog\\\"\"\n      }), \". This is important when that element doesn’t exist natively in HTML.\\nARIA states and properties describe the current state or behaviour of an element –for example,  \", _jsx(_components.code, {\n        children: \"aria-busy\"\n      }), \", \", _jsx(_components.code, {\n        children: \"aria-expanded\"\n      }), \", \", _jsx(_components.code, {\n        children: \"aria-invalid\"\n      }), \", \", _jsx(_components.code, {\n        children: \"aria-labelledby\"\n      }), \".\\nBefore using ARIA\\n“If you can use a native HTML element or attribute with the semantics and behaviour you require already built in, instead of re-purposing an element and adding an ARIA role, state or property to make it accessible, then do so.”\\nFrom Using ARIA – First rule of ARIA\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may also hear the phrase:\\n“No ARIA is better than bad ARIA.”\\nIn WebAim’s survey of over one million home pages, they found that pages using ARIA averaged 41% more detected accessibility errors than those without it. While ARIA is intended to improve accessibility, incorrect use can significantly worsen the user experience. This is especially true for people relying on assistive technologies.\\nRequirements\\n•\\tUse semantic HTML wherever possible – for example, \", _jsx(_components.code, {\n        children: \"<button>\"\n      }), \", \", _jsx(_components.code, {\n        children: \"<nav>\"\n      }), \", \", _jsx(_components.code, {\n        children: \"<header>\"\n      }), \", \", _jsx(_components.code, {\n        children: \"<ul>\"\n      }), \", \", _jsx(_components.code, {\n        children: \"<h1>\"\n      }), \".\\n•\\tOnly use ARIA when native HTML doesn't provide the semantics or behaviour needed.\\n•\\tDon’t override native semantics with ARIA roles – for example, avoid \", _jsx(_components.code, {\n        children: \"role=link\\\"\"\n      }), \" on a \", _jsx(_components.code, {\n        children: \"<button>\"\n      }), \".\\n•\\tUse \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"aria-labelledby\"\n      }), \" to provide accessible names for non-text or custom elements\\n•\\tUse \", _jsx(_components.code, {\n        children: \"aria-hidden=\\\"true\\\"\"\n      }), \" only to hide non-interactive elements from assistive tech.\\n•\\tUse ARIA state attributes like \", _jsx(_components.code, {\n        children: \"aria-expanded\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"aria-selected\"\n      }), \" to reflect UI state where needed.\\n•\\tEnsure interactive elements are focusable and support keyboard interaction.\\n•\\tFollow  WAI-ARIA Authoring Practices for any custom widgets.\\n•\\tTest with screen readers and keyboard navigation.\\nBenefits\\n•\\tImproves accessibility for users relying on assistive technologies.\\n•\\tProvides clearer structure and meaning to content.\\n•\\tReduces reliance on ARIA, which can be error-prone.\\n•\\tIncreases compatibility across browsers and devices.\\n•\\tMakes code easier to maintain and debug.\\n•\\tHelps our components “just work” without needing manual ARIA intervention.\\n•\\tEnsures consistent behaviour across different user agents.\\n•\\tContributes to meeting WCAG level AA requirements.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WCAG references\\n•\\tAccessible Rich Internet Applications (WAI-ARIA) 1.2\\n•\\tARIA Authoring Practices Guide\\n•\\tUsing ARIA – W3C\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"content":"ARIA and semantic code\n\nThe Accessible Rich Internet Application (ARIA) specification helps you to create accessible digital products and services.\n[ in-page nav ]\nARIA in AgDS \nARIA has been used throughout AgDS to ensure that our components and design patterns are fully accessible to everyone. This means you can get started on building accessibility into your digital products and services right away.\nThe ARIA usage in our components achieved full WCAG conformance in accessibility audits in 2022 and 2024.  Our implementation of ARIA is also demonstrated in the yourGov application.\n\nWhat is semantic markup?\nSemantic markup means using HTML elements according to their intended meaning, structure and purpose, rather than just for visual styling.\nUsing the correct semantic elements provides built-in accessibility, keyboard support, and screen reader compatibility. This also improves the readability and maintainability of your code.\nIn addition to native HTML, AgDS provides a suite of components that apply semantic markup alongside appropriate visual styling, performance optimisations, and accessibility features.\nWhat is ARIA?\nARIA (Accessible Rich Internet Applications) is a set of HTML attributes that define roles, states, and properties to help make web content and applications more accessible. This is particularly important for people using assistive technologies like screen readers.\nARIA roles describe what an element is – for example, `role=\"combobox\"`, `role=\"dialog\"`. This is important when that element doesn’t exist natively in HTML.\nARIA states and properties describe the current state or behaviour of an element –for example,  `aria-busy`, `aria-expanded`, `aria-invalid`, `aria-labelledby`.\nBefore using ARIA\n“If you can use a native HTML element or attribute with the semantics and behaviour you require already built in, instead of re-purposing an element and adding an ARIA role, state or property to make it accessible, then do so.”\nFrom Using ARIA – First rule of ARIA\n\nYou may also hear the phrase:\n“No ARIA is better than bad ARIA.”\nIn WebAim’s survey of over one million home pages, they found that pages using ARIA averaged 41% more detected accessibility errors than those without it. While ARIA is intended to improve accessibility, incorrect use can significantly worsen the user experience. This is especially true for people relying on assistive technologies.\nRequirements\n•\tUse semantic HTML wherever possible – for example, `<button>`, `<nav>`, `<header>`, `<ul>`, `<h1>`.\n•\tOnly use ARIA when native HTML doesn't provide the semantics or behaviour needed.\n•\tDon’t override native semantics with ARIA roles – for example, avoid `role=link\"` on a `<button>`.\n•\tUse `aria-label` or `aria-labelledby` to provide accessible names for non-text or custom elements\n•\tUse `aria-hidden=\"true\"` only to hide non-interactive elements from assistive tech.\n•\tUse ARIA state attributes like `aria-expanded` or `aria-selected` to reflect UI state where needed.\n•\tEnsure interactive elements are focusable and support keyboard interaction.\n•\tFollow  WAI-ARIA Authoring Practices for any custom widgets.\n•\tTest with screen readers and keyboard navigation.\nBenefits\n•\tImproves accessibility for users relying on assistive technologies.\n•\tProvides clearer structure and meaning to content.\n•\tReduces reliance on ARIA, which can be error-prone.\n•\tIncreases compatibility across browsers and devices.\n•\tMakes code easier to maintain and debug.\n•\tHelps our components “just work” without needing manual ARIA intervention.\n•\tEnsures consistent behaviour across different user agents.\n•\tContributes to meeting WCAG level AA requirements.\n\nWCAG references\n•\tAccessible Rich Internet Applications (WAI-ARIA) 1.2\n•\tARIA Authoring Practices Guide\n•\tUsing ARIA – W3C\n","data":{},"title":"aria-and-semantic-code","description":null},"pageTitle":"ARIA and semantic code","toc":[]},"__N_SSG":true}