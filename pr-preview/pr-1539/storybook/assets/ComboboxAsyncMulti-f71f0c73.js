import{j as O}from"./responsive-1d67a6a2.js";import{r as s}from"./index-42611d8b.js";import{a as l,u as t,b as k}from"./ComboboxMultiBase-1649accc.js";import{u as S,f as D}from"./ComboboxListItem-0acb222d.js";import{u as _}from"./useAsync-0e212593.js";function b({id:o,value:r,onChange:i,loadOptions:y,...g}){const d=S(o),[p,c]=s.useState(),[I,V]=s.useState([]),a=typeof r>"u"?I:r,u=s.useCallback(e=>{V(e),i==null||i(e)},[i]),w=l({selectedItems:a,onStateChange({selectedItems:e,type:n}){switch(n){case l.stateChangeTypes.SelectedItemKeyDownBackspace:case l.stateChangeTypes.SelectedItemKeyDownDelete:case l.stateChangeTypes.DropdownKeyDownBackspace:case l.stateChangeTypes.FunctionRemoveSelectedItem:u(e??[]);break}}}),{loading:v,networkError:q,inputItems:m,onInputValueChange:C,onIsOpenChange:x}=_(y),f=s.useMemo(()=>D(m??[],p,a),[m,p,a]),T=t({inputId:d,items:f,itemToString:e=>(e==null?void 0:e.label)??"",selectedItem:null,defaultHighlightedIndex:0,stateReducer(e,n){const{changes:h,type:M}=n;switch(M){case t.stateChangeTypes.InputKeyDownEnter:case t.stateChangeTypes.ItemClick:return{...h,inputValue:"",isOpen:!0};case t.stateChangeTypes.InputBlur:return{inputValue:""};default:return h}},onInputValueChange:e=>{c(e.inputValue??""),C(e)},onIsOpenChange:x,onStateChange({type:e,selectedItem:n}){switch(e){case t.stateChangeTypes.InputKeyDownEnter:case t.stateChangeTypes.ItemClick:case t.stateChangeTypes.InputBlur:n&&(u([...a,n]),c(""));break}}});return O(k,{combobox:T,multiSelection:w,inputId:d,inputItems:f,loading:v,networkError:q,selectedItems:a,setSelectedItems:u,clearable:!0,...g})}try{b.displayName="ComboboxAsyncMulti",b.__docgenInfo={description:"",displayName:"ComboboxAsyncMulti",props:{label:{defaultValue:null,description:"Describes the purpose of the field.",name:"label",required:!0,type:{name:"string"}},hideOptionalLabel:{defaultValue:null,description:'If true, "(optional)" will never be appended to the label.',name:"hideOptionalLabel",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:'If false, "(optional)" will be appended to the label.',name:"required",required:!1,type:{name:"boolean"}},hint:{defaultValue:null,description:"Provides extra information about the field.",name:"hint",required:!1,type:{name:"string"}},message:{defaultValue:null,description:"Message to show when the field is invalid.",name:"message",required:!1,type:{name:"string"}},invalid:{defaultValue:null,description:"If true, the invalid state will be rendered.",name:"invalid",required:!1,type:{name:"boolean"}},block:{defaultValue:null,description:"If true, the field will stretch to the fill the width of its container.",name:"block",required:!1,type:{name:"boolean"}},maxWidth:{defaultValue:null,description:"The maximum width of the field.",name:"maxWidth",required:!1,type:{name:"enum",value:[{value:'"md"'},{value:'"lg"'},{value:'"xl"'}]}},disabled:{defaultValue:null,description:"If true, the field will not be interactive.",name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Defines an identifier (ID) which must be unique.",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"A string specifying a name for the input control.",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the field.",name:"value",required:!1,type:{name:"Option[]"}},onChange:{defaultValue:null,description:"Function to be fired following a change event.",name:"onChange",required:!1,type:{name:"((value: Option[]) => void)"}},onFocus:{defaultValue:null,description:"Function to be fired following a focus event.",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"Function to be fired following a blur event.",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},loadOptions:{defaultValue:null,description:"Function to be used when options need to be loaded over the network.",name:"loadOptions",required:!0,type:{name:"(inputValue: string) => Promise<Option[]>"}},renderItem:{defaultValue:null,description:"Used to override the default item rendering.",name:"renderItem",required:!1,type:{name:"((item: Option, inputValue: string) => ReactNode)"}},emptyResultsMessage:{defaultValue:null,description:"Message to display when no options match the users search term.",name:"emptyResultsMessage",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Ref to the input element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement>"}}}}}catch{}export{b as C};
