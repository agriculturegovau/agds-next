import{j as v}from"./responsive-1d67a6a2.js";import{r as u}from"./index-42611d8b.js";import{a as i,u as t,b as C}from"./ComboboxMultiBase-1649accc.js";import{u as x,f as T}from"./ComboboxListItem-0acb222d.js";function b({id:d,value:p,onChange:s,options:m,...y}){const[o,c]=u.useState(""),f=x(d),[g,I]=u.useState([]),a=typeof p>"u"?g:p,r=u.useCallback(e=>{I(e),s==null||s(e)},[s]),h=u.useMemo(()=>T(m,o,a),[m,o,a]),w=i({selectedItems:a,onStateChange({selectedItems:e,type:n}){switch(n){case i.stateChangeTypes.SelectedItemKeyDownBackspace:case i.stateChangeTypes.SelectedItemKeyDownDelete:case i.stateChangeTypes.DropdownKeyDownBackspace:case i.stateChangeTypes.FunctionRemoveSelectedItem:r(e??[]);break}}}),V=t({inputValue:o,inputId:f,items:h??[],itemToString:e=>(e==null?void 0:e.label)??"",defaultHighlightedIndex:0,selectedItem:null,stateReducer(e,n){const{changes:l,type:q}=n;switch(q){case t.stateChangeTypes.InputKeyDownEnter:case t.stateChangeTypes.ItemClick:return{...l,isOpen:!0,highlightedIndex:0};default:return l}},onStateChange({inputValue:e="",type:n,selectedItem:l}){switch(n){case t.stateChangeTypes.InputKeyDownEnter:case t.stateChangeTypes.ItemClick:case t.stateChangeTypes.InputBlur:l&&(r([...a,l]),c(""));break;case t.stateChangeTypes.InputChange:c(e);break}}});return v(C,{combobox:V,multiSelection:w,inputItems:h,inputId:f,selectedItems:a,setSelectedItems:r,...y})}try{b.displayName="ComboboxMulti",b.__docgenInfo={description:"",displayName:"ComboboxMulti",props:{label:{defaultValue:null,description:"Describes the purpose of the field.",name:"label",required:!0,type:{name:"string"}},hideOptionalLabel:{defaultValue:null,description:'If true, "(optional)" will never be appended to the label.',name:"hideOptionalLabel",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:'If false, "(optional)" will be appended to the label.',name:"required",required:!1,type:{name:"boolean"}},hint:{defaultValue:null,description:"Provides extra information about the field.",name:"hint",required:!1,type:{name:"string"}},message:{defaultValue:null,description:"Message to show when the field is invalid.",name:"message",required:!1,type:{name:"string"}},invalid:{defaultValue:null,description:"If true, the invalid state will be rendered.",name:"invalid",required:!1,type:{name:"boolean"}},block:{defaultValue:null,description:"If true, the field will stretch to the fill the width of its container.",name:"block",required:!1,type:{name:"boolean"}},maxWidth:{defaultValue:null,description:"The maximum width of the field.",name:"maxWidth",required:!1,type:{name:"enum",value:[{value:'"md"'},{value:'"lg"'},{value:'"xl"'}]}},disabled:{defaultValue:null,description:"If true, the field will not be interactive.",name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Defines an identifier (ID) which must be unique.",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"A string specifying a name for the input control.",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the field.",name:"value",required:!1,type:{name:"Option[]"}},onChange:{defaultValue:null,description:"Function to be fired following a change event.",name:"onChange",required:!1,type:{name:"((value: Option[]) => void)"}},onFocus:{defaultValue:null,description:"Function to be fired following a focus event.",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"Function to be fired following a blur event.",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"The list of options to show in the dropdown.",name:"options",required:!0,type:{name:"Option[]"}},renderItem:{defaultValue:null,description:"Used to override the default item rendering.",name:"renderItem",required:!1,type:{name:"((item: Option, inputValue: string) => ReactNode)"}},emptyResultsMessage:{defaultValue:null,description:"Message to display when no options match the users search term.",name:"emptyResultsMessage",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Ref to the input element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement>"}}}}}catch{}export{b as C};
