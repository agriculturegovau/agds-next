import{j as I}from"./responsive-1d67a6a2.js";import{r as d}from"./index-42611d8b.js";import{u as f,C as q}from"./ComboboxMultiBase-1649accc.js";import{u as v,f as p}from"./ComboboxListItem-0acb222d.js";function m({id:i,value:c,onChange:l,options:t,inputRef:b,...h}){const o=v(i),[r,n]=d.useState(t);d.useEffect(()=>{n(t)},[t]);const y=f({items:r,selectedItem:c,inputId:o,itemToString:e=>(e==null?void 0:e.label)??"",onSelectedItemChange:({selectedItem:e=null})=>{l==null||l(e)},onInputValueChange:({inputValue:e,isOpen:a})=>{e=(e==null?void 0:e.toLowerCase())??"",n(a?p(t,e):p(t,""))},stateReducer:(e,a)=>{var s;const{type:g,changes:u}=a;switch(g){case f.stateChangeTypes.InputBlur:return{...u,inputValue:((s=e.selectedItem)==null?void 0:s.label)??""};default:return u}}});return I(q,{combobox:y,inputItems:r,inputId:o,inputRef:b,isAutocomplete:!1,...h})}try{m.displayName="Combobox",m.__docgenInfo={description:"",displayName:"Combobox",props:{label:{defaultValue:null,description:"Describes the purpose of the field.",name:"label",required:!0,type:{name:"string"}},hideOptionalLabel:{defaultValue:null,description:'If true, "(optional)" will never be appended to the label.',name:"hideOptionalLabel",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:'If false, "(optional)" will be appended to the label.',name:"required",required:!1,type:{name:"boolean"}},hint:{defaultValue:null,description:"Provides extra information about the field.",name:"hint",required:!1,type:{name:"string"}},message:{defaultValue:null,description:"Message to show when the field is invalid.",name:"message",required:!1,type:{name:"string"}},invalid:{defaultValue:null,description:"If true, the invalid state will be rendered.",name:"invalid",required:!1,type:{name:"boolean"}},block:{defaultValue:null,description:"If true, the field will stretch to the fill the width of its container.",name:"block",required:!1,type:{name:"boolean"}},maxWidth:{defaultValue:null,description:"The maximum width of the field.",name:"maxWidth",required:!1,type:{name:"enum",value:[{value:'"md"'},{value:'"lg"'},{value:'"xl"'}]}},disabled:{defaultValue:null,description:"If true, the field will not be interactive.",name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Defines an identifier (ID) which must be unique.",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"A string specifying a name for the input control.",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the field.",name:"value",required:!1,type:{name:"DefaultComboboxOption | null"}},onChange:{defaultValue:null,description:"Function to be fired following a change event.",name:"onChange",required:!1,type:{name:"((value: Option | null) => void)"}},onFocus:{defaultValue:null,description:"Function to be fired following a focus event.",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"Function to be fired following a blur event.",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"The list of options to show in the dropdown.",name:"options",required:!0,type:{name:"Option[]"}},emptyResultsMessage:{defaultValue:null,description:"Message to display when no options match the users search term.",name:"emptyResultsMessage",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Ref to the input element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},renderItem:{defaultValue:null,description:"Used to override the default item rendering.",name:"renderItem",required:!1,type:{name:"((item: Option, inputValue: string) => ReactNode)"}},clearable:{defaultValue:null,description:"If true, the clear button will be rendered when there is a selected option.",name:"clearable",required:!1,type:{name:"boolean"}}}}}catch{}export{m as C};
