import{j as C}from"./responsive-1d67a6a2.js";import{u as t,C as O}from"./ComboboxMultiBase-1649accc.js";import{u as T}from"./ComboboxListItem-0acb222d.js";import{u as F}from"./useAsync-0e212593.js";function p({id:i,value:f,onChange:l,loadOptions:m,clearable:c=!1,showDropdownTrigger:o=!0,inputRef:h,...b}){const u=T(i),a=!o,{loading:g,networkError:y,inputItems:r,onInputValueChange:w,onIsOpenChange:I}=F(m),V=t({selectedItem:f,inputId:u,items:r,defaultHighlightedIndex:0,itemToString:e=>(e==null?void 0:e.label)??"",onInputValueChange:w,onIsOpenChange:I,onSelectedItemChange:({selectedItem:e=null})=>{l==null||l(e)},stateReducer:(e,q)=>{var s,d;const{type:v,changes:n}=q,x=(((s=n.inputValue)==null?void 0:s.length)??0)>0;switch(v){case t.stateChangeTypes.InputBlur:return{...n,inputValue:((d=e.selectedItem)==null?void 0:d.label)??""};case t.stateChangeTypes.InputClick:return a?{...n,isOpen:!1}:n;case t.stateChangeTypes.InputChange:return a?{...n,isOpen:x}:n;default:return n}}});return C(O,{combobox:V,inputId:u,loading:g,networkError:y,inputItems:r,showDropdownTrigger:o,clearable:c,inputRef:h,isAutocomplete:a,...b})}try{p.displayName="ComboboxAsync",p.__docgenInfo={description:"",displayName:"ComboboxAsync",props:{label:{defaultValue:null,description:"Describes the purpose of the field.",name:"label",required:!0,type:{name:"string"}},hideOptionalLabel:{defaultValue:null,description:'If true, "(optional)" will never be appended to the label.',name:"hideOptionalLabel",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:'If false, "(optional)" will be appended to the label.',name:"required",required:!1,type:{name:"boolean"}},hint:{defaultValue:null,description:"Provides extra information about the field.",name:"hint",required:!1,type:{name:"string"}},message:{defaultValue:null,description:"Message to show when the field is invalid.",name:"message",required:!1,type:{name:"string"}},invalid:{defaultValue:null,description:"If true, the invalid state will be rendered.",name:"invalid",required:!1,type:{name:"boolean"}},block:{defaultValue:null,description:"If true, the field will stretch to the fill the width of its container.",name:"block",required:!1,type:{name:"boolean"}},maxWidth:{defaultValue:null,description:"The maximum width of the field.",name:"maxWidth",required:!1,type:{name:"enum",value:[{value:'"md"'},{value:'"lg"'},{value:'"xl"'}]}},disabled:{defaultValue:null,description:"If true, the field will not be interactive.",name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Defines an identifier (ID) which must be unique.",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"A string specifying a name for the input control.",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the field.",name:"value",required:!1,type:{name:"DefaultComboboxOption | null"}},onChange:{defaultValue:null,description:"Function to be fired following a change event.",name:"onChange",required:!1,type:{name:"((value: Option | null) => void)"}},onFocus:{defaultValue:null,description:"Function to be fired following a focus event.",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"Function to be fired following a blur event.",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},loadOptions:{defaultValue:null,description:"Function to be used when options need to be loaded over the network.",name:"loadOptions",required:!0,type:{name:"(inputValue: string) => Promise<Option[]>"}},renderItem:{defaultValue:null,description:"Used to override the default item rendering.",name:"renderItem",required:!1,type:{name:"((item: Option, inputValue: string) => ReactNode)"}},emptyResultsMessage:{defaultValue:null,description:"Message to display when no options match the users search term.",name:"emptyResultsMessage",required:!1,type:{name:"string"}},clearable:{defaultValue:{value:"false"},description:"If true, the clear button will be rendered when there is a selected option.",name:"clearable",required:!1,type:{name:"boolean"}},openDropdownOnFocus:{defaultValue:null,description:"@deprecated This prop is no longer being used. When true, the dropdown will open when the user focuses on the element",name:"openDropdownOnFocus",required:!1,type:{name:"boolean"}},showDropdownTrigger:{defaultValue:{value:"true"},description:"If true, the dropdown trigger will be rendered.",name:"showDropdownTrigger",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"Ref to the input element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}}}}}catch{}export{p as C};
