{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Multi-task form"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"multi-task-form","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading, ImageWithBorder} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  if (!ImageWithBorder) _missingMdxReference(\"ImageWithBorder\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"allow users to navigate to any task\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use only for longer transactions involving multiple tasks that may take several sessions to complete\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for tasks that are single page and multi-page forms\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use to break up long and complicated form processes\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for processes of 2 - 10 steps\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use for fewer than 2 tasks\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"disable tasks - allow users to navigate to pages and use page alerts to indicate a task is not available yet\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"mix with other navigation patterns - for example, \", _jsx(_components.a, {\n          href: \"/components/side-nav\",\n          children: \"Side nav\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"change labels or icons\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Structure\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.a, {\n          href: \"/components/task-list\",\n          children: \"task list component\"\n        }), \" to display a list of tasks.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Create tasks using \", _jsx(_components.a, {\n          href: \"/templates/single-page-form\",\n          children: \"single-page\"\n        }), \" or \", _jsx(_components.a, {\n          href: \"/templates/multi-page-form\",\n          children: \"multi-page\"\n        }), \" forms.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Include a ‘confirm and submit’ task at the end to allow users to review their form inputs.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Task list\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once you’ve broken up your form into logical tasks, use the task list component to display the list of tasks.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The task list supports sequential or non-sequential completion of a form.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Sequential\"\n        }), \" - If tasks need to be completed in order, one after the other, use the sequential variant of task list. This variant numbers each task to help indicate that tasks need to be completed in order, starting with task 1.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Non-sequential\"\n        }), \" - If a form can be completed in any order, use the non-sequential variant of task list seen below. This gives users the flexibility of completing tasks as they please. If they’re not ready or able to complete a certain task, they can move onto another one without getting blocked.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [isModalOpen, openModal, closeModal] = useTernaryState(false);\\n\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t<Flex gap={3} flexDirection=\\\"column\\\">\\n\\t\\t\\t\\t<TaskList\\n\\t\\t\\t\\t\\titems={[\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\thref: '#',\\n\\t\\t\\t\\t\\t\\t\\tlabel: 'Personal details',\\n\\t\\t\\t\\t\\t\\t\\tstatus: 'done',\\n\\t\\t\\t\\t\\t\\t\\tmessage: 'Short description of the task',\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\thref: '#',\\n\\t\\t\\t\\t\\t\\t\\tlabel: 'Address details',\\n\\t\\t\\t\\t\\t\\t\\tstatus: 'doing',\\n\\t\\t\\t\\t\\t\\t\\tmessage: 'Short description of the task',\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\thref: '#',\\n\\t\\t\\t\\t\\t\\t\\tlabel: 'Upload files',\\n\\t\\t\\t\\t\\t\\t\\tstatus: 'todo',\\n\\t\\t\\t\\t\\t\\t\\tmessage: 'Short description of the task',\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\thref: '#',\\n\\t\\t\\t\\t\\t\\t\\tlabel: 'Confirm and submit',\\n\\t\\t\\t\\t\\t\\t\\tstatus: 'todo',\\n\\t\\t\\t\\t\\t\\t\\tmessage: 'Short description of the task',\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<Flex gap={1}>\\n\\t\\t\\t\\t\\t<Button onClick={() => {}} variant=\\\"secondary\\\">\\n\\t\\t\\t\\t\\t\\tSave and exit\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button onClick={openModal} variant=\\\"tertiary\\\">\\n\\t\\t\\t\\t\\t\\tCancel\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t</Flex>\\n\\t\\t\\t</Flex>\\n\\t\\t\\t<Modal\\n\\t\\t\\t\\tisOpen={isModalOpen}\\n\\t\\t\\t\\tonClose={closeModal}\\n\\t\\t\\t\\ttitle=\\\"Discard form?\\\"\\n\\t\\t\\t\\tactions={\\n\\t\\t\\t\\t\\t<ButtonGroup>\\n\\t\\t\\t\\t\\t\\t<Button onClick={closeModal}>Discard form</Button>\\n\\t\\t\\t\\t\\t\\t<Button variant=\\\"secondary\\\" onClick={closeModal}>\\n\\t\\t\\t\\t\\t\\t\\tSave and exit\\n\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t\\t}\\n\\t\\t\\t>\\n\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\tYou will lose all information you’ve entered. This can’t be undone.\\n\\t\\t\\t\\t\\tAlternatively, you can save your form progress and complete it later.\\n\\t\\t\\t\\t</Text>\\n\\t\\t\\t</Modal>\\n\\t\\t</>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Include 2 actions below the task list:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Save and exit\"\n        }), \" - Allows users to leave the form and save their progress. Form inputs should be saved on exit without validating them. Make sure the user can come back to continue their form at a later time. The user should land on the task list when they come back to continue their form. This helps them understand where they are up to in the process.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Cancel\"\n        }), \" - Allows users to discard the form. If they have entered any information, make sure you trigger a destructive modal dialog (seen below) to let users know that they will lose their progress.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/task-list-destructive-dialog.png\",\n      alt: \"Destructive modal dialog\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Task management\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each task in a multi-task form can either be a \", _jsx(_components.a, {\n        href: \"/templates/single-page-form\",\n        children: \"single page form\"\n      }), \" or a \", _jsx(_components.a, {\n        href: \"/templates/multi-page-form\",\n        children: \"multi-page form\"\n      }), \". Make sure you refer to the guidelines for each template before using it.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Completed tasks\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once a task has been completed, return users to the task list and set the task status to completed.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Leaving a partially completed task\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a user leaves a task partially completed by pressing ‘save and exit’, save their progress and return them to the task list. Set the task status to ‘in progress’, so they can come back to this task at a later time.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Returning to a partially completed task\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a user presses on a task that’s ‘in progress’, return them to where they left off and display a callout at the top of the page to let them know that this is where they got to previously. See example below.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"() => {\\n\\tconst [showContinueAlert, setContinueAlert] = useState(true);\\n\\tconst FORM_STEPS = [\\n\\t\\t{\\n\\t\\t\\tlabel: 'Contact details',\\n\\t\\t\\tstatus: 'done',\\n\\t\\t\\thref: '#contact-details',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tlabel: 'Address',\\n\\t\\t\\tstatus: 'started',\\n\\t\\t\\thref: '#address',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tlabel: 'Upload files',\\n\\t\\t\\tstatus: 'todo',\\n\\t\\t\\thref: '#upload-files',\\n\\t\\t},\\n\\t];\\n\\n\\treturn (\\n\\t\\t<Columns>\\n\\t\\t\\t<Column columnSpan={{ xs: 12, md: 4, lg: 3 }}>\\n\\t\\t\\t\\t<ContentBleed visible={{ md: false }}>\\n\\t\\t\\t\\t\\t<ProgressIndicator activePath=\\\"#address\\\" items={FORM_STEPS} />\\n\\t\\t\\t\\t</ContentBleed>\\n\\t\\t\\t</Column>\\n\\t\\t\\t<Column columnSpan={{ xs: 12, md: 8 }} columnStart={{ lg: 5 }}>\\n\\t\\t\\t\\t<Stack gap={3} alignItems=\\\"flex-start\\\">\\n\\t\\t\\t\\t\\t<DirectionButton direction=\\\"left\\\" onClick={() => {}}>\\n\\t\\t\\t\\t\\t\\tBack\\n\\t\\t\\t\\t\\t</DirectionButton>\\n\\n\\t\\t\\t\\t\\t{showContinueAlert && (\\n\\t\\t\\t\\t\\t\\t<PageAlert\\n\\t\\t\\t\\t\\t\\t\\ttone=\\\"info\\\"\\n\\t\\t\\t\\t\\t\\t\\ttitle=\\\"Continue from where you left off\\\"\\n\\t\\t\\t\\t\\t\\t\\tonClose={() => setContinueAlert(false)}\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\tWe’ve saved your progress so you can continue from here.\\n\\t\\t\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t\\t</PageAlert>\\n\\t\\t\\t\\t\\t)}\\n\\n\\t\\t\\t\\t\\t<Stack as=\\\"form\\\" gap={3} onSubmit={() => {}} noValidate>\\n\\t\\t\\t\\t\\t\\t<Stack gap={2}>\\n\\t\\t\\t\\t\\t\\t\\t<H1\\n\\t\\t\\t\\t\\t\\t\\t\\ttabIndex={-1}\\n\\t\\t\\t\\t\\t\\t\\t\\tfocusRingFor=\\\"keyboard\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\taria-label=\\\"Application form, Address\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Text\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdisplay=\\\"block\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfontSize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcolor=\\\"muted\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfontWeight=\\\"bold\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlineHeight=\\\"heading\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tApplication form\\n\\t\\t\\t\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t\\t\\t\\tAddress\\n\\t\\t\\t\\t\\t\\t\\t</H1>\\n\\t\\t\\t\\t\\t\\t\\t<Text as=\\\"p\\\" fontSize=\\\"md\\\" color=\\\"muted\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\tWhere can we send the package?\\n\\t\\t\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t\\t</Stack>\\n\\t\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\t\\tlabel=\\\"Street address line 1\\\"\\n\\t\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\t\\tmaxWidth=\\\"lg\\\"\\n\\t\\t\\t\\t\\t\\t\\tautoComplete=\\\"address-line1\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\t\\tlabel=\\\"Street address line 2\\\"\\n\\t\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\t\\tmaxWidth=\\\"lg\\\"\\n\\t\\t\\t\\t\\t\\t\\tautoComplete=\\\"address-line2\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\t\\tlabel=\\\"Suburb, town or city\\\"\\n\\t\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\t\\tautoComplete=\\\"address-level2\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\t\\t\\tlabel=\\\"State or territory\\\"\\n\\t\\t\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t\\t\\t{ value: 'act', label: 'ACT' },\\n\\t\\t\\t\\t\\t\\t\\t\\t{ value: 'nsw', label: 'NSW' },\\n\\t\\t\\t\\t\\t\\t\\t\\t{ value: 'vic', label: 'VIC' },\\n\\t\\t\\t\\t\\t\\t\\t\\t{ value: 'wa', label: 'WA' },\\n\\t\\t\\t\\t\\t\\t\\t\\t{ value: 'nt', label: 'NT' },\\n\\t\\t\\t\\t\\t\\t\\t\\t{ value: 'sa', label: 'SA' },\\n\\t\\t\\t\\t\\t\\t\\t\\t{ value: 'tas', label: 'TAS' },\\n\\t\\t\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\t\\t\\tautoComplete=\\\"address-level1\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\t\\tlabel=\\\"Postcode\\\"\\n\\t\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\t\\tmaxWidth=\\\"xs\\\"\\n\\t\\t\\t\\t\\t\\t\\tautoComplete=\\\"postal-code\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\n\\t\\t\\t\\t\\t\\t<Stack gap={3}>\\n\\t\\t\\t\\t\\t\\t\\t<Divider />\\n\\t\\t\\t\\t\\t\\t\\t<ButtonGroup>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button type=\\\"submit\\\" variant=\\\"primary\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tSave and continue\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button type=\\\"button\\\" variant=\\\"secondary\\\" onClick={() => {}}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tSave and exit\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button type=\\\"button\\\" variant=\\\"tertiary\\\" onClick={() => {}}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tCancel\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t\\t\\t\\t</Stack>\\n\\t\\t\\t\\t\\t</Stack>\\n\\t\\t\\t\\t</Stack>\\n\\t\\t\\t</Column>\\n\\t\\t</Columns>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Cancelled tasks\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a user starts a task and presses the ‘cancel’ button or back link, discard the task. Make sure you trigger a modal dialog to let users know that they will lose their progress for that task. If they accept losing their progress, return them to the task list and set the task status to ‘not started’.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid tasks\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a user tries to submit a form or continue to the next step and forgets to complete a required field, or inputs an invalid value, the form should trigger an error alert. The user won’t be able to continue or submit that task until the invalid error is fixed.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more detail on form validation, check out \", _jsx(_components.a, {\n        href: \"/patterns/accessible-form-validation-and-recovery\",\n        children: \"accessible form validation and error recovery\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Multi-task form","description":"Use this pattern to break up large forms into multiple smaller tasks to decrease cognitive load.","relatedComponents":["task-list"]}},"content":"\n<DoHeading />\n\n- allow users to navigate to any task\n- use only for longer transactions involving multiple tasks that may take several sessions to complete\n- use for tasks that are single page and multi-page forms\n- use to break up long and complicated form processes\n- use for processes of 2 - 10 steps\n\n<DontHeading />\n\n- use for fewer than 2 tasks\n- disable tasks - allow users to navigate to pages and use page alerts to indicate a task is not available yet\n- mix with other navigation patterns - for example, [Side nav](/components/side-nav)\n- change labels or icons\n\n## Structure\n\n- Use the [task list component](/components/task-list) to display a list of tasks.\n- Create tasks using [single-page](/templates/single-page-form) or [multi-page](/templates/multi-page-form) forms.\n- Include a ‘confirm and submit’ task at the end to allow users to review their form inputs.\n\n## Task list\n\nOnce you’ve broken up your form into logical tasks, use the task list component to display the list of tasks.\n\nThe task list supports sequential or non-sequential completion of a form.\n\n- **Sequential** - If tasks need to be completed in order, one after the other, use the sequential variant of task list. This variant numbers each task to help indicate that tasks need to be completed in order, starting with task 1.\n- **Non-sequential** - If a form can be completed in any order, use the non-sequential variant of task list seen below. This gives users the flexibility of completing tasks as they please. If they’re not ready or able to complete a certain task, they can move onto another one without getting blocked.\n\n```jsx live\n() => {\n\tconst [isModalOpen, openModal, closeModal] = useTernaryState(false);\n\n\treturn (\n\t\t<>\n\t\t\t<Flex gap={3} flexDirection=\"column\">\n\t\t\t\t<TaskList\n\t\t\t\t\titems={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thref: '#',\n\t\t\t\t\t\t\tlabel: 'Personal details',\n\t\t\t\t\t\t\tstatus: 'done',\n\t\t\t\t\t\t\tmessage: 'Short description of the task',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thref: '#',\n\t\t\t\t\t\t\tlabel: 'Address details',\n\t\t\t\t\t\t\tstatus: 'doing',\n\t\t\t\t\t\t\tmessage: 'Short description of the task',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thref: '#',\n\t\t\t\t\t\t\tlabel: 'Upload files',\n\t\t\t\t\t\t\tstatus: 'todo',\n\t\t\t\t\t\t\tmessage: 'Short description of the task',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thref: '#',\n\t\t\t\t\t\t\tlabel: 'Confirm and submit',\n\t\t\t\t\t\t\tstatus: 'todo',\n\t\t\t\t\t\t\tmessage: 'Short description of the task',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<Flex gap={1}>\n\t\t\t\t\t<Button onClick={() => {}} variant=\"secondary\">\n\t\t\t\t\t\tSave and exit\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={openModal} variant=\"tertiary\">\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t</Flex>\n\t\t\t</Flex>\n\t\t\t<Modal\n\t\t\t\tisOpen={isModalOpen}\n\t\t\t\tonClose={closeModal}\n\t\t\t\ttitle=\"Discard form?\"\n\t\t\t\tactions={\n\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t<Button onClick={closeModal}>Discard form</Button>\n\t\t\t\t\t\t<Button variant=\"secondary\" onClick={closeModal}>\n\t\t\t\t\t\t\tSave and exit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<Text as=\"p\">\n\t\t\t\t\tYou will lose all information you’ve entered. This can’t be undone.\n\t\t\t\t\tAlternatively, you can save your form progress and complete it later.\n\t\t\t\t</Text>\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n```\n\nInclude 2 actions below the task list:\n\n- **Save and exit** - Allows users to leave the form and save their progress. Form inputs should be saved on exit without validating them. Make sure the user can come back to continue their form at a later time. The user should land on the task list when they come back to continue their form. This helps them understand where they are up to in the process.\n- **Cancel** - Allows users to discard the form. If they have entered any information, make sure you trigger a destructive modal dialog (seen below) to let users know that they will lose their progress.\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/task-list-destructive-dialog.png\"\n\talt=\"Destructive modal dialog\"\n/>\n\n## Task management\n\nEach task in a multi-task form can either be a [single page form](/templates/single-page-form) or a [multi-page form](/templates/multi-page-form). Make sure you refer to the guidelines for each template before using it.\n\n## Completed tasks\n\nOnce a task has been completed, return users to the task list and set the task status to completed.\n\n## Leaving a partially completed task\n\nIf a user leaves a task partially completed by pressing ‘save and exit’, save their progress and return them to the task list. Set the task status to ‘in progress’, so they can come back to this task at a later time.\n\n## Returning to a partially completed task\n\nIf a user presses on a task that’s ‘in progress’, return them to where they left off and display a callout at the top of the page to let them know that this is where they got to previously. See example below.\n\n```tsx live\n() => {\n\tconst [showContinueAlert, setContinueAlert] = useState(true);\n\tconst FORM_STEPS = [\n\t\t{\n\t\t\tlabel: 'Contact details',\n\t\t\tstatus: 'done',\n\t\t\thref: '#contact-details',\n\t\t},\n\t\t{\n\t\t\tlabel: 'Address',\n\t\t\tstatus: 'started',\n\t\t\thref: '#address',\n\t\t},\n\t\t{\n\t\t\tlabel: 'Upload files',\n\t\t\tstatus: 'todo',\n\t\t\thref: '#upload-files',\n\t\t},\n\t];\n\n\treturn (\n\t\t<Columns>\n\t\t\t<Column columnSpan={{ xs: 12, md: 4, lg: 3 }}>\n\t\t\t\t<ContentBleed visible={{ md: false }}>\n\t\t\t\t\t<ProgressIndicator activePath=\"#address\" items={FORM_STEPS} />\n\t\t\t\t</ContentBleed>\n\t\t\t</Column>\n\t\t\t<Column columnSpan={{ xs: 12, md: 8 }} columnStart={{ lg: 5 }}>\n\t\t\t\t<Stack gap={3} alignItems=\"flex-start\">\n\t\t\t\t\t<DirectionButton direction=\"left\" onClick={() => {}}>\n\t\t\t\t\t\tBack\n\t\t\t\t\t</DirectionButton>\n\n\t\t\t\t\t{showContinueAlert && (\n\t\t\t\t\t\t<PageAlert\n\t\t\t\t\t\t\ttone=\"info\"\n\t\t\t\t\t\t\ttitle=\"Continue from where you left off\"\n\t\t\t\t\t\t\tonClose={() => setContinueAlert(false)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\t\t\tWe’ve saved your progress so you can continue from here.\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</PageAlert>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<Stack as=\"form\" gap={3} onSubmit={() => {}} noValidate>\n\t\t\t\t\t\t<Stack gap={2}>\n\t\t\t\t\t\t\t<H1\n\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\tfocusRingFor=\"keyboard\"\n\t\t\t\t\t\t\t\taria-label=\"Application form, Address\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\tdisplay=\"block\"\n\t\t\t\t\t\t\t\t\tfontSize=\"sm\"\n\t\t\t\t\t\t\t\t\tcolor=\"muted\"\n\t\t\t\t\t\t\t\t\tfontWeight=\"bold\"\n\t\t\t\t\t\t\t\t\tlineHeight=\"heading\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tApplication form\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\tAddress\n\t\t\t\t\t\t\t</H1>\n\t\t\t\t\t\t\t<Text as=\"p\" fontSize=\"md\" color=\"muted\">\n\t\t\t\t\t\t\t\tWhere can we send the package?\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Stack>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tlabel=\"Street address line 1\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\tmaxWidth=\"lg\"\n\t\t\t\t\t\t\tautoComplete=\"address-line1\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tlabel=\"Street address line 2\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\tmaxWidth=\"lg\"\n\t\t\t\t\t\t\tautoComplete=\"address-line2\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tlabel=\"Suburb, town or city\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\tautoComplete=\"address-level2\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tlabel=\"State or territory\"\n\t\t\t\t\t\t\tmaxWidth=\"sm\"\n\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t{ value: 'act', label: 'ACT' },\n\t\t\t\t\t\t\t\t{ value: 'nsw', label: 'NSW' },\n\t\t\t\t\t\t\t\t{ value: 'vic', label: 'VIC' },\n\t\t\t\t\t\t\t\t{ value: 'wa', label: 'WA' },\n\t\t\t\t\t\t\t\t{ value: 'nt', label: 'NT' },\n\t\t\t\t\t\t\t\t{ value: 'sa', label: 'SA' },\n\t\t\t\t\t\t\t\t{ value: 'tas', label: 'TAS' },\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tautoComplete=\"address-level1\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tlabel=\"Postcode\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\tmaxWidth=\"xs\"\n\t\t\t\t\t\t\tautoComplete=\"postal-code\"\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Stack gap={3}>\n\t\t\t\t\t\t\t<Divider />\n\t\t\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t\t\t<Button type=\"submit\" variant=\"primary\">\n\t\t\t\t\t\t\t\t\tSave and continue\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button type=\"button\" variant=\"secondary\" onClick={() => {}}>\n\t\t\t\t\t\t\t\t\tSave and exit\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button type=\"button\" variant=\"tertiary\" onClick={() => {}}>\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t</Stack>\n\t\t\t\t\t</Stack>\n\t\t\t\t</Stack>\n\t\t\t</Column>\n\t\t</Columns>\n\t);\n};\n```\n\n## Cancelled tasks\n\nIf a user starts a task and presses the ‘cancel’ button or back link, discard the task. Make sure you trigger a modal dialog to let users know that they will lose their progress for that task. If they accept losing their progress, return them to the task list and set the task status to ‘not started’.\n\n## Invalid tasks\n\nIf a user tries to submit a form or continue to the next step and forgets to complete a required field, or inputs an invalid value, the form should trigger an error alert. The user won’t be able to continue or submit that task until the invalid error is fixed.\n\nFor more detail on form validation, check out [accessible form validation and error recovery](/patterns/accessible-form-validation-and-recovery).\n","data":{"title":"Multi-task form","description":"Use this pattern to break up large forms into multiple smaller tasks to decrease cognitive load.","relatedComponents":["task-list"]},"title":"Multi-task form","description":"Use this pattern to break up large forms into multiple smaller tasks to decrease cognitive load.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["task-list"]},"toc":[{"id":"structure","title":"Structure","level":2,"slug":"structure","items":[]},{"id":"task-list","title":"Task list","level":2,"slug":"task-list","items":[]},{"id":"task-management","title":"Task management","level":2,"slug":"task-management","items":[]},{"id":"completed-tasks","title":"Completed tasks","level":2,"slug":"completed-tasks","items":[]},{"id":"leaving-a-partially-completed-task","title":"Leaving a partially completed task","level":2,"slug":"leaving-a-partially-completed-task","items":[]},{"id":"returning-to-a-partially-completed-task","title":"Returning to a partially completed task","level":2,"slug":"returning-to-a-partially-completed-task","items":[]},{"id":"cancelled-tasks","title":"Cancelled tasks","level":2,"slug":"cancelled-tasks","items":[]},{"id":"invalid-tasks","title":"Invalid tasks","level":2,"slug":"invalid-tasks","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"relatedComponents":[{"slug":"task-list","name":"task-list","title":"Task list","description":"Task list is a navigation tool that show users what input is required to complete a task or transaction.","storybookPath":"/story/forms-tasklist--unordered","figmaGalleryNodeId":"12444%3A100628","subNavItems":[{"label":"Overview","href":"/components/task-list","path":"/home/runner/work/agds-next/agds-next/packages/react/src/task-list/docs/overview.mdx"},{"label":"Code","href":"/components/task-list/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/task-list/docs/code.mdx"}],"relatedComponents":["progress-indicator"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}