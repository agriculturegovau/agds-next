{"pageProps":{"guide":{"slug":"forms","content":"\n> Note: The AgDS component library does not have any opinions for how form state should be handled. All of our form components have been designed to work with any form library.\n\n## 1. Install AgDS\n\nIf you haven’t already installed AgDS in your application, please refer to the [Getting started guide](/guides/getting-started).\n\n## 2. Compose the user interface\n\nUsing the `TextInput`, `FormStack`, `Button` and `ButtonGroup` components, we can quickly compose the user interface for the form.\n\n```tsx\nimport { Button, ButtonGroup } from '@ag.ds-next/react/button';\nimport { FormStack } from '@ag.ds-next/react/form-stack';\nimport { TextInput } from '@ag.ds-next/react/text-input';\n\nfunction FormExampleSignIn() {\n\treturn (\n\t\t<form>\n\t\t\t<FormStack>\n\t\t\t\t<TextInput label=\"Email address\" type=\"email\" maxWidth=\"xl\" required />\n\t\t\t\t<TextInput label=\"Password\" type=\"password\" maxWidth=\"xl\" required />\n\t\t\t\t<ButtonGroup>\n\t\t\t\t\t<Button type=\"submit\">Sign in</Button>\n\t\t\t\t</ButtonGroup>\n\t\t\t</FormStack>\n\t\t</form>\n\t);\n}\n```\n\n## 3. Handling form state\n\nWe will be using `react-hook-form` for handling form state and `yup` for handling client-side validation.\n\n### 3.1 Install dependencies\n\nWe need to install these new dependencies by running the following command in your terminal:\n\n```sh\nyarn add react-hook-form @hookform/resolvers yup\n```\n\n### 3.1 Define the form schema\n\nYup is a schema builder for runtime value parsing and validation. Define a schema, transform a value to match, assert the shape of an existing value, or both. Yup schema are extremely expressive and allow modeling complex, interdependent validations, or value transformation.\n\nIn this step, we will be creating a form schema for the `email` and `password` form fields with some simple validation.\n\nFor more information about `yup`, please refer to the [official documentation](https://github.com/jquense/yup)\n\n```tsx\nimport * as yup from 'yup';\n\nconst formSchema = yup\n\t.object({\n\t\temail: yup\n\t\t\t.string()\n\t\t\t.email('Invalid email address')\n\t\t\t.required('Enter your email address'),\n\t\tpassword: yup.string().required('Enter your password'),\n\t})\n\t.required();\n\ntype FormSchema = yup.InferType<typeof formSchema>;\n```\n\n### 3.3 Handling form state\n\nIn this step, we will be managing our form state with `react-hook-form`, a performant, flexible and extensible library for handling form state. For more information about `react-hook-form`, please refer to the [official documentation](https://react-hook-form.com/)\n\nSince we are already using `yup` for client-side validation, we have added [`noValidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate) to our form element which disabled native browser validation.\n\n```tsx\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { Button, ButtonGroup } from '@ag.ds-next/react/button';\nimport { FormStack } from '@ag.ds-next/react/form-stack';\nimport { TextInput } from '@ag.ds-next/react/text-input';\n\nconst formSchema = yup\n\t.object({\n\t\temail: yup\n\t\t\t.string()\n\t\t\t.email('Invalid email address')\n\t\t\t.required('Enter your email address'),\n\t\tpassword: yup.string().required('Enter your password'),\n\t})\n\t.required();\n\ntype FormSchema = yup.InferType<typeof formSchema>;\n\nexport function FormExampleSignIn() {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t} = useForm<FormSchema>({\n\t\tresolver: yupResolver(formSchema),\n\t});\n\n\tconst onSubmit: SubmitHandler<FormSchema> = (data) => {\n\t\tconsole.log(data);\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit(onSubmit)} noValidate>\n\t\t\t<FormStack>\n\t\t\t\t<TextInput\n\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t{...register('email')}\n\t\t\t\t\tmaxWidth=\"xl\"\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t{...register('password')}\n\t\t\t\t\tmaxWidth=\"xl\"\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<ButtonGroup>\n\t\t\t\t\t<Button type=\"submit\">Sign in</Button>\n\t\t\t\t</ButtonGroup>\n\t\t\t</FormStack>\n\t\t</form>\n\t);\n}\n```\n\n### 4. Handling invalid states\n\nBy making use of the `invalid` and `message` props available to the `TextInput` component, we can let the user know they have an invalid form.\n\nWe have also added a `PageAlert` to the top of the form which lists out all form errors.\n\n```tsx\nimport { useEffect, useRef, useState } from 'react';\nimport { useForm, SubmitHandler, SubmitErrorHandler } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { Button, ButtonGroup } from '@ag.ds-next/react/button';\nimport { Stack } from '@ag.ds-next/react/stack';\nimport { FormStack } from '@ag.ds-next/react/form-stack';\nimport { TextInput } from '@ag.ds-next/react/text-input';\nimport { useScrollToField } from '@ag.ds-next/react/field';\nimport { PageAlert } from '@ag.ds-next/react/page-alert';\nimport { Text } from '@ag.ds-next/react/text';\nimport { TextLink } from '@ag.ds-next/react/text-link';\nimport { UnorderedList, ListItem } from '@ag.ds-next/react/list';\n\nconst formSchema = yup\n\t.object({\n\t\temail: yup\n\t\t\t.string()\n\t\t\t.email('Invalid email address')\n\t\t\t.required('Enter your email address'),\n\t\tpassword: yup.string().required('Enter your password'),\n\t})\n\t.required();\n\ntype FormSchema = yup.InferType<typeof formSchema>;\n\nexport function FormExampleSignIn() {\n\tconst errorPageAlertRef = useRef<HTMLDivElement>(null);\n\tconst [hasFocusedErrorRef, setHasFocusedErrorRef] = useState(false);\n\tconst scrollToField = useScrollToField();\n\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t} = useForm<FormSchema>({\n\t\tresolver: yupResolver(formSchema),\n\t});\n\n\tconst onSubmit: SubmitHandler<FormSchema> = (data) => {\n\t\tconsole.log(data);\n\t};\n\n\tconst onError: SubmitErrorHandler<FormSchema> = (errors, event) => {\n\t\tconsole.log(errors, event);\n\t\tsetHasFocusedErrorRef(false);\n\t};\n\n\t// Only show the page alert if there is more than 1 error\n\tconst hasErrors = Object.keys(errors).length > 1;\n\n\tuseEffect(() => {\n\t\tif (!(hasErrors || hasFocusedErrorRef)) return;\n\t\terrorPageAlertRef.current?.focus();\n\t\tsetHasFocusedErrorRef(true);\n\t}, [hasFocusedErrorRef, hasErrors]);\n\n\treturn (\n\t\t<Stack gap={3}>\n\t\t\t{hasErrors && (\n\t\t\t\t<PageAlert\n\t\t\t\t\tref={errorPageAlertRef}\n\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\ttone=\"error\"\n\t\t\t\t\ttitle=\"There is a problem\"\n\t\t\t\t>\n\t\t\t\t\t<Text as=\"p\">Please correct the following fields and try again</Text>\n\t\t\t\t\t<UnorderedList>\n\t\t\t\t\t\t{Object.entries(errors).map(([key, value]) => (\n\t\t\t\t\t\t\t<ListItem key={key}>\n\t\t\t\t\t\t\t\t<TextLink href={`#${key}`} onClick={scrollToField}>\n\t\t\t\t\t\t\t\t\t{value.message}\n\t\t\t\t\t\t\t\t</TextLink>\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</UnorderedList>\n\t\t\t\t</PageAlert>\n\t\t\t)}\n\t\t\t<form onSubmit={handleSubmit(onSubmit, onError)} noValidate>\n\t\t\t\t<FormStack>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t{...register('email')}\n\t\t\t\t\t\tinvalid={Boolean(errors.email?.message)}\n\t\t\t\t\t\tmessage={errors.email?.message}\n\t\t\t\t\t\tmaxWidth=\"xl\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t{...register('password')}\n\t\t\t\t\t\tinvalid={Boolean(errors.password?.message)}\n\t\t\t\t\t\tmessage={errors.password?.message}\n\t\t\t\t\t\tmaxWidth=\"xl\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t<Button type=\"submit\">Sign in</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t\t</FormStack>\n\t\t\t</form>\n\t\t</Stack>\n\t);\n}\n```\n\n## What’s next?\n\nTake a look at our wide range of [form components](/components), and install the ones you need in your application.\n\n> We recommend using TypeScript to get the most out of these components.\n\nIf you get stuck, feel free to reach out to us in the Design System Teams Chat.\n","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Note: The AgDS component library does not have any opinions for how form state should be handled. All of our form components have been designed to work with any form library.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. Install AgDS\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you haven’t already installed AgDS in your application, please refer to the \", _jsx(_components.a, {\n        href: \"/guides/getting-started\",\n        children: \"Getting started guide\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. Compose the user interface\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"TextInput\"\n      }), \", \", _jsx(_components.code, {\n        children: \"FormStack\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Button\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"ButtonGroup\"\n      }), \" components, we can quickly compose the user interface for the form.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Button, ButtonGroup } from '@ag.ds-next/react/button';\\nimport { FormStack } from '@ag.ds-next/react/form-stack';\\nimport { TextInput } from '@ag.ds-next/react/text-input';\\n\\nfunction FormExampleSignIn() {\\n\\treturn (\\n\\t\\t<form>\\n\\t\\t\\t<FormStack>\\n\\t\\t\\t\\t<TextInput label=\\\"Email address\\\" type=\\\"email\\\" maxWidth=\\\"xl\\\" required />\\n\\t\\t\\t\\t<TextInput label=\\\"Password\\\" type=\\\"password\\\" maxWidth=\\\"xl\\\" required />\\n\\t\\t\\t\\t<ButtonGroup>\\n\\t\\t\\t\\t\\t<Button type=\\\"submit\\\">Sign in</Button>\\n\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t</FormStack>\\n\\t\\t</form>\\n\\t);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. Handling form state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We will be using \", _jsx(_components.code, {\n        children: \"react-hook-form\"\n      }), \" for handling form state and \", _jsx(_components.code, {\n        children: \"yup\"\n      }), \" for handling client-side validation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"3.1 Install dependencies\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We need to install these new dependencies by running the following command in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"yarn add react-hook-form @hookform/resolvers yup\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"3.1 Define the form schema\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Yup is a schema builder for runtime value parsing and validation. Define a schema, transform a value to match, assert the shape of an existing value, or both. Yup schema are extremely expressive and allow modeling complex, interdependent validations, or value transformation.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this step, we will be creating a form schema for the \", _jsx(_components.code, {\n        children: \"email\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"password\"\n      }), \" form fields with some simple validation.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more information about \", _jsx(_components.code, {\n        children: \"yup\"\n      }), \", please refer to the \", _jsx(_components.a, {\n        href: \"https://github.com/jquense/yup\",\n        children: \"official documentation\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import * as yup from 'yup';\\n\\nconst formSchema = yup\\n\\t.object({\\n\\t\\temail: yup\\n\\t\\t\\t.string()\\n\\t\\t\\t.email('Invalid email address')\\n\\t\\t\\t.required('Enter your email address'),\\n\\t\\tpassword: yup.string().required('Enter your password'),\\n\\t})\\n\\t.required();\\n\\ntype FormSchema = yup.InferType<typeof formSchema>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"3.3 Handling form state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this step, we will be managing our form state with \", _jsx(_components.code, {\n        children: \"react-hook-form\"\n      }), \", a performant, flexible and extensible library for handling form state. For more information about \", _jsx(_components.code, {\n        children: \"react-hook-form\"\n      }), \", please refer to the \", _jsx(_components.a, {\n        href: \"https://react-hook-form.com/\",\n        children: \"official documentation\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since we are already using \", _jsx(_components.code, {\n        children: \"yup\"\n      }), \" for client-side validation, we have added \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate\",\n        children: _jsx(_components.code, {\n          children: \"noValidate\"\n        })\n      }), \" to our form element which disabled native browser validation.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useForm, SubmitHandler } from 'react-hook-form';\\nimport { yupResolver } from '@hookform/resolvers/yup';\\nimport * as yup from 'yup';\\nimport { Button, ButtonGroup } from '@ag.ds-next/react/button';\\nimport { FormStack } from '@ag.ds-next/react/form-stack';\\nimport { TextInput } from '@ag.ds-next/react/text-input';\\n\\nconst formSchema = yup\\n\\t.object({\\n\\t\\temail: yup\\n\\t\\t\\t.string()\\n\\t\\t\\t.email('Invalid email address')\\n\\t\\t\\t.required('Enter your email address'),\\n\\t\\tpassword: yup.string().required('Enter your password'),\\n\\t})\\n\\t.required();\\n\\ntype FormSchema = yup.InferType<typeof formSchema>;\\n\\nexport function FormExampleSignIn() {\\n\\tconst {\\n\\t\\tregister,\\n\\t\\thandleSubmit,\\n\\t\\tformState: { errors },\\n\\t} = useForm<FormSchema>({\\n\\t\\tresolver: yupResolver(formSchema),\\n\\t});\\n\\n\\tconst onSubmit: SubmitHandler<FormSchema> = (data) => {\\n\\t\\tconsole.log(data);\\n\\t};\\n\\n\\treturn (\\n\\t\\t<form onSubmit={handleSubmit(onSubmit)} noValidate>\\n\\t\\t\\t<FormStack>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tlabel=\\\"Email address\\\"\\n\\t\\t\\t\\t\\ttype=\\\"email\\\"\\n\\t\\t\\t\\t\\t{...register('email')}\\n\\t\\t\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tlabel=\\\"Password\\\"\\n\\t\\t\\t\\t\\ttype=\\\"password\\\"\\n\\t\\t\\t\\t\\t{...register('password')}\\n\\t\\t\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<ButtonGroup>\\n\\t\\t\\t\\t\\t<Button type=\\\"submit\\\">Sign in</Button>\\n\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t</FormStack>\\n\\t\\t</form>\\n\\t);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"4. Handling invalid states\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By making use of the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"message\"\n      }), \" props available to the \", _jsx(_components.code, {\n        children: \"TextInput\"\n      }), \" component, we can let the user know they have an invalid form.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We have also added a \", _jsx(_components.code, {\n        children: \"PageAlert\"\n      }), \" to the top of the form which lists out all form errors.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useEffect, useRef, useState } from 'react';\\nimport { useForm, SubmitHandler, SubmitErrorHandler } from 'react-hook-form';\\nimport { yupResolver } from '@hookform/resolvers/yup';\\nimport * as yup from 'yup';\\nimport { Button, ButtonGroup } from '@ag.ds-next/react/button';\\nimport { Stack } from '@ag.ds-next/react/stack';\\nimport { FormStack } from '@ag.ds-next/react/form-stack';\\nimport { TextInput } from '@ag.ds-next/react/text-input';\\nimport { useScrollToField } from '@ag.ds-next/react/field';\\nimport { PageAlert } from '@ag.ds-next/react/page-alert';\\nimport { Text } from '@ag.ds-next/react/text';\\nimport { TextLink } from '@ag.ds-next/react/text-link';\\nimport { UnorderedList, ListItem } from '@ag.ds-next/react/list';\\n\\nconst formSchema = yup\\n\\t.object({\\n\\t\\temail: yup\\n\\t\\t\\t.string()\\n\\t\\t\\t.email('Invalid email address')\\n\\t\\t\\t.required('Enter your email address'),\\n\\t\\tpassword: yup.string().required('Enter your password'),\\n\\t})\\n\\t.required();\\n\\ntype FormSchema = yup.InferType<typeof formSchema>;\\n\\nexport function FormExampleSignIn() {\\n\\tconst errorPageAlertRef = useRef<HTMLDivElement>(null);\\n\\tconst [hasFocusedErrorRef, setHasFocusedErrorRef] = useState(false);\\n\\tconst scrollToField = useScrollToField();\\n\\n\\tconst {\\n\\t\\tregister,\\n\\t\\thandleSubmit,\\n\\t\\tformState: { errors },\\n\\t} = useForm<FormSchema>({\\n\\t\\tresolver: yupResolver(formSchema),\\n\\t});\\n\\n\\tconst onSubmit: SubmitHandler<FormSchema> = (data) => {\\n\\t\\tconsole.log(data);\\n\\t};\\n\\n\\tconst onError: SubmitErrorHandler<FormSchema> = (errors, event) => {\\n\\t\\tconsole.log(errors, event);\\n\\t\\tsetHasFocusedErrorRef(false);\\n\\t};\\n\\n\\t// Only show the page alert if there is more than 1 error\\n\\tconst hasErrors = Object.keys(errors).length > 1;\\n\\n\\tuseEffect(() => {\\n\\t\\tif (!(hasErrors || hasFocusedErrorRef)) return;\\n\\t\\terrorPageAlertRef.current?.focus();\\n\\t\\tsetHasFocusedErrorRef(true);\\n\\t}, [hasFocusedErrorRef, hasErrors]);\\n\\n\\treturn (\\n\\t\\t<Stack gap={3}>\\n\\t\\t\\t{hasErrors && (\\n\\t\\t\\t\\t<PageAlert\\n\\t\\t\\t\\t\\tref={errorPageAlertRef}\\n\\t\\t\\t\\t\\ttabIndex={-1}\\n\\t\\t\\t\\t\\ttone=\\\"error\\\"\\n\\t\\t\\t\\t\\ttitle=\\\"There is a problem\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">Please correct the following fields and try again</Text>\\n\\t\\t\\t\\t\\t<UnorderedList>\\n\\t\\t\\t\\t\\t\\t{Object.entries(errors).map(([key, value]) => (\\n\\t\\t\\t\\t\\t\\t\\t<ListItem key={key}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href={`#${key}`} onClick={scrollToField}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{value.message}\\n\\t\\t\\t\\t\\t\\t\\t\\t</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t</ListItem>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</UnorderedList>\\n\\t\\t\\t\\t</PageAlert>\\n\\t\\t\\t)}\\n\\t\\t\\t<form onSubmit={handleSubmit(onSubmit, onError)} noValidate>\\n\\t\\t\\t\\t<FormStack>\\n\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Email address\\\"\\n\\t\\t\\t\\t\\t\\ttype=\\\"email\\\"\\n\\t\\t\\t\\t\\t\\t{...register('email')}\\n\\t\\t\\t\\t\\t\\tinvalid={Boolean(errors.email?.message)}\\n\\t\\t\\t\\t\\t\\tmessage={errors.email?.message}\\n\\t\\t\\t\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Password\\\"\\n\\t\\t\\t\\t\\t\\ttype=\\\"password\\\"\\n\\t\\t\\t\\t\\t\\t{...register('password')}\\n\\t\\t\\t\\t\\t\\tinvalid={Boolean(errors.password?.message)}\\n\\t\\t\\t\\t\\t\\tmessage={errors.password?.message}\\n\\t\\t\\t\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t<ButtonGroup>\\n\\t\\t\\t\\t\\t\\t<Button type=\\\"submit\\\">Sign in</Button>\\n\\t\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t\\t</FormStack>\\n\\t\\t\\t</form>\\n\\t\\t</Stack>\\n\\t);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"What’s next?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Take a look at our wide range of \", _jsx(_components.a, {\n        href: \"/components\",\n        children: \"form components\"\n      }), \", and install the ones you need in your application.\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"We recommend using TypeScript to get the most out of these components.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you get stuck, feel free to reach out to us in the Design System Teams Chat.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Forms","overview":"Building a simple sign in form using AgDS components, react-hook-form and yup.","opener":"Web forms are one of the main points of interaction between a user and a web site or application. In this guide, we will be building a simple sign in form using two popular libraries react-hook-form and yup."}},"data":{"title":"Forms","overview":"Building a simple sign in form using AgDS components, react-hook-form and yup.","opener":"Web forms are one of the main points of interaction between a user and a web site or application. In this guide, we will be building a simple sign in form using two popular libraries react-hook-form and yup."},"title":"Forms","opener":"Web forms are one of the main points of interaction between a user and a web site or application. In this guide, we will be building a simple sign in form using two popular libraries react-hook-form and yup."},"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/guides","label":"Guides"},{"label":"Forms"}],"slug":"forms","toc":[{"id":"1-install-agds","title":"1. Install AgDS","level":2,"slug":"1-install-agds","items":[]},{"id":"2-compose-the-user-interface","title":"2. Compose the user interface","level":2,"slug":"2-compose-the-user-interface","items":[]},{"id":"3-handling-form-state","title":"3. Handling form state","level":2,"slug":"3-handling-form-state","items":[{"id":"31-install-dependencies","title":"3.1 Install dependencies","level":3,"slug":"31-install-dependencies","items":[]},{"id":"31-define-the-form-schema","title":"3.1 Define the form schema","level":3,"slug":"31-define-the-form-schema","items":[]},{"id":"33-handling-form-state","title":"3.3 Handling form state","level":3,"slug":"33-handling-form-state","items":[]},{"id":"4-handling-invalid-states","title":"4. Handling invalid states","level":3,"slug":"4-handling-invalid-states","items":[]}]},{"id":"whats-next","title":"What’s next?","level":2,"slug":"whats-next","items":[]}]},"__N_SSG":true}