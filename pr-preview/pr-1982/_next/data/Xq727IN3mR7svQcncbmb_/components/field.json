{"pageProps":{"pkg":{"slug":"field","name":"field","title":"Field","description":"The field package exposes the elements around form inputs, and an API to compose them.","storybookPath":"/story/forms-field--basic","figmaGalleryNodeId":null,"subNavItems":[{"label":"Overview","href":"/components/field","path":"/home/runner/work/agds-next/agds-next/packages/react/src/field/docs/overview.mdx"},{"label":"Code","href":"/components/field/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/field/docs/code.mdx"}],"relatedComponents":["fieldset"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Field"}],"toc":[{"id":"label","title":"Label","level":2,"slug":"label","items":[]},{"id":"hint","title":"Hint","level":2,"slug":"hint","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"required","title":"Required","level":2,"slug":"required","items":[{"id":"hide-optional-label","title":"Hide optional label","level":3,"slug":"hide-optional-label","items":[]}]},{"id":"hooks","title":"Hooks","level":2,"slug":"hooks","items":[{"id":"usescrolltofield","title":"useScrollToField","level":3,"slug":"usescrolltofield","items":[]}]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The field component connects the label, description and message to the input element.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field label=\\\"Name\\\">{(a11yProps) => <input {...a11yProps} />}</Field>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each field must be accompanied by a label. Effective form labeling helps users understand what information to enter into the input.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field label=\\\"Name\\\">{(a11yProps) => <input {...a11yProps} />}</Field>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hint\"\n      }), \" prop to provide help that’s relevant to the majority of users, like the required format of the input, how their information will be used, or where to find it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field label=\\\"Email\\\" hint=\\\"We will only use this to respond to your question\\\">\\n\\t{(a11yProps) => <input type=\\\"email\\\" {...a11yProps} />}\\n</Field>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Error messages are used to notify the user when a form field has not passed validation. Use clear messages to explain what went wrong and how to fix it.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field\\n\\tlabel=\\\"Email\\\"\\n\\tinvalid\\n\\tmessage=\\\"Enter an email address in the correct format, like name@example.com\\\"\\n>\\n\\t{(a11yProps) => <input type=\\\"email\\\" {...a11yProps} />}\\n</Field>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Required fields do not append ‘(optional)’ to the label and also use \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen readers that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indicate to screen reader users that a field is optional but don’t want to show the ‘(optional)’ label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<Field label=\\\"Required\\\" required={true}>\\n\\t\\t{(a11yProps) => <input {...a11yProps} />}\\n\\t</Field>\\n\\t<Field label=\\\"Optional\\\" required={false}>\\n\\t\\t{(a11yProps) => <input {...a11yProps} />}\\n\\t</Field>\\n\\t<Field\\n\\t\\tlabel=\\\"Optional with hideOptionalLabel\\\"\\n\\t\\trequired={false}\\n\\t\\thideOptionalLabel={true}\\n\\t>\\n\\t\\t{(a11yProps) => <input {...a11yProps} />}\\n\\t</Field>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hooks\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useScrollToField\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"useScrollToField\"\n      }), \" is a hook that can be used to scroll and focus users to a form field on the same page.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Because our labels or legends appear above the input, when using native browsers APIs, users will be presented with an input without any context, as the label or legend will be off the top of the screen. Manually handling the click event, scrolling the question into view and then focusing the element solves this.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Please refer to the \", _jsx(_components.a, {\n        href: \"/example-site/single-page-form\",\n        children: \"example site single-page form example\"\n      }), \" to see an example of this hook in use.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"/**\\n * Example usage when displaying a list of form validation errors\\n */\\nfunction ExampleOne() {\\n\\tconst scrollToField = useScrollToField();\\n\\treturn (\\n\\t\\t<ul>\\n\\t\\t\\t{Object.entries(errors).map(([id, errorMessage]) => (\\n\\t\\t\\t\\t<li key={id}>\\n\\t\\t\\t\\t\\t<a href={`#${id}`} onClick={scrollToField}>\\n\\t\\t\\t\\t\\t\\t{errorMessage}\\n\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t))}\\n\\t\\t</ul>\\n\\t);\\n}\\n\\n/**\\n * Example usage scrolling and focusing to a specific field on first mount\\n */\\nfunction ExampleTwo() {\\n\\tconst targetId = 'last-name'; // This could potentially come from route query params\\n\\tconst scrollToField = useScrollToField();\\n\\n\\tReact.useEffect(() => {\\n\\t\\tscrollToField(targetId);\\n\\t}, [scrollToField]);\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<TextInput label=\\\"First name\\\" id=\\\"first-name\\\" />\\n\\t\\t\\t<TextInput label=\\\"Last name\\\" id=\\\"last-name\\\" />\\n\\t\\t</FormStack>\\n\\t);\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Field","description":"The field package exposes the elements around form inputs, and an API to compose them.","group":"Forms","storybookPath":"/story/forms-field--basic","relatedComponents":["fieldset"],"relatedPatterns":["messaging"]}},"relatedPatterns":[{"slug":"messaging","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Global alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/global-alert\",\n        children: \"Global alerts\"\n      }), \" display prominent service or system wide messages at the top of the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"They are used to communicate system or service wide messages, not page or feature messages. Global alerts are not initiated by the user and should persist for a session but can be dismissed by the user.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<GlobalAlert title=\\\"Alert title\\\">\\n\\t<Text as=\\\"p\\\">\\n\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce massa nibh,\\n\\t\\taliquam vel dolor non, gravida porttitor nulla. Pellentesque cursus orci\\n\\t\\tvulputate nibh sagittis blandit.\\n\\t</Text>\\n</GlobalAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Page alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/page-alert\",\n        children: \"Page alerts\"\n      }), \" are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Typically page alerts appear near the top of a page, under the H1 and introductory paragraph, following a submit action.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"error\\\" title=\\\"There is a problem\\\">\\n\\t<Text as=\\\"p\\\">Please correct the following fields and try again</Text>\\n\\t<UnorderedList>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Full name must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Email must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t</UnorderedList>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Section alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/section-alert\",\n        children: \"Section alerts\"\n      }), \" are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages that are delivered in context at a specific section of the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Section alerts appear above an interactive component or at the top of a page section, and provide information or status following an action.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"success\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid field\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Invalid \", _jsx(_components.a, {\n        href: \"/components/field\",\n        children: \"Fields\"\n      }), \" alert the user of something that has happened in an input component. They appear above the input and after any label or hint text.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A border is added to the left-margin of the input to group the message to the component.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput\\n\\tlabel=\\\"Email\\\"\\n\\tinvalid\\n\\tmessage=\\\"Enter an email address in the correct format, like name@example.com\\\"\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Callout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/callout\",\n        children: \"Callouts\"\n      }), \" are used draw attention to persistent, important or interesting information and should not be used to communicate validation or status.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An information hierarchy can be created with Callouts by applying the Feature, Information and Neutral variants of the component. The Feature variant of Callout has a larger icon and heading to draw a user’s attention.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Callout title=\\\"Callout heading\\\">\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Loading, empty and error states\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When loading data in an application, it is important to consider and design for loading, empty, and error states. The compositions in our \", _jsx(_components.a, {\n        href: \"/patterns/loading-error-empty-states\",\n        children: \"Loading, Error and Empty state\"\n      }), \" patterns are designed to help you communicate these states to users.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<AlertFilledIcon color=\\\"error\\\" size=\\\"lg\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tFailed to load\\n\\t\\t</Heading>\\n\\t\\t<Text>There was an error loading the data. Click retry to try again.</Text>\\n\\t</Stack>\\n\\t<Button>Retry</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error page template\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/templates/error-page\",\n        children: \"Error page template\"\n      }), \" is used to display a full page error message to the user, if something goes wrong while loading the page.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This could include 404 errors, or if the application is down for maintenance.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/templates/error-page.webp\",\n        alt: \"Screenshot of error page template\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","relatedComponents":["page-alert","global-alert","section-alert","field","callout"]}},"content":"\n## Global alert\n\n[Global alerts](/components/global-alert) display prominent service or system wide messages at the top of the screen.\n\nThey are used to communicate system or service wide messages, not page or feature messages. Global alerts are not initiated by the user and should persist for a session but can be dismissed by the user.\n\n```jsx live\n<GlobalAlert title=\"Alert title\">\n\t<Text as=\"p\">\n\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce massa nibh,\n\t\taliquam vel dolor non, gravida porttitor nulla. Pellentesque cursus orci\n\t\tvulputate nibh sagittis blandit.\n\t</Text>\n</GlobalAlert>\n```\n\n## Page alert\n\n[Page alerts](/components/page-alert) are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey.\n\nTypically page alerts appear near the top of a page, under the H1 and introductory paragraph, following a submit action.\n\n```jsx live\n<PageAlert tone=\"error\" title=\"There is a problem\">\n\t<Text as=\"p\">Please correct the following fields and try again</Text>\n\t<UnorderedList>\n\t\t<ListItem>\n\t\t\t<TextLink href=\"#\">Full name must not be empty</TextLink>\n\t\t</ListItem>\n\t\t<ListItem>\n\t\t\t<TextLink href=\"#\">Email must not be empty</TextLink>\n\t\t</ListItem>\n\t</UnorderedList>\n</PageAlert>\n```\n\n## Section alert\n\n[Section alerts](/components/section-alert) are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages that are delivered in context at a specific section of the screen.\n\nSection alerts appear above an interactive component or at the top of a page section, and provide information or status following an action.\n\n```jsx live\n<SectionAlert title=\"Your changes have been saved\" tone=\"success\" />\n```\n\n## Invalid field\n\nInvalid [Fields](/components/field) alert the user of something that has happened in an input component. They appear above the input and after any label or hint text.\n\nA border is added to the left-margin of the input to group the message to the component.\n\n```jsx live\n<TextInput\n\tlabel=\"Email\"\n\tinvalid\n\tmessage=\"Enter an email address in the correct format, like name@example.com\"\n/>\n```\n\n## Callout\n\n[Callouts](/components/callout) are used draw attention to persistent, important or interesting information and should not be used to communicate validation or status.\n\nAn information hierarchy can be created with Callouts by applying the Feature, Information and Neutral variants of the component. The Feature variant of Callout has a larger icon and heading to draw a user’s attention.\n\n```jsx live\n<Callout title=\"Callout heading\">\n\t<Text as=\"p\">Description of the callout.</Text>\n</Callout>\n```\n\n## Loading, empty and error states\n\nWhen loading data in an application, it is important to consider and design for loading, empty, and error states. The compositions in our [Loading, Error and Empty state](/patterns/loading-error-empty-states) patterns are designed to help you communicate these states to users.\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t<Stack gap={1}>\n\t\t<AlertFilledIcon color=\"error\" size=\"lg\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tFailed to load\n\t\t</Heading>\n\t\t<Text>There was an error loading the data. Click retry to try again.</Text>\n\t</Stack>\n\t<Button>Retry</Button>\n</Stack>\n```\n\n## Error page template\n\nThe [Error page template](/templates/error-page) is used to display a full page error message to the user, if something goes wrong while loading the page.\n\nThis could include 404 errors, or if the application is down for maintenance.\n\n![Screenshot of error page template](/img/templates/error-page.webp)\n","data":{"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","relatedComponents":["page-alert","global-alert","section-alert","field","callout"]},"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["page-alert","global-alert","section-alert","field","callout"]}],"relatedComponents":[{"slug":"fieldset","name":"fieldset","title":"Fieldset","description":"The Fieldset component is used to group related form fields and includes a descriptive legend to label the group, helping users understand the relationship between these form fields.","storybookPath":"/story/forms-fieldset--basic","figmaGalleryNodeId":null,"subNavItems":[{"label":"Overview","href":"/components/fieldset","path":"/home/runner/work/agds-next/agds-next/packages/react/src/fieldset/docs/overview.mdx"},{"label":"Code","href":"/components/fieldset/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/fieldset/docs/code.mdx"},{"label":"Accessibility","href":"/components/fieldset/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/fieldset/docs/accessibility.mdx"}],"relatedComponents":["field","control-group"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}