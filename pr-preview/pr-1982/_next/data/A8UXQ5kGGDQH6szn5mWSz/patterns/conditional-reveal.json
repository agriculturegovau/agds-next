{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Conditionally revealed content"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"conditional-reveal","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"limit what is revealed to 1 related question or piece of information\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal the related question or information directly under the initial question\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use another page if there are multiple related questions\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"only use with vertically stacked checkboxes or radios\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"reveal more than 1 related question or piece of information\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use with horizontally stacked checkboxes or radios\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal anything that is not a question or piece of information relating directly to aÂ specific radio or checkbox option.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Radio\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can reveal a related question or information specific to that option when users select a particular \", _jsx(_components.a, {\n        href: \"/components/radio\",\n        children: \"Radio\"\n      }), \", so they only see that content when it is relevant to them.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\tEmail\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Radio\\n\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t>\\n\\t\\t\\t\\tText message\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Mobile phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can reveal a related question or information related to that option when a user selects a particular \", _jsx(_components.a, {\n        href: \"/components/checkbox\",\n        children: \"Checkbox\"\n      }), \", so they only see that content when it is relevant to them.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState([]);\\n\\tconst handlerForKey = React.useCallback(\\n\\t\\t(key) => () =>\\n\\t\\t\\tsetValue((value) =>\\n\\t\\t\\t\\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\\n\\t\\t\\t),\\n\\t\\t[]\\n\\t);\\n\\tconst isChecked = (key) => value.includes(key);\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t<Checkbox checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\tEmail\\n\\t\\t\\t</Checkbox>\\n\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Checkbox checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Checkbox>\\n\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Checkbox\\n\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t>\\n\\t\\t\\t\\tText message\\n\\t\\t\\t</Checkbox>\\n\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Mobile phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState('email');\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\tEmail\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\ttype=\\\"email\\\"\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Email address\\\"\\n\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\t\\tmessage=\\\"Enter a email address\\\"\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Phone number\\\"\\n\\t\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\t\\tmessage=\\\"Enter a phone number\\\"\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Radio\\n\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t>\\n\\t\\t\\t\\tText message\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Mobile phone number\\\"\\n\\t\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\t\\tmessage=\\\"Enter a mobile phone number\\\"\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Conditionally revealed content","description":"Conditionally reveal a question or information related to a specific radio or checkbox option when a user selects it. This ensures that users only encounter conditionally revealed content when it is applicable to their selection.","relatedComponents":["checkbox","radio"]}},"content":"\n<DoHeading />\n\n- limit what is revealed to 1 related question or piece of information\n- reveal the related question or information directly under the initial question\n- use another page if there are multiple related questions\n- only use with vertically stacked checkboxes or radios\n\n<DontHeading />\n\n- reveal more than 1 related question or piece of information\n- use with horizontally stacked checkboxes or radios\n- reveal anything that is not a question or piece of information relating directly to aÂ specific radio or checkbox option.\n\n## Radio\n\nYou can reveal a related question or information specific to that option when users select a particular [Radio](/components/radio), so they only see that content when it is relevant to them.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\treturn (\n\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\tEmail\n\t\t\t</Radio>\n\t\t\t{isChecked('email') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\tPhone\n\t\t\t</Radio>\n\t\t\t{isChecked('phone') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput label=\"Phone number\" inputMode=\"numeric\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Radio\n\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t>\n\t\t\t\tText message\n\t\t\t</Radio>\n\t\t\t{isChecked('textMessage') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput label=\"Mobile phone number\" inputMode=\"numeric\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t</ControlGroup>\n\t);\n};\n```\n\n## Checkbox\n\nYou can reveal a related question or information related to that option when a user selects a particular [Checkbox](/components/checkbox), so they only see that content when it is relevant to them.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState([]);\n\tconst handlerForKey = React.useCallback(\n\t\t(key) => () =>\n\t\t\tsetValue((value) =>\n\t\t\t\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\n\t\t\t),\n\t\t[]\n\t);\n\tconst isChecked = (key) => value.includes(key);\n\treturn (\n\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t<Checkbox checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\tEmail\n\t\t\t</Checkbox>\n\t\t\t{isChecked('email') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Checkbox checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\tPhone\n\t\t\t</Checkbox>\n\t\t\t{isChecked('phone') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput label=\"Phone number\" inputMode=\"numeric\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Checkbox\n\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t>\n\t\t\t\tText message\n\t\t\t</Checkbox>\n\t\t\t{isChecked('textMessage') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput label=\"Mobile phone number\" inputMode=\"numeric\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t</ControlGroup>\n\t);\n};\n```\n\n## Invalid\n\nWhen a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState('email');\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\treturn (\n\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\tEmail\n\t\t\t</Radio>\n\t\t\t{isChecked('email') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tinvalid\n\t\t\t\t\t\tmessage=\"Enter a email address\"\n\t\t\t\t\t/>\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\tPhone\n\t\t\t</Radio>\n\t\t\t{isChecked('phone') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tlabel=\"Phone number\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tinvalid\n\t\t\t\t\t\tmessage=\"Enter a phone number\"\n\t\t\t\t\t/>\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Radio\n\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t>\n\t\t\t\tText message\n\t\t\t</Radio>\n\t\t\t{isChecked('textMessage') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tlabel=\"Mobile phone number\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tinvalid\n\t\t\t\t\t\tmessage=\"Enter a mobile phone number\"\n\t\t\t\t\t/>\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t</ControlGroup>\n\t);\n};\n```\n","data":{"title":"Conditionally revealed content","description":"Conditionally reveal a question or information related to a specific radio or checkbox option when a user selects it. This ensures that users only encounter conditionally revealed content when it is applicable to their selection.","relatedComponents":["checkbox","radio"]},"title":"Conditionally revealed content","description":"Conditionally reveal a question or information related to a specific radio or checkbox option when a user selects it. This ensures that users only encounter conditionally revealed content when it is applicable to their selection.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["checkbox","radio"]},"toc":[{"id":"radio","title":"Radio","level":2,"slug":"radio","items":[]},{"id":"checkbox","title":"Checkbox","level":2,"slug":"checkbox","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"relatedComponents":[{"slug":"checkbox","name":"checkbox","title":"Checkbox","description":"Checkboxes allow users to select one or more options from a list.","storybookPath":"/story/forms-checkbox--basic","figmaGalleryNodeId":"18834%3A97097","subNavItems":[{"label":"Overview","href":"/components/checkbox","path":"/home/runner/work/agds-next/agds-next/packages/react/src/checkbox/docs/overview.mdx"},{"label":"Code","href":"/components/checkbox/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/checkbox/docs/code.mdx"}],"relatedComponents":["control-group","radio","switch"],"relatedPatterns":["conditional-reveal","selecting-multiple-options"],"deprecated":false,"unreleased":false},{"slug":"radio","name":"radio","title":"Radio","description":"Radios allow users to select one option from a list.","storybookPath":"/story/forms-radio--basic","figmaGalleryNodeId":"12926%3A104981","subNavItems":[{"label":"Overview","href":"/components/radio","path":"/home/runner/work/agds-next/agds-next/packages/react/src/radio/docs/overview.mdx"},{"label":"Code","href":"/components/radio/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/radio/docs/code.mdx"}],"relatedComponents":["checkbox","control-group"],"relatedPatterns":["conditional-reveal"],"deprecated":false,"unreleased":false}]},"__N_SSG":true}