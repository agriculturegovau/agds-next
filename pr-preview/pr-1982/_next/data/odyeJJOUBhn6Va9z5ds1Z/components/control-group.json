{"pageProps":{"pkg":{"slug":"control-group","name":"control-group","title":"Control group","description":"Control groups allow related checkboxes and radios to be grouped together.","storybookPath":"/story/forms-controlgroup--checkbox-group","figmaGalleryNodeId":"12926%3A104981","subNavItems":[{"label":"Overview","href":"/components/control-group","path":"/home/runner/work/agds-next/agds-next/packages/react/src/control-group/docs/overview.mdx"},{"label":"Code","href":"/components/control-group/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/control-group/docs/code.mdx"}],"relatedComponents":["checkbox","radio"],"relatedPatterns":null,"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Control group"}],"toc":[{"id":"checkboxes","title":"Checkboxes","level":2,"slug":"checkboxes","items":[]},{"id":"radios","title":"Radios","level":2,"slug":"radios","items":[]},{"id":"inline","title":"Inline","level":2,"slug":"inline","items":[]},{"id":"hint","title":"Hint","level":2,"slug":"hint","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"required","title":"Required","level":2,"slug":"required","items":[{"id":"hide-optional-label","title":"Hide optional label","level":3,"slug":"hide-optional-label","items":[]}]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"only use with \", _jsx(_components.a, {\n          href: \"/components/checkbox\",\n          children: \"Checkboxes\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"/component/radios\",\n          children: \"Radios\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for a short list of options\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use to help users select one or more items\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"indicate if input is optional\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use a vertical list of options\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"provide disabled options unless unavoidable\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use a horizontal list of options unless unavoidable.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Checkboxes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Multiple \", _jsx(_components.a, {\n        href: \"components/checkbox\",\n        children: \"Checkboxes\"\n      }), \" can be placed inside a Control group to allow users to select one or more items from a list of options.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Radios\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Multiple \", _jsx(_components.a, {\n        href: \"components/radio\",\n        children: \"Radios\"\n      }), \" can be placed inside a Control group to allow users to select a single item from a list of options.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Example\\\" block>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Inline\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Inline options can sometimes be difficult to scan. Users may find it challenging to determine which label the checkbox option corresponds to: the one before the checkbox or the one after?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vertical stacking of options, with one choice per line, eliminates this potential cause for confusion.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Inline example\\\">\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Inline example\\\">\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hint\"\n      }), \" prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\" hint=\\\"Hint text\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup\\n\\tlabel=\\\"Invalid example\\\"\\n\\tmessage=\\\"Please choose an option\\\"\\n\\tinvalid\\n\\tblock\\n>\\n\\t<Checkbox>Phone</Checkbox>\\n\\t<Checkbox>Tablet</Checkbox>\\n\\t<Checkbox>Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup\\n\\t\\t\\tlabel=\\\"Invalid example\\\"\\n\\t\\t\\tmessage=\\\"Please choose an option\\\"\\n\\t\\t\\tinvalid\\n\\t\\t\\tblock\\n\\t\\t>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Required fields do not append ‘(optional)’ to the label and also use \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen readers that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indicate to screen reader users that a field is optional but don’t want to show the ‘(optional)’ label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<ControlGroup label=\\\"Required\\\" required block>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n\\t<ControlGroup label=\\\"Optional\\\" required={false} block>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n\\t<ControlGroup\\n\\t\\tlabel=\\\"Optional with hideOptionalLabel\\\"\\n\\t\\trequired={false}\\n\\t\\thideOptionalLabel={true}\\n\\t\\tblock\\n\\t>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n</Stack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Control group","description":"Control groups allow related checkboxes and radios to be grouped together.","group":"Forms","storybookPath":"/story/forms-controlgroup--checkbox-group","figmaGalleryNodeId":"12926%3A104981","relatedComponents":["checkbox","radio"]}},"relatedPatterns":null,"relatedComponents":[{"slug":"checkbox","name":"checkbox","title":"Checkbox","description":"Checkboxes allow users to select one or more options from a list.","storybookPath":"/story/forms-checkbox--basic","figmaGalleryNodeId":"18834%3A97097","subNavItems":[{"label":"Overview","href":"/components/checkbox","path":"/home/runner/work/agds-next/agds-next/packages/react/src/checkbox/docs/overview.mdx"},{"label":"Code","href":"/components/checkbox/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/checkbox/docs/code.mdx"}],"relatedComponents":["control-group","radio","switch"],"relatedPatterns":["conditional-reveal","selecting-multiple-options"],"deprecated":false,"unreleased":false},{"slug":"radio","name":"radio","title":"Radio","description":"Radios allow users to select one option from a list.","storybookPath":"/story/forms-radio--basic","figmaGalleryNodeId":"12926%3A104981","subNavItems":[{"label":"Overview","href":"/components/radio","path":"/home/runner/work/agds-next/agds-next/packages/react/src/radio/docs/overview.mdx"},{"label":"Code","href":"/components/radio/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/radio/docs/code.mdx"}],"relatedComponents":["checkbox","control-group"],"relatedPatterns":["conditional-reveal"],"deprecated":false,"unreleased":false}]},"__N_SSG":true}