{"pageProps":{"pkg":{"slug":"pagination","name":"pagination","title":"Pagination","description":"Pagination separates large amounts of content into separate pages, which helps reduce cognitive load.","storybookPath":"/story/navigation-pagination--basic","figmaGalleryNodeId":"11978%3A107147","subNavItems":[{"label":"Overview","href":"/components/pagination","path":"/home/runner/work/agds-next/agds-next/packages/react/src/pagination/docs/overview.mdx"},{"label":"Content","href":"/components/pagination/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/pagination/docs/content.mdx"},{"label":"Code","href":"/components/pagination/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/pagination/docs/code.mdx"}],"relatedComponents":null,"relatedPatterns":["search-filters"],"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Pagination"}],"toc":[{"id":"pagination-buttons","title":"Pagination Buttons","level":2,"slug":"pagination-buttons","items":[]},{"id":"range-text","title":"Range text","level":2,"slug":"range-text","items":[]},{"id":"items-per-page","title":"Items per page","level":2,"slug":"items-per-page","items":[]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Pagination\\n\\tcurrentPage={5}\\n\\ttotalPages={10}\\n\\tgenerateHref={(page) => `/example?page=${page}`}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pagination allows users to see the total number of pages, which page they are viewing, and how to navigate to other pages.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use pagination to separate large lists of content, such as search results, into smaller lists that are easier to interact with. Showing content on several pages prevents your content from becoming too long and overwhelming.\"\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to enable navigation to a large data set such as a long list of results\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for table listings, search results, and directories\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"indicate the current page\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use links over buttons where possible\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"always place directly below the content you are paginating\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"centre align with the content you are paginating.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"display more than 5 page numbers between the ellipses dividers\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"left or right align with the content you are paginating.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Pagination Buttons\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the \", _jsx(_components.code, {\n        children: \"Pagination\"\n      }), \" component renders a link for each list item. We strongly recommend using links wherever possible as it the most inclusive and accessible solution for users.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Links require you to manage the state of the current page in the URL, which usually is fine, but in scenarios where that isnâ€™t possible, we offer a \", _jsx(_components.code, {\n        children: \"PaginationButtons\"\n      }), \" component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"PaginationButtons\"\n      }), \" renders a button element for each list item, which makes it possible to manage the state outside of the URL, e.g. \", _jsx(_components.code, {\n        children: \"React.useState\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [currentPage, setCurrentPage] = React.useState(5);\\n\\treturn (\\n\\t\\t<PaginationButtons\\n\\t\\t\\tcurrentPage={currentPage}\\n\\t\\t\\tonChange={setCurrentPage}\\n\\t\\t\\ttotalPages={10}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Range text\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Pagination\"\n      }), \" component accepts a \", _jsx(_components.code, {\n        children: \"itemRangeText\"\n      }), \" prop, which is used to display the range of items currently being displayed.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"generatePaginationRangeText\"\n      }), \" function to generate a string which follows the format of \", _jsx(_components.code, {\n        children: \"1 - 10 of 458 items\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Pagination\\n\\tcurrentPage={5}\\n\\ttotalPages={10}\\n\\tgenerateHref={(page) => `/example?page=${page}`}\\n\\titemRangeText={generatePaginationRangeText({\\n\\t\\ttotalItems: 100,\\n\\t\\tcurrentPage: 5,\\n\\t\\titemsPerPage: 10,\\n\\t\\tsingularNoun: 'audit', // optional\\n\\t\\tpluralNoun: 'audits', // optional\\n\\t})}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Items per page\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Pagination\"\n      }), \" component accepts props which are used to display and change the number of items per page.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"itemsPerPage\"\n        }), \" - the number of items per page\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"itemsPerPageOptions\"\n        }), \" - an array of numbers that are used to populate the items per page dropdown\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"onItemsPerPageChange\"\n        }), \" - a function that is called when the number of items per page is changed\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [itemsPerPage, setItemsPerPage] = React.useState(25);\\n\\n\\treturn (\\n\\t\\t<Pagination\\n\\t\\t\\tcurrentPage={1}\\n\\t\\t\\ttotalPages={100 / itemsPerPage}\\n\\t\\t\\tgenerateHref={(page) => `/example?page=${page}`}\\n\\t\\t\\titemsPerPage={itemsPerPage}\\n\\t\\t\\titemsPerPageOptions={[10, 25, 50, 100]}\\n\\t\\t\\tonItemsPerPageChange={setItemsPerPage}\\n\\t\\t\\titemRangeText={generatePaginationRangeText({\\n\\t\\t\\t\\ttotalItems: 100,\\n\\t\\t\\t\\tcurrentPage: 1,\\n\\t\\t\\t\\titemsPerPage,\\n\\t\\t\\t})}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Pagination","description":"Pagination separates large amounts of content into separate pages, which helps reduce cognitive load.","group":"Navigation","storybookPath":"/story/navigation-pagination--basic","figmaGalleryNodeId":"11978%3A107147","relatedPatterns":["search-filters"]}},"relatedPatterns":[{"slug":"search-filters","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading, Table, TableCaption, TableHead, TableRow, TableCell, TableHeader, TableBody, ImageWithBorder} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  if (!ImageWithBorder) _missingMdxReference(\"ImageWithBorder\", true);\n  if (!Table) _missingMdxReference(\"Table\", true);\n  if (!TableBody) _missingMdxReference(\"TableBody\", true);\n  if (!TableCaption) _missingMdxReference(\"TableCaption\", true);\n  if (!TableCell) _missingMdxReference(\"TableCell\", true);\n  if (!TableHead) _missingMdxReference(\"TableHead\", true);\n  if (!TableHeader) _missingMdxReference(\"TableHeader\", true);\n  if (!TableRow) _missingMdxReference(\"TableRow\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Search filters help users find what theyâ€™re looking for by displaying options that meet specified criteria.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Applied filters are displayed as tags, so users can quickly see which filters have been applied to the dataset. Filters can be removed by dismissing the tags.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The dataset should be displayed in a \", _jsx(_components.a, {\n        href: \"/components/table\",\n        children: \"Table\"\n      }), \" or a list of \", _jsx(_components.a, {\n        href: \"/components/card\",\n        children: \"Cards\"\n      }), \" under the search filters. Refer to the specific component guidance to help determine which is more suitable to display your dataset.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1}>\\n\\t\\t<Flex\\n\\t\\t\\tgap={1}\\n\\t\\t\\tjustifyContent=\\\"space-between\\\"\\n\\t\\t\\tflexDirection={['column', 'row']}\\n\\t\\t>\\n\\t\\t\\t<Flex\\n\\t\\t\\t\\tflexDirection={['column', 'row']}\\n\\t\\t\\t\\tgap={1}\\n\\t\\t\\t\\talignItems={['flex-start', 'flex-end']}\\n\\t\\t\\t>\\n\\t\\t\\t\\t<div aria-label=\\\"Site\\\" role=\\\"search\\\">\\n\\t\\t\\t\\t\\t<SearchInput label=\\\"Search\\\" hideOptionalLabel />\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<Button variant=\\\"secondary\\\" iconAfter={FilterIcon}>\\n\\t\\t\\t\\t\\tShow filters\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</Flex>\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tlabel=\\\"Sort by\\\"\\n\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'newest', label: 'Newest to oldest' },\\n\\t\\t\\t\\t\\t{ value: 'old', label: 'Oldest to newest' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t/>\\n\\t\\t</Flex>\\n\\t\\t<Flex flexWrap=\\\"wrap\\\" gap={0.75} alignItems=\\\"flex-end\\\">\\n\\t\\t\\t<Tags\\n\\t\\t\\t\\theading={<Text fontWeight=\\\"bold\\\">Active filters</Text>}\\n\\t\\t\\t\\titems={[\\n\\t\\t\\t\\t\\t{ label: 'Category: Plant', onRemove: console.log },\\n\\t\\t\\t\\t\\t{ label: 'Type: Organic', onRemove: console.log },\\n\\t\\t\\t\\t\\t{ label: 'Assignee: John', onRemove: console.log },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t/>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\tvariant=\\\"text\\\"\\n\\t\\t\\t\\tonClick={console.log}\\n\\t\\t\\t\\ticonAfter={CloseIcon}\\n\\t\\t\\t>\\n\\t\\t\\t\\tClear filters\\n\\t\\t\\t</Button>\\n\\t\\t</Flex>\\n\\t\\t<Divider />\\n\\t</Stack>\\n\\t<Stack gap={1}>\\n\\t\\t<H2>\\n\\t\\t\\t<span role=\\\"status\\\">25 results</span>\\n\\t\\t</H2>\\n\\t\\t{Array.from(Array(5).keys()).map((idx) => (\\n\\t\\t\\t<Card key={idx} shadow clickable>\\n\\t\\t\\t\\t<CardInner>\\n\\t\\t\\t\\t\\t<Stack gap={1}>\\n\\t\\t\\t\\t\\t\\t<H3>\\n\\t\\t\\t\\t\\t\\t\\t<CardLink href=\\\"#\\\">Card heading</CardLink>\\n\\t\\t\\t\\t\\t\\t</H3>\\n\\t\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor, sit amet consectetur adipisicing elit. In,\\n\\t\\t\\t\\t\\t\\t\\tvoluptat\\n\\t\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t</Stack>\\n\\t\\t\\t\\t</CardInner>\\n\\t\\t\\t</Card>\\n\\t\\t))}\\n\\t</Stack>\\n\\t<PaginationButtons\\n\\t\\tcurrentPage={5}\\n\\t\\ttotalPages={10}\\n\\t\\tonChange={(page) => console.log(page)}\\n\\t/>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"choose the right filter pattern to meet user needs\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"prioritise filters by expected usage\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"display 1-2 of the most important filters above the dataset\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"include \", _jsx(_components.a, {\n          href: \"/patterns/loading-error-empty-states\",\n          children: \"loading, empty, and error states\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"remove the applied filter tags, as they allow users to see and remove active filters\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Filter inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Filters can be made of from multiple input types including:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/component/search-input\",\n          children: \"Search input\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/text-input\",\n          children: \"Text input\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/select\",\n          children: \"Select\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/checkbox\",\n          children: \"Checkbox\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/radio\",\n          children: \"Radio\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/combobox\",\n          children: \"Combobox\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/switch\",\n          children: \"Switch\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/date-picker\",\n          children: \"Date picker\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/date-picker\",\n          children: \"Date range picker\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Filter sizes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Filters are available in 3 sizes to accommodate a wide range of use cases and data sets:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Small:\"\n        }), \" 1-2 filters\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Medium:\"\n        }), \" 3-6 filters\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Large:\"\n        }), \" 6+ filters\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Table, {\n      children: [_jsx(TableCaption, {\n        children: \"How to decide on filter size\"\n      }), _jsx(TableHead, {\n        children: _jsxs(TableRow, {\n          children: [_jsx(TableCell, {}), _jsx(TableHeader, {\n            width: \"15%\",\n            scope: \"col\",\n            children: _jsx(_components.p, {\n              children: \"Small\"\n            })\n          }), _jsx(TableHeader, {\n            width: \"15%\",\n            scope: \"col\",\n            children: _jsx(_components.p, {\n              children: \"Medium\"\n            })\n          }), _jsx(TableHeader, {\n            width: \"15%\",\n            scope: \"col\",\n            children: _jsx(_components.p, {\n              children: \"Large\"\n            })\n          })]\n        })\n      }), _jsxs(TableBody, {\n        children: [_jsxs(TableRow, {\n          children: [_jsx(TableCell, {\n            as: \"th\",\n            scope: \"row\",\n            children: _jsx(_components.p, {\n              children: \"Number of filters\"\n            })\n          }), _jsx(TableCell, {\n            children: \"1-2\"\n          }), _jsx(TableCell, {\n            children: \"3-6\"\n          }), _jsx(TableCell, {\n            children: \"6+\"\n          })]\n        }), _jsxs(TableRow, {\n          children: [_jsx(TableCell, {\n            as: \"th\",\n            scope: \"row\",\n            children: _jsx(_components.p, {\n              children: \"Number of primary filters\"\n            })\n          }), _jsx(TableCell, {\n            children: \"1-2\"\n          }), _jsx(TableCell, {\n            children: \"1-2\"\n          }), _jsx(TableCell, {\n            children: \"1-2\"\n          })]\n        }), _jsxs(TableRow, {\n          children: [_jsx(TableCell, {\n            as: \"th\",\n            scope: \"row\",\n            children: _jsx(_components.p, {\n              children: \"Tags display active filters\"\n            })\n          }), _jsx(TableCell, {\n            children: \"No\"\n          }), _jsx(TableCell, {\n            children: \"Yes\"\n          }), _jsx(TableCell, {\n            children: \"Yes\"\n          })]\n        }), _jsxs(TableRow, {\n          children: [_jsx(TableCell, {\n            as: \"th\",\n            scope: \"row\",\n            children: _jsx(_components.p, {\n              children: \"Submission required\"\n            })\n          }), _jsx(TableCell, {\n            children: \"No\"\n          }), _jsx(TableCell, {\n            children: \"No\"\n          }), _jsx(TableCell, {\n            children: \"Yes\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Small\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1-2 visible filters sit above the dataset. Tags that display active filters are not needed in this case, as the filters are always visible.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/patterns-search-filters--table-small\",\n        children: \"View Storybook preview\"\n      })\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/search-filters-table-small.png\",\n      alt: \"Screenshot of the small table filtering pattern\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Medium\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"3-6 filters are displayed in an accordion that is triggered by a â€˜Show filtersâ€™ button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1 to 2 of the most used filters can be displayed outside the accordion to make them easier and faster to access.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Applied filters are displayed as tags under the filter inputs. This helps users quickly see which filters have been applied. Filters can be removed by dismissing the tags.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/patterns-search-filters--table-medium\",\n        children: \"View Storybook preview\"\n      })\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/search-filters-table-medium.png\",\n      alt: \"Screenshot of the medium table filtering pattern\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Large\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"6 or more filters are displayed in a drawer that is triggered by a â€˜Show filtersâ€™ button. The drawer has a submit button that applies the filters.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1 to 2 of the most used filters can be displayed outside the drawer to make them easier and faster to access.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Applied filters are displayed as tags under the filter inputs. This helps users quickly see which filters have been applied. Filters can be removed by dismissing the tags.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/patterns-search-filters--table-large\",\n        children: \"View Storybook preview\"\n      })\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/search-filters-table-large.png\",\n      alt: \"Screenshot of the large table filtering pattern\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Actions in drawer\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/components/drawer\",\n        children: \"Drawer\"\n      }), \" component should contain a total of 4 actions:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Apply filters button:\"\n        }), \" When pressed, filters should be applied and the drawer should be closed.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Clear filters button:\"\n        }), \" When pressed, filters should be reset to their original state. The drawer should stay open.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Close button:\"\n        }), \" When pressed, the drawer should close. Any changes that have been made since opening the drawer should be discarded. This is essentially the same as the â€˜Cancelâ€™ button.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Cancel button:\"\n        }), \" When pressed, the drawer should close. Any changes that have been made since opening the drawer should be discarded. This is essentially the same as the â€˜Closeâ€™ button.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Search filter sidebar\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you have filters that need to be quickly accessed on a regular basis, you could consider putting them in a \", _jsx(_components.a, {\n        href: \"/components/filter-sidebar\",\n        children: \"Filter sidebar\"\n      }), \" on the left so that they are always visible. The filter sidebar makes it faster and easier for users to access filters.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ensure that the correct HTML order is maintained by including a hero banner at the top, followed by the filter sidebar on the left, and the card listing on the right.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since the filters are always visible, there is no need to also include tags to show the active filters.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/patterns-search-filters--cards\",\n        children: \"View Storybook preview\"\n      })\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/search-filters-search-filter-sidebar.png\",\n      alt: \"Screenshot of the search filter sidebar pattern\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a search filter doesnâ€™t match any data, use an \", _jsx(_components.a, {\n        href: \"/patterns/loading-error-empty-states\",\n        children: \"empty state\"\n      }), \" to let users know that they need to clear or change the search filter.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1}>\\n\\t\\t<Flex\\n\\t\\t\\tgap={1}\\n\\t\\t\\tjustifyContent=\\\"space-between\\\"\\n\\t\\t\\tflexDirection={['column', 'row']}\\n\\t\\t>\\n\\t\\t\\t<Flex\\n\\t\\t\\t\\tflexDirection={['column', 'row']}\\n\\t\\t\\t\\tgap={1}\\n\\t\\t\\t\\talignItems={['flex-start', 'flex-end']}\\n\\t\\t\\t>\\n\\t\\t\\t\\t<SearchInput label=\\\"Search\\\" hideOptionalLabel />\\n\\t\\t\\t\\t<Button variant=\\\"secondary\\\" iconAfter={FilterIcon}>\\n\\t\\t\\t\\t\\tShow filters\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</Flex>\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tlabel=\\\"Sort by\\\"\\n\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'newest', label: 'Newest to oldest' },\\n\\t\\t\\t\\t\\t{ value: 'old', label: 'Oldest to newest' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t/>\\n\\t\\t</Flex>\\n\\t\\t<Divider />\\n\\t</Stack>\\n\\t<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t\\t<Stack gap={1}>\\n\\t\\t\\t<HelpIcon size=\\\"lg\\\" color=\\\"muted\\\" />\\n\\t\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\t\\tNo results found\\n\\t\\t\\t</Heading>\\n\\t\\t\\t<Text>Try adjusting your filter options.</Text>\\n\\t\\t</Stack>\\n\\t\\t<Button variant=\\\"secondary\\\">Clear filters</Button>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Templates\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Coming soon\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Search filters","description":"Search filters help users find what theyâ€™re looking for by displaying options that meet specified criteria.","figmaTemplateNodeId":"18586-56265","githubTemplatePath":"/.storybook/stories/DataFiltering","storybookPath":"/story/patterns-search-filters--cards","relatedComponents":["card","drawer","filter-sidebar","pagination","table"]}},"content":"\nSearch filters help users find what theyâ€™re looking for by displaying options that meet specified criteria.\n\nApplied filters are displayed as tags, so users can quickly see which filters have been applied to the dataset. Filters can be removed by dismissing the tags.\n\nThe dataset should be displayed in a [Table](/components/table) or a list of [Cards](/components/card) under the search filters. Refer to the specific component guidance to help determine which is more suitable to display your dataset.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1}>\n\t\t<Flex\n\t\t\tgap={1}\n\t\t\tjustifyContent=\"space-between\"\n\t\t\tflexDirection={['column', 'row']}\n\t\t>\n\t\t\t<Flex\n\t\t\t\tflexDirection={['column', 'row']}\n\t\t\t\tgap={1}\n\t\t\t\talignItems={['flex-start', 'flex-end']}\n\t\t\t>\n\t\t\t\t<div aria-label=\"Site\" role=\"search\">\n\t\t\t\t\t<SearchInput label=\"Search\" hideOptionalLabel />\n\t\t\t\t</div>\n\t\t\t\t<Button variant=\"secondary\" iconAfter={FilterIcon}>\n\t\t\t\t\tShow filters\n\t\t\t\t</Button>\n\t\t\t</Flex>\n\t\t\t<Select\n\t\t\t\tlabel=\"Sort by\"\n\t\t\t\thideOptionalLabel\n\t\t\t\toptions={[\n\t\t\t\t\t{ value: 'newest', label: 'Newest to oldest' },\n\t\t\t\t\t{ value: 'old', label: 'Oldest to newest' },\n\t\t\t\t]}\n\t\t\t/>\n\t\t</Flex>\n\t\t<Flex flexWrap=\"wrap\" gap={0.75} alignItems=\"flex-end\">\n\t\t\t<Tags\n\t\t\t\theading={<Text fontWeight=\"bold\">Active filters</Text>}\n\t\t\t\titems={[\n\t\t\t\t\t{ label: 'Category: Plant', onRemove: console.log },\n\t\t\t\t\t{ label: 'Type: Organic', onRemove: console.log },\n\t\t\t\t\t{ label: 'Assignee: John', onRemove: console.log },\n\t\t\t\t]}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"text\"\n\t\t\t\tonClick={console.log}\n\t\t\t\ticonAfter={CloseIcon}\n\t\t\t>\n\t\t\t\tClear filters\n\t\t\t</Button>\n\t\t</Flex>\n\t\t<Divider />\n\t</Stack>\n\t<Stack gap={1}>\n\t\t<H2>\n\t\t\t<span role=\"status\">25 results</span>\n\t\t</H2>\n\t\t{Array.from(Array(5).keys()).map((idx) => (\n\t\t\t<Card key={idx} shadow clickable>\n\t\t\t\t<CardInner>\n\t\t\t\t\t<Stack gap={1}>\n\t\t\t\t\t\t<H3>\n\t\t\t\t\t\t\t<CardLink href=\"#\">Card heading</CardLink>\n\t\t\t\t\t\t</H3>\n\t\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\t\tLorem ipsum dolor, sit amet consectetur adipisicing elit. In,\n\t\t\t\t\t\t\tvoluptat\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Stack>\n\t\t\t\t</CardInner>\n\t\t\t</Card>\n\t\t))}\n\t</Stack>\n\t<PaginationButtons\n\t\tcurrentPage={5}\n\t\ttotalPages={10}\n\t\tonChange={(page) => console.log(page)}\n\t/>\n</Stack>\n```\n\n<DoHeading />\n\n- choose the right filter pattern to meet user needs\n- prioritise filters by expected usage\n- display 1-2 of the most important filters above the dataset\n- include [loading, empty, and error states](/patterns/loading-error-empty-states)\n\n<DontHeading />\n\n- remove the applied filter tags, as they allow users to see and remove active filters\n\n## Filter inputs\n\nFilters can be made of from multiple input types including:\n\n- [Search input](/component/search-input)\n- [Text input](/components/text-input)\n- [Select](/components/select)\n- [Checkbox](/components/checkbox)\n- [Radio](/components/radio)\n- [Combobox](/components/combobox)\n- [Switch](/components/switch)\n- [Date picker](/components/date-picker)\n- [Date range picker](/components/date-picker)\n\n## Filter sizes\n\nFilters are available in 3 sizes to accommodate a wide range of use cases and data sets:\n\n- **Small:** 1-2 filters\n- **Medium:** 3-6 filters\n- **Large:** 6+ filters\n\n<Table>\n\t<TableCaption>How to decide on filter size</TableCaption>\n\t<TableHead>\n\t\t<TableRow>\n\t\t\t<TableCell />\n\t\t\t<TableHeader width=\"15%\" scope=\"col\">\n\t\t\t\tSmall\n\t\t\t</TableHeader>\n\t\t\t<TableHeader width=\"15%\" scope=\"col\">\n\t\t\t\tMedium\n\t\t\t</TableHeader>\n\t\t\t<TableHeader width=\"15%\" scope=\"col\">\n\t\t\t\tLarge\n\t\t\t</TableHeader>\n\t\t</TableRow>\n\t</TableHead>\n\t<TableBody>\n\t\t<TableRow>\n\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\tNumber of filters\n\t\t\t</TableCell>\n\t\t\t<TableCell>1-2</TableCell>\n\t\t\t<TableCell>3-6</TableCell>\n\t\t\t<TableCell>6+</TableCell>\n\t\t</TableRow>\n\t\t<TableRow>\n\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\tNumber of primary filters\n\t\t\t</TableCell>\n\t\t\t<TableCell>1-2</TableCell>\n\t\t\t<TableCell>1-2</TableCell>\n\t\t\t<TableCell>1-2</TableCell>\n\t\t</TableRow>\n\t\t<TableRow>\n\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\tTags display active filters\n\t\t\t</TableCell>\n\t\t\t<TableCell>No</TableCell>\n\t\t\t<TableCell>Yes</TableCell>\n\t\t\t<TableCell>Yes</TableCell>\n\t\t</TableRow>\n\t\t<TableRow>\n\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\tSubmission required\n\t\t\t</TableCell>\n\t\t\t<TableCell>No</TableCell>\n\t\t\t<TableCell>No</TableCell>\n\t\t\t<TableCell>Yes</TableCell>\n\t\t</TableRow>\n\t</TableBody>\n</Table>\n\n### Small\n\n1-2 visible filters sit above the dataset. Tags that display active filters are not needed in this case, as the filters are always visible.\n\n[View Storybook preview](/storybook/index.html?path=/story/patterns-search-filters--table-small)\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/search-filters-table-small.png\"\n\talt=\"Screenshot of the small table filtering pattern\"\n/>\n\n### Medium\n\n3-6 filters are displayed in an accordion that is triggered by a â€˜Show filtersâ€™ button.\n\n1 to 2 of the most used filters can be displayed outside the accordion to make them easier and faster to access.\n\nApplied filters are displayed as tags under the filter inputs. This helps users quickly see which filters have been applied. Filters can be removed by dismissing the tags.\n\n[View Storybook preview](/storybook/index.html?path=/story/patterns-search-filters--table-medium)\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/search-filters-table-medium.png\"\n\talt=\"Screenshot of the medium table filtering pattern\"\n/>\n\n### Large\n\n6 or more filters are displayed in a drawer that is triggered by a â€˜Show filtersâ€™ button. The drawer has a submit button that applies the filters.\n\n1 to 2 of the most used filters can be displayed outside the drawer to make them easier and faster to access.\n\nApplied filters are displayed as tags under the filter inputs. This helps users quickly see which filters have been applied. Filters can be removed by dismissing the tags.\n\n[View Storybook preview](/storybook/index.html?path=/story/patterns-search-filters--table-large)\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/search-filters-table-large.png\"\n\talt=\"Screenshot of the large table filtering pattern\"\n/>\n\n### Actions in drawer\n\nThe [Drawer](/components/drawer) component should contain a total of 4 actions:\n\n1. **Apply filters button:** When pressed, filters should be applied and the drawer should be closed.\n2. **Clear filters button:** When pressed, filters should be reset to their original state. The drawer should stay open.\n3. **Close button:** When pressed, the drawer should close. Any changes that have been made since opening the drawer should be discarded. This is essentially the same as the â€˜Cancelâ€™ button.\n4. **Cancel button:** When pressed, the drawer should close. Any changes that have been made since opening the drawer should be discarded. This is essentially the same as the â€˜Closeâ€™ button.\n\n## Search filter sidebar\n\nIf you have filters that need to be quickly accessed on a regular basis, you could consider putting them in a [Filter sidebar](/components/filter-sidebar) on the left so that they are always visible. The filter sidebar makes it faster and easier for users to access filters.\n\nEnsure that the correct HTML order is maintained by including a hero banner at the top, followed by the filter sidebar on the left, and the card listing on the right.\n\nSince the filters are always visible, there is no need to also include tags to show the active filters.\n\n[View Storybook preview](/storybook/index.html?path=/story/patterns-search-filters--cards)\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/search-filters-search-filter-sidebar.png\"\n\talt=\"Screenshot of the search filter sidebar pattern\"\n/>\n\n## Empty state\n\nWhen a search filter doesnâ€™t match any data, use an [empty state](/patterns/loading-error-empty-states) to let users know that they need to clear or change the search filter.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1}>\n\t\t<Flex\n\t\t\tgap={1}\n\t\t\tjustifyContent=\"space-between\"\n\t\t\tflexDirection={['column', 'row']}\n\t\t>\n\t\t\t<Flex\n\t\t\t\tflexDirection={['column', 'row']}\n\t\t\t\tgap={1}\n\t\t\t\talignItems={['flex-start', 'flex-end']}\n\t\t\t>\n\t\t\t\t<SearchInput label=\"Search\" hideOptionalLabel />\n\t\t\t\t<Button variant=\"secondary\" iconAfter={FilterIcon}>\n\t\t\t\t\tShow filters\n\t\t\t\t</Button>\n\t\t\t</Flex>\n\t\t\t<Select\n\t\t\t\tlabel=\"Sort by\"\n\t\t\t\thideOptionalLabel\n\t\t\t\toptions={[\n\t\t\t\t\t{ value: 'newest', label: 'Newest to oldest' },\n\t\t\t\t\t{ value: 'old', label: 'Oldest to newest' },\n\t\t\t\t]}\n\t\t\t/>\n\t\t</Flex>\n\t\t<Divider />\n\t</Stack>\n\t<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t\t<Stack gap={1}>\n\t\t\t<HelpIcon size=\"lg\" color=\"muted\" />\n\t\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\t\tNo results found\n\t\t\t</Heading>\n\t\t\t<Text>Try adjusting your filter options.</Text>\n\t\t</Stack>\n\t\t<Button variant=\"secondary\">Clear filters</Button>\n\t</Stack>\n</Stack>\n```\n\n## Templates\n\nComing soon\n","data":{"title":"Search filters","description":"Search filters help users find what theyâ€™re looking for by displaying options that meet specified criteria.","figmaTemplateNodeId":"18586-56265","githubTemplatePath":"/.storybook/stories/DataFiltering","storybookPath":"/story/patterns-search-filters--cards","relatedComponents":["card","drawer","filter-sidebar","pagination","table"]},"title":"Search filters","description":"Search filters help users find what theyâ€™re looking for by displaying options that meet specified criteria.","figmaTemplateNodeId":"18586-56265","githubTemplatePath":"/.storybook/stories/DataFiltering","storybookPath":"/story/patterns-search-filters--cards","relatedComponents":["card","drawer","filter-sidebar","pagination","table"]}],"relatedComponents":null},"__N_SSG":true}