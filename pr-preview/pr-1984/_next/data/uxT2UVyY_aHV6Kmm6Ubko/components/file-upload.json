{"pageProps":{"pkg":{"slug":"file-upload","name":"file-upload","title":"File upload","description":"The File upload component allows users to attach one or multiple files to a form via drag-and-drop or by browsing their device.","storybookPath":"/story/forms-fileupload--basic","figmaGalleryNodeId":"12444%3A100384","subNavItems":[{"label":"Overview","href":"/components/file-upload","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-upload/docs/overview.mdx"},{"label":"Code","href":"/components/file-upload/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-upload/docs/code.mdx"}],"relatedComponents":["file-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"File upload"}],"toc":[{"id":"multiple-files","title":"Multiple files","level":2,"slug":"multiple-files","items":[]},{"id":"maximum-file-size","title":"Maximum file size","level":2,"slug":"maximum-file-size","items":[]},{"id":"accepted-files","title":"Accepted files","level":2,"slug":"accepted-files","items":[{"id":"custom-accepted-file-types","title":"Custom accepted file types","level":3,"slug":"custom-accepted-file-types","items":[]}]},{"id":"hiding-thumbnails","title":"Hiding thumbnails","level":2,"slug":"hiding-thumbnails","items":[]},{"id":"indicating-upload-status","title":"Indicating upload status","level":2,"slug":"indicating-upload-status","items":[{"id":"uploading-on-submission","title":"Uploading on submission","level":3,"slug":"uploading-on-submission","items":[]},{"id":"uploading-files-instantly","title":"Uploading files instantly","level":3,"slug":"uploading-files-instantly","items":[]}]},{"id":"existing-files","title":"Existing files","level":2,"slug":"existing-files","items":[]},{"id":"required","title":"Required","level":2,"slug":"required","items":[]},{"id":"hide-optional-label","title":"Hide optional label","level":2,"slug":"hide-optional-label","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn (\\n\\t\\t<FileUpload label=\\\"Upload documents\\\" value={value} onChange={setValue} />\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"File upload is used in forms to enable users to upload files. Unlike \", _jsx(_components.a, {\n        href: \"/components/file-input\",\n        children: \"File input\"\n      }), \" it can be used to upload multiple files, restrict the number, types and size of files, plus much more. There are 2 ways to upload – via drag and drop or by browsing the device.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"FileUpload\"\n      }), \" is a \", _jsx(_components.a, {\n        href: \"https://reactjs.org/docs/forms.html#controlled-components\",\n        children: \"controlled component\"\n      }), \".\"]\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"upload selected files instantly as they are selected or on submission\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"specify accepted file types, maximum file size and whether the user can upload one file at a time or several at once\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"include hint text to provide more general information about the field/file\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"indicate file uploading state\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make use of the ‘instant upload’ pattern if your backend supports it\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Consider the ‘simple download’ pattern for small screens\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"add a standalone Submit file button inside a form\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"include other unrelated fields on the page\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use in modals or page alerts\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"change the default behaviour of the component by adding a standalone upload file button.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Multiple files\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Selecting multiple files is also supported with FileUpload. Simply add \", _jsx(_components.code, {\n        children: \"multiple={true}\"\n      }), \", and you can select as many files as you want. You can also set \", _jsx(_components.code, {\n        children: \"maxFiles\"\n      }), \" to limit how many files can be selected.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn (\\n\\t\\t<FileUpload\\n\\t\\t\\tlabel=\\\"Upload files\\\"\\n\\t\\t\\thint=\\\"Upload a maximum of three files\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tmultiple={true}\\n\\t\\t\\tmaxFiles={2}\\n\\t\\t\\tmaxSize={200}\\n\\t\\t\\taccept={['image/jpeg', 'image/png']}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Maximum file size\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"maxSize\"\n      }), \" prop to set a maximum size for each file. This value is measured in kilobytes (kB).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<FileUpload maxSize={200} /> // 200kB\\n<FileUpload maxSize={20000} /> // 20MB\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accepted files\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"accept\"\n      }), \" prop to specify what file types are allowed to be selected.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For a complete list allowed file formats, please refer to \", _jsx(_components.a, {\n        href: \"https://github.com/agriculturegovau/agds-next/blob/main/packages/react/src/file-upload/utils.tsx\",\n        children: \"the source code\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<FileUpload label=\\\"Upload image\\\" accept={['image/jpeg', 'image/png']} />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom accepted file types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the file type you need to support isn’t in the list of allowed file formats, you can pass in your own file type to the \", _jsx(_components.code, {\n        children: \"accept\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This can be done by passing an object instead of a string with \", _jsx(_components.code, {\n        children: \"mimeType\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"extensions\"\n      }), \" as keys. Optionally, a \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" key can be used for the summary inside of the component. By default, the label will be generated using the file extension.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<FileUpload\\n\\tlabel=\\\"Upload JavaScript file\\\"\\n\\taccept={[{ mimeType: 'text/javascript', extensions: ['.js'] }]}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hiding thumbnails\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the \", _jsx(_components.code, {\n        children: \"FileUpload\"\n      }), \" component will render a preview of every selected file.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To disable this behaviour, set the \", _jsx(_components.code, {\n        children: \"hideThumbnails\"\n      }), \" prop to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<FileUpload hideThumbnails={true} />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Indicating upload status\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When using FileUpload, you need to consider how to communicate to the user that the upload is in progress. Otherwise the page will appear ‘frozen’ as the operation happens in the background.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Uploading on submission\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example, we are submitting a file as part of a typical form submission to an API.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We recommend using a \", _jsx(_components.a, {\n        href: \"/components/loading\",\n        children: \"LoadingBlanket\"\n      }), \" component as the form submits to indicate to the user that any delays are being caused by a potentially larger file being uploaded. If your backend system supports it, you can also use this UI to indicate upload status as a percentage.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As normal, we indicate that the form is submitting by adding a \", _jsx(_components.code, {\n        children: \"loading={true}\"\n      }), \" to the submit button. This will show animated dots to signify that the user has to wait for the operation to complete.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<FormStack>\\n\\t<div style={{ position: 'relative' }}>\\n\\t\\t<FileUpload label=\\\"Upload documents\\\" multiple={false} />\\n\\t\\t<LoadingBlanket label=\\\"Uploading file (53%)\\\" />\\n\\t</div>\\n\\t<div>\\n\\t\\t<Button loading={true}>Submit</Button>\\n\\t</div>\\n</FormStack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Uploading files instantly\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example, the file is instantly uploaded to a file hosting service, and the URL of the uploaded asset would be added to the form for submission. This means the form should not be allowed to submit until all assets are uploaded, but that the submission should be very quick as it’s only text content being submitted.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"FileUpload\"\n      }), \" component allows you to indicate the status of an upload via a \", _jsx(_components.code, {\n        children: \"file.status\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst uploadedFile = createExampleImageFile({ status: 'success' });\\n\\tconst uploadingFile = createExampleFile({ status: 'uploading' });\\n\\n\\tconst [value, setValue] = React.useState([uploadedFile, uploadingFile]);\\n\\n\\tfunction onChange(files) {\\n\\t\\tsetValue(\\n\\t\\t\\tfiles.map((file) => {\\n\\t\\t\\t\\tfile.status = file.status || 'uploading';\\n\\t\\t\\t\\treturn file;\\n\\t\\t\\t})\\n\\t\\t);\\n\\t\\t// Show uploaded state after simulated network request\\n\\t\\tsetTimeout(() => {\\n\\t\\t\\tsetValue(\\n\\t\\t\\t\\tfiles.map((file) => {\\n\\t\\t\\t\\t\\tif (file.status == 'uploading') {\\n\\t\\t\\t\\t\\t\\tfile.status = 'success';\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn file;\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}, 1500);\\n\\t}\\n\\n\\treturn (\\n\\t\\t<FileUpload\\n\\t\\t\\tlabel=\\\"Upload documents\\\"\\n\\t\\t\\tmultiple={true}\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={onChange}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Existing files\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can display a list of files that have already been uploaded by using the \", _jsx(_components.code, {\n        children: \"existingFiles\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onRemoveExistingFile\"\n      }), \" props.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Unlike the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" prop, which expects an array of \", _jsx(_components.code, {\n        children: \"File\"\n      }), \" objects, \", _jsx(_components.code, {\n        children: \"existingFiles\"\n      }), \" expects an array of objects with a name, size and thumbnail url.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a user attempts to delete an existing file, a destructive confirmation modal should be displayed. If confirmed, the file should be deleted on the server.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Image files should be displayed with thumbnails which are 144px by 144px. Passing full-size images to \", _jsx(_components.code, {\n        children: \"thumbnailSrc\"\n      }), \" prop will result in unnecessarily longer load times.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [existingFiles, setExistingFiles] = useState([\\n\\t\\t{\\n\\t\\t\\tname: 'example.png',\\n\\t\\t\\tsize: 123456,\\n\\t\\t\\tthumbnailSrc: 'https://placehold.co/144',\\n\\t\\t\\thref: '#',\\n\\t\\t\\t// Use the meta key to keep track of any extra file info\\n\\t\\t\\t// This can be useful info when deleting the file\\n\\t\\t\\tmeta: { uid: 'abc-def', bucketId: '123-456' },\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'example-no-thumbnail.doc',\\n\\t\\t\\tsize: 654321,\\n\\t\\t\\thref: '#',\\n\\t\\t\\t// Use the meta key to keep track of any extra file info\\n\\t\\t\\t// This can be useful info when deleting the file\\n\\t\\t\\tmeta: { uid: 'fed-cba', bucketId: '654-321' },\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'example-download-this-page.html',\\n\\t\\t\\tsize: 999,\\n\\t\\t\\thref: '/components/file-upload',\\n\\t\\t\\t// Instructs the browser to treat the link as a download\\n\\t\\t\\tdownload: true,\\n\\t\\t\\t// Use the meta key to keep track of any extra file info\\n\\t\\t\\t// This can be useful info when deleting the file\\n\\t\\t\\tmeta: { uid: 'zyx-wvu', bucketId: '999-888' },\\n\\t\\t},\\n\\t]);\\n\\n\\tfunction onRemoveExistingFile(fileToRemove) {\\n\\t\\tsetExistingFiles((existingFiles) =>\\n\\t\\t\\texistingFiles.filter((file) => file.meta.uid !== fileToRemove.meta.uid)\\n\\t\\t);\\n\\t}\\n\\n\\tconst [value, setValue] = React.useState();\\n\\n\\treturn (\\n\\t\\t<FileUpload\\n\\t\\t\\tlabel=\\\"Upload documents\\\"\\n\\t\\t\\tmultiple={true}\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\texistingFiles={existingFiles}\\n\\t\\t\\tonRemoveExistingFile={onRemoveExistingFile}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Required fields do not append ‘(optional)’ to the label and also use \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen readers that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indicate to screen reader users that a field is optional but don’t want to show the ‘(optional)’ label.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState([]);\\n\\treturn (\\n\\t\\t<FileUpload\\n\\t\\t\\tlabel=\\\"Upload a file\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tinvalid={value.length === 0}\\n\\t\\t\\trequired={true}\\n\\t\\t\\tmessage=\\\"Select a file\\\"\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"File upload","description":"The File upload component allows users to attach one or multiple files to a form via drag-and-drop or by browsing their device.","group":"Forms","storybookPath":"/story/forms-fileupload--basic","figmaGalleryNodeId":"12444%3A100384","relatedComponents":["file-input"]}},"relatedPatterns":null,"relatedComponents":[{"slug":"file-input","name":"file-input","title":"File input","description":"The File input component allows users to attach one file to a form field by browsing their device.","storybookPath":"/story/Forms-FileInput--basic","figmaGalleryNodeId":"16180%3A41550","subNavItems":[{"label":"Overview","href":"/components/file-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-input/docs/overview.mdx"},{"label":"Code","href":"/components/file-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/file-input/docs/code.mdx"}],"relatedComponents":["file-upload"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}