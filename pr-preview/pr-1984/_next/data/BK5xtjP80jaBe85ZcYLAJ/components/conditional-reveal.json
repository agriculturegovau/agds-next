{"pageProps":{"pkg":{"slug":"conditional-reveal","name":"conditional-reveal","title":"Conditional Reveal","description":"A standardised pattern for conditionally hiding and revealing the amount of content a user views in a form.","storybookPath":"/story/Forms-ConditionalReveal--basic","figmaGalleryNodeId":"REPLACE_ME","subNavItems":[{"label":"Overview","href":"/components/conditional-reveal","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-reveal/docs/overview.mdx"},{"label":"Content","href":"/components/conditional-reveal/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-reveal/docs/content.mdx"},{"label":"Code","href":"/components/conditional-reveal/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-reveal/docs/code.mdx"}],"relatedComponents":null,"relatedPatterns":["conditional-reveal"],"deprecated":false,"unreleased":true},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Conditional Reveal","href":"/components/conditional-reveal"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Conditional Reveal"}],"toc":[{"id":"single-value-field","title":"Single value field","level":2,"slug":"single-value-field","items":[]},{"id":"multiple-value-fields","title":"Multiple value fields","level":2,"slug":"multiple-value-fields","items":[]},{"id":"multiple-related-content","title":"Multiple related content","level":2,"slug":"multiple-related-content","items":[]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"This component aims to standardise the styling and behavior of the \", _jsx(_components.a, {\n        href: \"/patterns/conditional-reveal\",\n        children: \"conditional reveal pattern\"\n      }), \" in the Design System.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The conditional reveal component does not wrap the children in a \", _jsx(_components.a, {\n        href: \"/components/form-stack\",\n        children: \"FormStack\"\n      }), \", you may wrap them but it is not required if the parent element is a \", _jsx(_components.a, {\n        href: \"/components/stack\",\n        children: \"Stack\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"/components/form-stack\",\n        children: \"FormStack\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup block label=\\\"Preferred contact method\\\" required>\\n\\t\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('phone')}>\\n\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Phone number\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to hide and reveal additional content in forms that may not be relevant\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"position directly after the related set of question or input\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"list all related content as children in the same conditional reveal component.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use this component for any other content than forms\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"nest additional conditional reveal components inside of a conditional reveal\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"execute API calls or run heavy processing operators inside the conditional reveal\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Single value field\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Where one input value can be selected (eg. radio or select inputs), you can use multiple conditional reveals to selectively render the conditional content.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\tconst handlerForKey = React.useCallback((e) => setValue(e.target.value), []);\\n\\tconst isChecked = (key) => value === key;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tplaceholder=\\\"Please select\\\"\\n\\t\\t\\t\\tlabel=\\\"How would you like to be contacted?\\\"\\n\\t\\t\\t\\tonChange={handlerForKey}\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'textMessage', label: 'Text message' },\\n\\t\\t\\t\\t\\t{ value: 'email', label: 'E mail' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t\\trequired\\n\\t\\t\\t\\tvalue={value}\\n\\t\\t\\t/>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput inputMode=\\\"text\\\" label=\\\"Mobile phone number\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Multiple value fields\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the same input can create multiple conditional revealed fields or content (such as a checkbox input), you can use one conditional reveal component and apply conditional rendering in the children. Using multiple conditional rendering will create multiple dividers.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState([]);\\n\\tconst handlerForKey = React.useCallback(\\n\\t\\t(key) => () =>\\n\\t\\t\\tsetValue((value) =>\\n\\t\\t\\t\\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\\n\\t\\t\\t),\\n\\t\\t[]\\n\\t);\\n\\tconst isChecked = (key) => value.includes(key);\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup block label=\\\"How would you like to be contacted?\\\" required>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('email')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('email')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('phone')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('phone')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={Boolean(value.length)}>\\n\\t\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Email address\\\" required type=\\\"email\\\" />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Phone number\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Mobile phone number\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Multiple related content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you require more than one field and/or content, place all relevant elements as children of the conditional reveal component.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState('post');\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup block label=\\\"How would you like to be contacted?\\\" required>\\n\\t\\t\\t\\t<Radio checked={isChecked('post')} onChange={handlerForKey('post')}>\\n\\t\\t\\t\\t\\tPost\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('post')}>\\n\\t\\t\\t\\t<H2>Address</H2>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"text\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Street address\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"text\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Suburb, town or city\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"lg\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"State or territory\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ label: 'ACT', value: 'act' },\\n\\t\\t\\t\\t\\t\\t{ label: 'NSW', value: 'nsw' },\\n\\t\\t\\t\\t\\t\\t{ label: 'NT', value: 'nt' },\\n\\t\\t\\t\\t\\t\\t{ label: 'QLD', value: 'qld' },\\n\\t\\t\\t\\t\\t\\t{ label: 'SA', value: 'sa' },\\n\\t\\t\\t\\t\\t\\t{ label: 'TAS', value: 'tas' },\\n\\t\\t\\t\\t\\t\\t{ label: 'VIC', value: 'vic' },\\n\\t\\t\\t\\t\\t\\t{ label: 'WA', value: 'wa' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Post code\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Conditional Reveal","description":"A standardised pattern for conditionally hiding and revealing the amount of content a user views in a form.","group":"Forms","storybookPath":"/story/Forms-ConditionalReveal--basic","unreleased":true,"figmaGalleryNodeId":"REPLACE_ME","relatedPatterns":["conditional-reveal"]}},"relatedPatterns":[{"slug":"conditional-reveal","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"limit what is revealed to a single set of related questions or information that does not require its own submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal the related set of questions under the initial input or controls\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use another page if there are multiple related questions that need a submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"only use with vertically stacked checkboxes or radios.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"reveal a complete form with submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use with horizontally stacked checkboxes or radios\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal anything other than questions or supporting information relating directly to the initial option selected by the user.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Radio\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a specific option from a \", _jsx(_components.a, {\n        href: \"/components/radio\",\n        children: \"Radio\"\n      }), \" control group, additional questions or helpful information relevant to their selection can be revealed. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there a large number of items, use \", _jsx(_components.a, {\n        href: \"/components/select\",\n        children: \"Select\"\n      }), \" instead.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t\\t<ConditionalReveal visible={isChecked('phone')}>\\n\\t\\t\\t\\t<TextInput label=\\\"Phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t\\t<ConditionalReveal visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput label=\\\"Mobile phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a particular \", _jsx(_components.a, {\n        href: \"/components/checkbox\",\n        children: \"Checkbox\"\n      }), \", you can reveal additional questions or provide helpful information that is relevant to the selection after the Checkbox control group. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState([]);\\n\\tconst handlerForKey = React.useCallback(\\n\\t\\t(key) => () =>\\n\\t\\t\\tsetValue((value) =>\\n\\t\\t\\t\\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\\n\\t\\t\\t),\\n\\t\\t[]\\n\\t);\\n\\tconst isChecked = (key) => value.includes(key);\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"How would you like to be contacted?\\\" required block>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('email')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('email')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('phone')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('phone')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={value.length}>\\n\\t\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Phone number\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Mobile phone number\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Select\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a particular option from a \", _jsx(_components.a, {\n        href: \"/components/select\",\n        children: \"Select\"\n      }), \" dropdown, additional questions or helpful information relevant to their selection can be revealed. This ensures that the user only sees content that is pertinent to their choice.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there a small number of items, use \", _jsx(_components.a, {\n        href: \"/components/radio\",\n        children: \"Radio\"\n      }), \" instead.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\tconst handlerForKey = React.useCallback((e) => setValue(e.target.value), []);\\n\\tconst isChecked = (key) => value === key;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tplaceholder=\\\"Please select\\\"\\n\\t\\t\\t\\tlabel=\\\"How would you like to be contacted?\\\"\\n\\t\\t\\t\\tonChange={handlerForKey}\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'post', label: 'Post' },\\n\\t\\t\\t\\t\\t{ value: 'textMessage', label: 'Text message' },\\n\\t\\t\\t\\t\\t{ value: 'email', label: 'E mail' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t\\trequired\\n\\t\\t\\t\\tvalue={value}\\n\\t\\t\\t/>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('post')}>\\n\\t\\t\\t\\t<H2>Address</H2>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"text\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Street address\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"text\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Suburb, town or city\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"lg\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"State or territory\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ label: 'ACT', value: 'act' },\\n\\t\\t\\t\\t\\t\\t{ label: 'NSW', value: 'nsw' },\\n\\t\\t\\t\\t\\t\\t{ label: 'NT', value: 'nt' },\\n\\t\\t\\t\\t\\t\\t{ label: 'QLD', value: 'qld' },\\n\\t\\t\\t\\t\\t\\t{ label: 'SA', value: 'sa' },\\n\\t\\t\\t\\t\\t\\t{ label: 'TAS', value: 'tas' },\\n\\t\\t\\t\\t\\t\\t{ label: 'VIC', value: 'vic' },\\n\\t\\t\\t\\t\\t\\t{ label: 'WA', value: 'wa' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Post code\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput inputMode=\\\"text\\\" label=\\\"Mobile phone number\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState('email');\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\ttype=\\\"email\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Email address\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a email address\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t\\t<ConditionalReveal visible={isChecked('phone')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tlabel=\\\"Phone number\\\"\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a phone number\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t\\t<ConditionalReveal visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tlabel=\\\"Mobile phone number\\\"\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a mobile phone number\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Research\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"March 2025\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before November 2024, additional form elements were conditionally revealed directly after the Radio or Checkbox, inside the control group. The pattern worked well for sighted users who see the relationship and context between the control and conditionally revealed form elements.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, we observed screen reader users becoming disoriented when they encountered additional form elements between items of the control group. In response, we adjusted the design by positioning the additional questions after the control group.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This updated pattern has been tested in two rounds of useability studies. We have observed no issues since the change.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","relatedComponents":["conditional-reveal"]}},"content":"\n<DoHeading />\n\n- limit what is revealed to a single set of related questions or information that does not require its own submit action\n- reveal the related set of questions under the initial input or controls\n- use another page if there are multiple related questions that need a submit action\n- only use with vertically stacked checkboxes or radios.\n\n<DontHeading />\n\n- reveal a complete form with submit action\n- use with horizontally stacked checkboxes or radios\n- reveal anything other than questions or supporting information relating directly to the initial option selected by the user.\n\n## Radio\n\nWhen a user selects a specific option from a [Radio](/components/radio) control group, additional questions or helpful information relevant to their selection can be revealed. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\n\nIf there a large number of items, use [Select](/components/select) instead.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\t\tEmail\n\t\t\t\t</Radio>\n\t\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\t\tPhone\n\t\t\t\t</Radio>\n\t\t\t\t<Radio\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Radio>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalReveal visible={isChecked('email')}>\n\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t</ConditionalReveal>\n\t\t\t<ConditionalReveal visible={isChecked('phone')}>\n\t\t\t\t<TextInput label=\"Phone number\" inputMode=\"numeric\" required />\n\t\t\t</ConditionalReveal>\n\t\t\t<ConditionalReveal visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput label=\"Mobile phone number\" inputMode=\"numeric\" required />\n\t\t\t</ConditionalReveal>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Checkbox\n\nWhen a user selects a particular [Checkbox](/components/checkbox), you can reveal additional questions or provide helpful information that is relevant to the selection after the Checkbox control group. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState([]);\n\tconst handlerForKey = React.useCallback(\n\t\t(key) => () =>\n\t\t\tsetValue((value) =>\n\t\t\t\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\n\t\t\t),\n\t\t[]\n\t);\n\tconst isChecked = (key) => value.includes(key);\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"How would you like to be contacted?\" required block>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('email')}\n\t\t\t\t\tonChange={handlerForKey('email')}\n\t\t\t\t>\n\t\t\t\t\tEmail\n\t\t\t\t</Checkbox>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('phone')}\n\t\t\t\t\tonChange={handlerForKey('phone')}\n\t\t\t\t>\n\t\t\t\t\tPhone\n\t\t\t\t</Checkbox>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Checkbox>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalReveal visible={value.length}>\n\t\t\t\t{isChecked('email') && (\n\t\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t\t)}\n\t\t\t\t{isChecked('phone') && (\n\t\t\t\t\t<TextInput inputMode=\"numeric\" label=\"Phone number\" required />\n\t\t\t\t)}\n\t\t\t\t{isChecked('textMessage') && (\n\t\t\t\t\t<TextInput inputMode=\"numeric\" label=\"Mobile phone number\" required />\n\t\t\t\t)}\n\t\t\t</ConditionalReveal>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Select\n\nWhen a user selects a particular option from a [Select](/components/select) dropdown, additional questions or helpful information relevant to their selection can be revealed. This ensures that the user only sees content that is pertinent to their choice.\n\nIf there a small number of items, use [Radio](/components/radio) instead.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState(null);\n\tconst handlerForKey = React.useCallback((e) => setValue(e.target.value), []);\n\tconst isChecked = (key) => value === key;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<Select\n\t\t\t\tplaceholder=\"Please select\"\n\t\t\t\tlabel=\"How would you like to be contacted?\"\n\t\t\t\tonChange={handlerForKey}\n\t\t\t\toptions={[\n\t\t\t\t\t{ value: 'post', label: 'Post' },\n\t\t\t\t\t{ value: 'textMessage', label: 'Text message' },\n\t\t\t\t\t{ value: 'email', label: 'E mail' },\n\t\t\t\t]}\n\t\t\t\trequired\n\t\t\t\tvalue={value}\n\t\t\t/>\n\n\t\t\t<ConditionalReveal visible={isChecked('post')}>\n\t\t\t\t<H2>Address</H2>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"text\"\n\t\t\t\t\tlabel=\"Street address\"\n\t\t\t\t\tmaxWidth=\"xl\"\n\t\t\t\t\trequired\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"text\"\n\t\t\t\t\tlabel=\"Suburb, town or city\"\n\t\t\t\t\tmaxWidth=\"lg\"\n\t\t\t\t\trequired\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t\t<Select\n\t\t\t\t\tlabel=\"State or territory\"\n\t\t\t\t\tmaxWidth=\"sm\"\n\t\t\t\t\toptions={[\n\t\t\t\t\t\t{ label: 'ACT', value: 'act' },\n\t\t\t\t\t\t{ label: 'NSW', value: 'nsw' },\n\t\t\t\t\t\t{ label: 'NT', value: 'nt' },\n\t\t\t\t\t\t{ label: 'QLD', value: 'qld' },\n\t\t\t\t\t\t{ label: 'SA', value: 'sa' },\n\t\t\t\t\t\t{ label: 'TAS', value: 'tas' },\n\t\t\t\t\t\t{ label: 'VIC', value: 'vic' },\n\t\t\t\t\t\t{ label: 'WA', value: 'wa' },\n\t\t\t\t\t]}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\tlabel=\"Post code\"\n\t\t\t\t\trequired\n\t\t\t\t\tmaxWidth=\"sm\"\n\t\t\t\t/>\n\t\t\t</ConditionalReveal>\n\n\t\t\t<ConditionalReveal visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput inputMode=\"text\" label=\"Mobile phone number\" required />\n\t\t\t</ConditionalReveal>\n\n\t\t\t<ConditionalReveal visible={isChecked('email')}>\n\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t</ConditionalReveal>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Invalid\n\nWhen a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState('email');\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\t\tEmail\n\t\t\t\t</Radio>\n\t\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\t\tPhone\n\t\t\t\t</Radio>\n\t\t\t\t<Radio\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Radio>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalReveal visible={isChecked('email')}>\n\t\t\t\t<TextInput\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a email address\"\n\t\t\t\t/>\n\t\t\t</ConditionalReveal>\n\t\t\t<ConditionalReveal visible={isChecked('phone')}>\n\t\t\t\t<TextInput\n\t\t\t\t\tlabel=\"Phone number\"\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a phone number\"\n\t\t\t\t/>\n\t\t\t</ConditionalReveal>\n\t\t\t<ConditionalReveal visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput\n\t\t\t\t\tlabel=\"Mobile phone number\"\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a mobile phone number\"\n\t\t\t\t/>\n\t\t\t</ConditionalReveal>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Research\n\n### March 2025\n\nBefore November 2024, additional form elements were conditionally revealed directly after the Radio or Checkbox, inside the control group. The pattern worked well for sighted users who see the relationship and context between the control and conditionally revealed form elements.\n\nHowever, we observed screen reader users becoming disoriented when they encountered additional form elements between items of the control group. In response, we adjusted the design by positioning the additional questions after the control group.\n\nThis updated pattern has been tested in two rounds of useability studies. We have observed no issues since the change.\n","data":{"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","relatedComponents":["conditional-reveal"]},"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["conditional-reveal"],"relatedPatterns":null}],"relatedComponents":null},"__N_SSG":true}