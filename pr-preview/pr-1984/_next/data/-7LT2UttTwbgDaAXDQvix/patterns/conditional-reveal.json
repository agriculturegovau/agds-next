{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Conditionally revealed form content"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed form content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"conditional-reveal","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"limit what is revealed to a single set of related questions or information that does not require its own submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal the related set of questions under the initial input or controls\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use another page if there are multiple related questions that need a submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"only use with vertically stacked checkboxes or radios.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"reveal a complete form with submit action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use with horizontally stacked checkboxes or radios\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal anything other than questions or supporting information relating directly to the initial option selected by the user.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Radio\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a specific option from a \", _jsx(_components.a, {\n        href: \"/components/radio\",\n        children: \"Radio\"\n      }), \" control group, additional questions or helpful information relevant to their selection can be revealed. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there a large number of items, use \", _jsx(_components.a, {\n        href: \"/components/select\",\n        children: \"Select\"\n      }), \" instead.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t\\t<ConditionalReveal visible={isChecked('phone')}>\\n\\t\\t\\t\\t<TextInput label=\\\"Phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t\\t<ConditionalReveal visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput label=\\\"Mobile phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a particular \", _jsx(_components.a, {\n        href: \"/components/checkbox\",\n        children: \"Checkbox\"\n      }), \", you can reveal additional questions or provide helpful information that is relevant to the selection after the Checkbox control group. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState([]);\\n\\tconst handlerForKey = React.useCallback(\\n\\t\\t(key) => () =>\\n\\t\\t\\tsetValue((value) =>\\n\\t\\t\\t\\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\\n\\t\\t\\t),\\n\\t\\t[]\\n\\t);\\n\\tconst isChecked = (key) => value.includes(key);\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"How would you like to be contacted?\\\" required block>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('email')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('email')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('phone')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('phone')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={value.length}>\\n\\t\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Phone number\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t\\t<TextInput inputMode=\\\"numeric\\\" label=\\\"Mobile phone number\\\" required />\\n\\t\\t\\t\\t)}\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Select\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a user selects a particular option from a \", _jsx(_components.a, {\n        href: \"/components/select\",\n        children: \"Select\"\n      }), \" dropdown, additional questions or helpful information relevant to their selection can be revealed. This ensures that the user only sees content that is pertinent to their choice.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there a small number of items, use \", _jsx(_components.a, {\n        href: \"/components/radio\",\n        children: \"Radio\"\n      }), \" instead.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\tconst handlerForKey = React.useCallback((e) => setValue(e.target.value), []);\\n\\tconst isChecked = (key) => value === key;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tplaceholder=\\\"Please select\\\"\\n\\t\\t\\t\\tlabel=\\\"How would you like to be contacted?\\\"\\n\\t\\t\\t\\tonChange={handlerForKey}\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'post', label: 'Post' },\\n\\t\\t\\t\\t\\t{ value: 'textMessage', label: 'Text message' },\\n\\t\\t\\t\\t\\t{ value: 'email', label: 'E mail' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t\\trequired\\n\\t\\t\\t\\tvalue={value}\\n\\t\\t\\t/>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('post')}>\\n\\t\\t\\t\\t<H2>Address</H2>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"text\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Street address\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"text\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Suburb, town or city\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"lg\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"State or territory\\\"\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ label: 'ACT', value: 'act' },\\n\\t\\t\\t\\t\\t\\t{ label: 'NSW', value: 'nsw' },\\n\\t\\t\\t\\t\\t\\t{ label: 'NT', value: 'nt' },\\n\\t\\t\\t\\t\\t\\t{ label: 'QLD', value: 'qld' },\\n\\t\\t\\t\\t\\t\\t{ label: 'SA', value: 'sa' },\\n\\t\\t\\t\\t\\t\\t{ label: 'TAS', value: 'tas' },\\n\\t\\t\\t\\t\\t\\t{ label: 'VIC', value: 'vic' },\\n\\t\\t\\t\\t\\t\\t{ label: 'WA', value: 'wa' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Post code\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput inputMode=\\\"text\\\" label=\\\"Mobile phone number\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState('email');\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<FormStack>\\n\\t\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\t\\tEmail\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\t\\tPhone\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t\\t<Radio\\n\\t\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tText message\\n\\t\\t\\t\\t</Radio>\\n\\t\\t\\t</ControlGroup>\\n\\n\\t\\t\\t<ConditionalReveal visible={isChecked('email')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\ttype=\\\"email\\\"\\n\\t\\t\\t\\t\\tlabel=\\\"Email address\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a email address\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t\\t<ConditionalReveal visible={isChecked('phone')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tlabel=\\\"Phone number\\\"\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a phone number\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t\\t<ConditionalReveal visible={isChecked('textMessage')}>\\n\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\tlabel=\\\"Mobile phone number\\\"\\n\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\tmessage=\\\"Enter a mobile phone number\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</ConditionalReveal>\\n\\t\\t</FormStack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Research\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"March 2025\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before November 2024, additional form elements were conditionally revealed directly after the Radio or Checkbox, inside the control group. The pattern worked well for sighted users who see the relationship and context between the control and conditionally revealed form elements.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, we observed screen reader users becoming disoriented when they encountered additional form elements between items of the control group. In response, we adjusted the design by positioning the additional questions after the control group.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This updated pattern has been tested in two rounds of useability studies. We have observed no issues since the change.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","relatedComponents":["conditional-reveal"],"relatedPatterns":["search-filters"]}},"content":"\n<DoHeading />\n\n- limit what is revealed to a single set of related questions or information that does not require its own submit action\n- reveal the related set of questions under the initial input or controls\n- use another page if there are multiple related questions that need a submit action\n- only use with vertically stacked checkboxes or radios.\n\n<DontHeading />\n\n- reveal a complete form with submit action\n- use with horizontally stacked checkboxes or radios\n- reveal anything other than questions or supporting information relating directly to the initial option selected by the user.\n\n## Radio\n\nWhen a user selects a specific option from a [Radio](/components/radio) control group, additional questions or helpful information relevant to their selection can be revealed. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\n\nIf there a large number of items, use [Select](/components/select) instead.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\t\tEmail\n\t\t\t\t</Radio>\n\t\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\t\tPhone\n\t\t\t\t</Radio>\n\t\t\t\t<Radio\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Radio>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalReveal visible={isChecked('email')}>\n\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t</ConditionalReveal>\n\t\t\t<ConditionalReveal visible={isChecked('phone')}>\n\t\t\t\t<TextInput label=\"Phone number\" inputMode=\"numeric\" required />\n\t\t\t</ConditionalReveal>\n\t\t\t<ConditionalReveal visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput label=\"Mobile phone number\" inputMode=\"numeric\" required />\n\t\t\t</ConditionalReveal>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Checkbox\n\nWhen a user selects a particular [Checkbox](/components/checkbox), you can reveal additional questions or provide helpful information that is relevant to the selection after the Checkbox control group. Revealing content after a selection is made ensures a user will only see content that is relevant to them.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState([]);\n\tconst handlerForKey = React.useCallback(\n\t\t(key) => () =>\n\t\t\tsetValue((value) =>\n\t\t\t\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\n\t\t\t),\n\t\t[]\n\t);\n\tconst isChecked = (key) => value.includes(key);\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"How would you like to be contacted?\" required block>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('email')}\n\t\t\t\t\tonChange={handlerForKey('email')}\n\t\t\t\t>\n\t\t\t\t\tEmail\n\t\t\t\t</Checkbox>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('phone')}\n\t\t\t\t\tonChange={handlerForKey('phone')}\n\t\t\t\t>\n\t\t\t\t\tPhone\n\t\t\t\t</Checkbox>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Checkbox>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalReveal visible={value.length}>\n\t\t\t\t{isChecked('email') && (\n\t\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t\t)}\n\t\t\t\t{isChecked('phone') && (\n\t\t\t\t\t<TextInput inputMode=\"numeric\" label=\"Phone number\" required />\n\t\t\t\t)}\n\t\t\t\t{isChecked('textMessage') && (\n\t\t\t\t\t<TextInput inputMode=\"numeric\" label=\"Mobile phone number\" required />\n\t\t\t\t)}\n\t\t\t</ConditionalReveal>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Select\n\nWhen a user selects a particular option from a [Select](/components/select) dropdown, additional questions or helpful information relevant to their selection can be revealed. This ensures that the user only sees content that is pertinent to their choice.\n\nIf there a small number of items, use [Radio](/components/radio) instead.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState(null);\n\tconst handlerForKey = React.useCallback((e) => setValue(e.target.value), []);\n\tconst isChecked = (key) => value === key;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<Select\n\t\t\t\tplaceholder=\"Please select\"\n\t\t\t\tlabel=\"How would you like to be contacted?\"\n\t\t\t\tonChange={handlerForKey}\n\t\t\t\toptions={[\n\t\t\t\t\t{ value: 'post', label: 'Post' },\n\t\t\t\t\t{ value: 'textMessage', label: 'Text message' },\n\t\t\t\t\t{ value: 'email', label: 'E mail' },\n\t\t\t\t]}\n\t\t\t\trequired\n\t\t\t\tvalue={value}\n\t\t\t/>\n\n\t\t\t<ConditionalReveal visible={isChecked('post')}>\n\t\t\t\t<H2>Address</H2>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"text\"\n\t\t\t\t\tlabel=\"Street address\"\n\t\t\t\t\tmaxWidth=\"xl\"\n\t\t\t\t\trequired\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"text\"\n\t\t\t\t\tlabel=\"Suburb, town or city\"\n\t\t\t\t\tmaxWidth=\"lg\"\n\t\t\t\t\trequired\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t\t<Select\n\t\t\t\t\tlabel=\"State or territory\"\n\t\t\t\t\tmaxWidth=\"sm\"\n\t\t\t\t\toptions={[\n\t\t\t\t\t\t{ label: 'ACT', value: 'act' },\n\t\t\t\t\t\t{ label: 'NSW', value: 'nsw' },\n\t\t\t\t\t\t{ label: 'NT', value: 'nt' },\n\t\t\t\t\t\t{ label: 'QLD', value: 'qld' },\n\t\t\t\t\t\t{ label: 'SA', value: 'sa' },\n\t\t\t\t\t\t{ label: 'TAS', value: 'tas' },\n\t\t\t\t\t\t{ label: 'VIC', value: 'vic' },\n\t\t\t\t\t\t{ label: 'WA', value: 'wa' },\n\t\t\t\t\t]}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\tlabel=\"Post code\"\n\t\t\t\t\trequired\n\t\t\t\t\tmaxWidth=\"sm\"\n\t\t\t\t/>\n\t\t\t</ConditionalReveal>\n\n\t\t\t<ConditionalReveal visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput inputMode=\"text\" label=\"Mobile phone number\" required />\n\t\t\t</ConditionalReveal>\n\n\t\t\t<ConditionalReveal visible={isChecked('email')}>\n\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t</ConditionalReveal>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Invalid\n\nWhen a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState('email');\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\n\treturn (\n\t\t<FormStack>\n\t\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\t\tEmail\n\t\t\t\t</Radio>\n\t\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\t\tPhone\n\t\t\t\t</Radio>\n\t\t\t\t<Radio\n\t\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t\t>\n\t\t\t\t\tText message\n\t\t\t\t</Radio>\n\t\t\t</ControlGroup>\n\n\t\t\t<ConditionalReveal visible={isChecked('email')}>\n\t\t\t\t<TextInput\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a email address\"\n\t\t\t\t/>\n\t\t\t</ConditionalReveal>\n\t\t\t<ConditionalReveal visible={isChecked('phone')}>\n\t\t\t\t<TextInput\n\t\t\t\t\tlabel=\"Phone number\"\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a phone number\"\n\t\t\t\t/>\n\t\t\t</ConditionalReveal>\n\t\t\t<ConditionalReveal visible={isChecked('textMessage')}>\n\t\t\t\t<TextInput\n\t\t\t\t\tlabel=\"Mobile phone number\"\n\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\trequired\n\t\t\t\t\tinvalid\n\t\t\t\t\tmessage=\"Enter a mobile phone number\"\n\t\t\t\t/>\n\t\t\t</ConditionalReveal>\n\t\t</FormStack>\n\t);\n};\n```\n\n## Research\n\n### March 2025\n\nBefore November 2024, additional form elements were conditionally revealed directly after the Radio or Checkbox, inside the control group. The pattern worked well for sighted users who see the relationship and context between the control and conditionally revealed form elements.\n\nHowever, we observed screen reader users becoming disoriented when they encountered additional form elements between items of the control group. In response, we adjusted the design by positioning the additional questions after the control group.\n\nThis updated pattern has been tested in two rounds of useability studies. We have observed no issues since the change.\n","data":{"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","relatedComponents":["conditional-reveal"],"relatedPatterns":["search-filters"]},"title":"Conditionally revealed form content","description":"Revealing additional form questions and help content after a user selects an option can reduce the amount of content a user must read when completing complex forms.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["conditional-reveal"],"relatedPatterns":["search-filters"]},"toc":[{"id":"radio","title":"Radio","level":2,"slug":"radio","items":[]},{"id":"checkbox","title":"Checkbox","level":2,"slug":"checkbox","items":[]},{"id":"select","title":"Select","level":2,"slug":"select","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"research","title":"Research","level":2,"slug":"research","items":[{"id":"march-2025","title":"March 2025","level":3,"slug":"march-2025","items":[]}]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]}],"relatedComponents":[{"slug":"conditional-reveal","name":"conditional-reveal","title":"Conditional Reveal","description":"A standardised pattern for conditionally hiding and revealing the amount of content a user views in a form.","storybookPath":"/story/Forms-ConditionalReveal--basic","figmaGalleryNodeId":"REPLACE_ME","subNavItems":[{"label":"Overview","href":"/components/conditional-reveal","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-reveal/docs/overview.mdx"},{"label":"Content","href":"/components/conditional-reveal/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-reveal/docs/content.mdx"},{"label":"Code","href":"/components/conditional-reveal/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/conditional-reveal/docs/code.mdx"}],"relatedComponents":null,"relatedPatterns":["conditional-reveal"],"deprecated":false,"unreleased":true}],"relatedPatterns":[{"slug":"search-filters","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading, Table, TableCaption, TableHead, TableRow, TableCell, TableHeader, TableBody, ImageWithBorder} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  if (!ImageWithBorder) _missingMdxReference(\"ImageWithBorder\", true);\n  if (!Table) _missingMdxReference(\"Table\", true);\n  if (!TableBody) _missingMdxReference(\"TableBody\", true);\n  if (!TableCaption) _missingMdxReference(\"TableCaption\", true);\n  if (!TableCell) _missingMdxReference(\"TableCell\", true);\n  if (!TableHead) _missingMdxReference(\"TableHead\", true);\n  if (!TableHeader) _missingMdxReference(\"TableHeader\", true);\n  if (!TableRow) _missingMdxReference(\"TableRow\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Search filters help users find what they’re looking for by displaying options that meet specified criteria.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Applied filters are displayed as tags, so users can quickly see which filters have been applied to the dataset. Filters can be removed by dismissing the tags.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The dataset should be displayed in a \", _jsx(_components.a, {\n        href: \"/components/table\",\n        children: \"Table\"\n      }), \" or a list of \", _jsx(_components.a, {\n        href: \"/components/card\",\n        children: \"Cards\"\n      }), \" under the search filters. Refer to the specific component guidance to help determine which is more suitable to display your dataset.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1}>\\n\\t\\t<Flex\\n\\t\\t\\tgap={1}\\n\\t\\t\\tjustifyContent=\\\"space-between\\\"\\n\\t\\t\\tflexDirection={['column', 'row']}\\n\\t\\t>\\n\\t\\t\\t<Flex\\n\\t\\t\\t\\tflexDirection={['column', 'row']}\\n\\t\\t\\t\\tgap={1}\\n\\t\\t\\t\\talignItems={['flex-start', 'flex-end']}\\n\\t\\t\\t>\\n\\t\\t\\t\\t<div aria-label=\\\"Site\\\" role=\\\"search\\\">\\n\\t\\t\\t\\t\\t<SearchInput label=\\\"Search\\\" hideOptionalLabel />\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<Button variant=\\\"secondary\\\" iconAfter={FilterIcon}>\\n\\t\\t\\t\\t\\tShow filters\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</Flex>\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tlabel=\\\"Sort by\\\"\\n\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'newest', label: 'Newest to oldest' },\\n\\t\\t\\t\\t\\t{ value: 'old', label: 'Oldest to newest' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t/>\\n\\t\\t</Flex>\\n\\t\\t<Flex flexWrap=\\\"wrap\\\" gap={0.75} alignItems=\\\"flex-end\\\">\\n\\t\\t\\t<Tags\\n\\t\\t\\t\\theading={<Text fontWeight=\\\"bold\\\">Active filters</Text>}\\n\\t\\t\\t\\titems={[\\n\\t\\t\\t\\t\\t{ label: 'Category: Plant', onRemove: console.log },\\n\\t\\t\\t\\t\\t{ label: 'Type: Organic', onRemove: console.log },\\n\\t\\t\\t\\t\\t{ label: 'Assignee: John', onRemove: console.log },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t/>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\tvariant=\\\"text\\\"\\n\\t\\t\\t\\tonClick={console.log}\\n\\t\\t\\t\\ticonAfter={CloseIcon}\\n\\t\\t\\t>\\n\\t\\t\\t\\tClear filters\\n\\t\\t\\t</Button>\\n\\t\\t</Flex>\\n\\t\\t<Divider />\\n\\t</Stack>\\n\\t<Stack gap={1}>\\n\\t\\t<H2>\\n\\t\\t\\t<span role=\\\"status\\\">25 results</span>\\n\\t\\t</H2>\\n\\t\\t{Array.from(Array(5).keys()).map((idx) => (\\n\\t\\t\\t<Card key={idx} shadow clickable>\\n\\t\\t\\t\\t<CardInner>\\n\\t\\t\\t\\t\\t<Stack gap={1}>\\n\\t\\t\\t\\t\\t\\t<H3>\\n\\t\\t\\t\\t\\t\\t\\t<CardLink href=\\\"#\\\">Card heading</CardLink>\\n\\t\\t\\t\\t\\t\\t</H3>\\n\\t\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor, sit amet consectetur adipisicing elit. In,\\n\\t\\t\\t\\t\\t\\t\\tvoluptat\\n\\t\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t</Stack>\\n\\t\\t\\t\\t</CardInner>\\n\\t\\t\\t</Card>\\n\\t\\t))}\\n\\t</Stack>\\n\\t<PaginationButtons\\n\\t\\tcurrentPage={5}\\n\\t\\ttotalPages={10}\\n\\t\\tonChange={(page) => console.log(page)}\\n\\t/>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"choose the right filter pattern to meet user needs\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"prioritise filters by expected usage\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"display 1-2 of the most important filters above the dataset\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"include \", _jsx(_components.a, {\n          href: \"/patterns/loading-error-empty-states\",\n          children: \"loading, empty, and error states\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"remove the applied filter tags, as they allow users to see and remove active filters\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Filter inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Filters can be made of from multiple input types including:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/component/search-input\",\n          children: \"Search input\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/text-input\",\n          children: \"Text input\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/select\",\n          children: \"Select\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/checkbox\",\n          children: \"Checkbox\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/radio\",\n          children: \"Radio\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/combobox\",\n          children: \"Combobox\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/switch\",\n          children: \"Switch\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/date-picker\",\n          children: \"Date picker\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/components/date-picker\",\n          children: \"Date range picker\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Filter sizes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Filters are available in 3 sizes to accommodate a wide range of use cases and data sets:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Small:\"\n        }), \" 1-2 filters\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Medium:\"\n        }), \" 3-6 filters\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Large:\"\n        }), \" 6+ filters\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Table, {\n      children: [_jsx(TableCaption, {\n        children: \"How to decide on filter size\"\n      }), _jsx(TableHead, {\n        children: _jsxs(TableRow, {\n          children: [_jsx(TableCell, {}), _jsx(TableHeader, {\n            width: \"15%\",\n            scope: \"col\",\n            children: _jsx(_components.p, {\n              children: \"Small\"\n            })\n          }), _jsx(TableHeader, {\n            width: \"15%\",\n            scope: \"col\",\n            children: _jsx(_components.p, {\n              children: \"Medium\"\n            })\n          }), _jsx(TableHeader, {\n            width: \"15%\",\n            scope: \"col\",\n            children: _jsx(_components.p, {\n              children: \"Large\"\n            })\n          })]\n        })\n      }), _jsxs(TableBody, {\n        children: [_jsxs(TableRow, {\n          children: [_jsx(TableCell, {\n            as: \"th\",\n            scope: \"row\",\n            children: _jsx(_components.p, {\n              children: \"Number of filters\"\n            })\n          }), _jsx(TableCell, {\n            children: \"1-2\"\n          }), _jsx(TableCell, {\n            children: \"3-6\"\n          }), _jsx(TableCell, {\n            children: \"6+\"\n          })]\n        }), _jsxs(TableRow, {\n          children: [_jsx(TableCell, {\n            as: \"th\",\n            scope: \"row\",\n            children: _jsx(_components.p, {\n              children: \"Number of primary filters\"\n            })\n          }), _jsx(TableCell, {\n            children: \"1-2\"\n          }), _jsx(TableCell, {\n            children: \"1-2\"\n          }), _jsx(TableCell, {\n            children: \"1-2\"\n          })]\n        }), _jsxs(TableRow, {\n          children: [_jsx(TableCell, {\n            as: \"th\",\n            scope: \"row\",\n            children: _jsx(_components.p, {\n              children: \"Tags display active filters\"\n            })\n          }), _jsx(TableCell, {\n            children: \"No\"\n          }), _jsx(TableCell, {\n            children: \"Yes\"\n          }), _jsx(TableCell, {\n            children: \"Yes\"\n          })]\n        }), _jsxs(TableRow, {\n          children: [_jsx(TableCell, {\n            as: \"th\",\n            scope: \"row\",\n            children: _jsx(_components.p, {\n              children: \"Submission required\"\n            })\n          }), _jsx(TableCell, {\n            children: \"No\"\n          }), _jsx(TableCell, {\n            children: \"No\"\n          }), _jsx(TableCell, {\n            children: \"Yes\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Small\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1-2 visible filters sit above the dataset. Tags that display active filters are not needed in this case, as the filters are always visible.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/patterns-search-filters--table-small\",\n        children: \"View Storybook preview\"\n      })\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/search-filters-table-small.png\",\n      alt: \"Screenshot of the small table filtering pattern\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Medium\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"3-6 filters are displayed in an accordion that is triggered by a ‘Show filters’ button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1 to 2 of the most used filters can be displayed outside the accordion to make them easier and faster to access.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Applied filters are displayed as tags under the filter inputs. This helps users quickly see which filters have been applied. Filters can be removed by dismissing the tags.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/patterns-search-filters--table-medium\",\n        children: \"View Storybook preview\"\n      })\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/search-filters-table-medium.png\",\n      alt: \"Screenshot of the medium table filtering pattern\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Large\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"6 or more filters are displayed in a drawer that is triggered by a ‘Show filters’ button. The drawer has a submit button that applies the filters.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1 to 2 of the most used filters can be displayed outside the drawer to make them easier and faster to access.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Applied filters are displayed as tags under the filter inputs. This helps users quickly see which filters have been applied. Filters can be removed by dismissing the tags.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/patterns-search-filters--table-large\",\n        children: \"View Storybook preview\"\n      })\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/search-filters-table-large.png\",\n      alt: \"Screenshot of the large table filtering pattern\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Actions in drawer\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/components/drawer\",\n        children: \"Drawer\"\n      }), \" component should contain a total of 4 actions:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Apply filters button:\"\n        }), \" When pressed, filters should be applied and the drawer should be closed.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Clear filters button:\"\n        }), \" When pressed, filters should be reset to their original state. The drawer should stay open.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Close button:\"\n        }), \" When pressed, the drawer should close. Any changes that have been made since opening the drawer should be discarded. This is essentially the same as the ‘Cancel’ button.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Cancel button:\"\n        }), \" When pressed, the drawer should close. Any changes that have been made since opening the drawer should be discarded. This is essentially the same as the ‘Close’ button.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Search filter sidebar\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you have filters that need to be quickly accessed on a regular basis, you could consider putting them in a \", _jsx(_components.a, {\n        href: \"/components/filter-sidebar\",\n        children: \"Filter sidebar\"\n      }), \" on the left so that they are always visible. The filter sidebar makes it faster and easier for users to access filters.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ensure that the correct HTML order is maintained by including a hero banner at the top, followed by the filter sidebar on the left, and the card listing on the right.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since the filters are always visible, there is no need to also include tags to show the active filters.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/patterns-search-filters--cards\",\n        children: \"View Storybook preview\"\n      })\n    }), \"\\n\", _jsx(ImageWithBorder, {\n      src: \"/img/patterns/search-filters-search-filter-sidebar.png\",\n      alt: \"Screenshot of the search filter sidebar pattern\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a search filter doesn’t match any data, use an \", _jsx(_components.a, {\n        href: \"/patterns/loading-error-empty-states\",\n        children: \"empty state\"\n      }), \" to let users know that they need to clear or change the search filter.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={3}>\\n\\t<Stack gap={1}>\\n\\t\\t<Flex\\n\\t\\t\\tgap={1}\\n\\t\\t\\tjustifyContent=\\\"space-between\\\"\\n\\t\\t\\tflexDirection={['column', 'row']}\\n\\t\\t>\\n\\t\\t\\t<Flex\\n\\t\\t\\t\\tflexDirection={['column', 'row']}\\n\\t\\t\\t\\tgap={1}\\n\\t\\t\\t\\talignItems={['flex-start', 'flex-end']}\\n\\t\\t\\t>\\n\\t\\t\\t\\t<SearchInput label=\\\"Search\\\" hideOptionalLabel />\\n\\t\\t\\t\\t<Button variant=\\\"secondary\\\" iconAfter={FilterIcon}>\\n\\t\\t\\t\\t\\tShow filters\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</Flex>\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tlabel=\\\"Sort by\\\"\\n\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'newest', label: 'Newest to oldest' },\\n\\t\\t\\t\\t\\t{ value: 'old', label: 'Oldest to newest' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t/>\\n\\t\\t</Flex>\\n\\t\\t<Divider />\\n\\t</Stack>\\n\\t<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t\\t<Stack gap={1}>\\n\\t\\t\\t<HelpIcon size=\\\"lg\\\" color=\\\"muted\\\" />\\n\\t\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\t\\tNo results found\\n\\t\\t\\t</Heading>\\n\\t\\t\\t<Text>Try adjusting your filter options.</Text>\\n\\t\\t</Stack>\\n\\t\\t<Button variant=\\\"secondary\\\">Clear filters</Button>\\n\\t</Stack>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Templates\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Coming soon\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Search filters","description":"Search filters help users find what they’re looking for by displaying options that meet specified criteria.","figmaTemplateNodeId":"18586-56265","githubTemplatePath":"/.storybook/stories/DataFiltering","storybookPath":"/story/patterns-search-filters--cards","relatedComponents":["card","drawer","filter-sidebar","pagination","table"]}},"content":"\nSearch filters help users find what they’re looking for by displaying options that meet specified criteria.\n\nApplied filters are displayed as tags, so users can quickly see which filters have been applied to the dataset. Filters can be removed by dismissing the tags.\n\nThe dataset should be displayed in a [Table](/components/table) or a list of [Cards](/components/card) under the search filters. Refer to the specific component guidance to help determine which is more suitable to display your dataset.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1}>\n\t\t<Flex\n\t\t\tgap={1}\n\t\t\tjustifyContent=\"space-between\"\n\t\t\tflexDirection={['column', 'row']}\n\t\t>\n\t\t\t<Flex\n\t\t\t\tflexDirection={['column', 'row']}\n\t\t\t\tgap={1}\n\t\t\t\talignItems={['flex-start', 'flex-end']}\n\t\t\t>\n\t\t\t\t<div aria-label=\"Site\" role=\"search\">\n\t\t\t\t\t<SearchInput label=\"Search\" hideOptionalLabel />\n\t\t\t\t</div>\n\t\t\t\t<Button variant=\"secondary\" iconAfter={FilterIcon}>\n\t\t\t\t\tShow filters\n\t\t\t\t</Button>\n\t\t\t</Flex>\n\t\t\t<Select\n\t\t\t\tlabel=\"Sort by\"\n\t\t\t\thideOptionalLabel\n\t\t\t\toptions={[\n\t\t\t\t\t{ value: 'newest', label: 'Newest to oldest' },\n\t\t\t\t\t{ value: 'old', label: 'Oldest to newest' },\n\t\t\t\t]}\n\t\t\t/>\n\t\t</Flex>\n\t\t<Flex flexWrap=\"wrap\" gap={0.75} alignItems=\"flex-end\">\n\t\t\t<Tags\n\t\t\t\theading={<Text fontWeight=\"bold\">Active filters</Text>}\n\t\t\t\titems={[\n\t\t\t\t\t{ label: 'Category: Plant', onRemove: console.log },\n\t\t\t\t\t{ label: 'Type: Organic', onRemove: console.log },\n\t\t\t\t\t{ label: 'Assignee: John', onRemove: console.log },\n\t\t\t\t]}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"text\"\n\t\t\t\tonClick={console.log}\n\t\t\t\ticonAfter={CloseIcon}\n\t\t\t>\n\t\t\t\tClear filters\n\t\t\t</Button>\n\t\t</Flex>\n\t\t<Divider />\n\t</Stack>\n\t<Stack gap={1}>\n\t\t<H2>\n\t\t\t<span role=\"status\">25 results</span>\n\t\t</H2>\n\t\t{Array.from(Array(5).keys()).map((idx) => (\n\t\t\t<Card key={idx} shadow clickable>\n\t\t\t\t<CardInner>\n\t\t\t\t\t<Stack gap={1}>\n\t\t\t\t\t\t<H3>\n\t\t\t\t\t\t\t<CardLink href=\"#\">Card heading</CardLink>\n\t\t\t\t\t\t</H3>\n\t\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\t\tLorem ipsum dolor, sit amet consectetur adipisicing elit. In,\n\t\t\t\t\t\t\tvoluptat\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Stack>\n\t\t\t\t</CardInner>\n\t\t\t</Card>\n\t\t))}\n\t</Stack>\n\t<PaginationButtons\n\t\tcurrentPage={5}\n\t\ttotalPages={10}\n\t\tonChange={(page) => console.log(page)}\n\t/>\n</Stack>\n```\n\n<DoHeading />\n\n- choose the right filter pattern to meet user needs\n- prioritise filters by expected usage\n- display 1-2 of the most important filters above the dataset\n- include [loading, empty, and error states](/patterns/loading-error-empty-states)\n\n<DontHeading />\n\n- remove the applied filter tags, as they allow users to see and remove active filters\n\n## Filter inputs\n\nFilters can be made of from multiple input types including:\n\n- [Search input](/component/search-input)\n- [Text input](/components/text-input)\n- [Select](/components/select)\n- [Checkbox](/components/checkbox)\n- [Radio](/components/radio)\n- [Combobox](/components/combobox)\n- [Switch](/components/switch)\n- [Date picker](/components/date-picker)\n- [Date range picker](/components/date-picker)\n\n## Filter sizes\n\nFilters are available in 3 sizes to accommodate a wide range of use cases and data sets:\n\n- **Small:** 1-2 filters\n- **Medium:** 3-6 filters\n- **Large:** 6+ filters\n\n<Table>\n\t<TableCaption>How to decide on filter size</TableCaption>\n\t<TableHead>\n\t\t<TableRow>\n\t\t\t<TableCell />\n\t\t\t<TableHeader width=\"15%\" scope=\"col\">\n\t\t\t\tSmall\n\t\t\t</TableHeader>\n\t\t\t<TableHeader width=\"15%\" scope=\"col\">\n\t\t\t\tMedium\n\t\t\t</TableHeader>\n\t\t\t<TableHeader width=\"15%\" scope=\"col\">\n\t\t\t\tLarge\n\t\t\t</TableHeader>\n\t\t</TableRow>\n\t</TableHead>\n\t<TableBody>\n\t\t<TableRow>\n\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\tNumber of filters\n\t\t\t</TableCell>\n\t\t\t<TableCell>1-2</TableCell>\n\t\t\t<TableCell>3-6</TableCell>\n\t\t\t<TableCell>6+</TableCell>\n\t\t</TableRow>\n\t\t<TableRow>\n\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\tNumber of primary filters\n\t\t\t</TableCell>\n\t\t\t<TableCell>1-2</TableCell>\n\t\t\t<TableCell>1-2</TableCell>\n\t\t\t<TableCell>1-2</TableCell>\n\t\t</TableRow>\n\t\t<TableRow>\n\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\tTags display active filters\n\t\t\t</TableCell>\n\t\t\t<TableCell>No</TableCell>\n\t\t\t<TableCell>Yes</TableCell>\n\t\t\t<TableCell>Yes</TableCell>\n\t\t</TableRow>\n\t\t<TableRow>\n\t\t\t<TableCell as=\"th\" scope=\"row\">\n\t\t\t\tSubmission required\n\t\t\t</TableCell>\n\t\t\t<TableCell>No</TableCell>\n\t\t\t<TableCell>No</TableCell>\n\t\t\t<TableCell>Yes</TableCell>\n\t\t</TableRow>\n\t</TableBody>\n</Table>\n\n### Small\n\n1-2 visible filters sit above the dataset. Tags that display active filters are not needed in this case, as the filters are always visible.\n\n[View Storybook preview](/storybook/index.html?path=/story/patterns-search-filters--table-small)\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/search-filters-table-small.png\"\n\talt=\"Screenshot of the small table filtering pattern\"\n/>\n\n### Medium\n\n3-6 filters are displayed in an accordion that is triggered by a ‘Show filters’ button.\n\n1 to 2 of the most used filters can be displayed outside the accordion to make them easier and faster to access.\n\nApplied filters are displayed as tags under the filter inputs. This helps users quickly see which filters have been applied. Filters can be removed by dismissing the tags.\n\n[View Storybook preview](/storybook/index.html?path=/story/patterns-search-filters--table-medium)\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/search-filters-table-medium.png\"\n\talt=\"Screenshot of the medium table filtering pattern\"\n/>\n\n### Large\n\n6 or more filters are displayed in a drawer that is triggered by a ‘Show filters’ button. The drawer has a submit button that applies the filters.\n\n1 to 2 of the most used filters can be displayed outside the drawer to make them easier and faster to access.\n\nApplied filters are displayed as tags under the filter inputs. This helps users quickly see which filters have been applied. Filters can be removed by dismissing the tags.\n\n[View Storybook preview](/storybook/index.html?path=/story/patterns-search-filters--table-large)\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/search-filters-table-large.png\"\n\talt=\"Screenshot of the large table filtering pattern\"\n/>\n\n### Actions in drawer\n\nThe [Drawer](/components/drawer) component should contain a total of 4 actions:\n\n1. **Apply filters button:** When pressed, filters should be applied and the drawer should be closed.\n2. **Clear filters button:** When pressed, filters should be reset to their original state. The drawer should stay open.\n3. **Close button:** When pressed, the drawer should close. Any changes that have been made since opening the drawer should be discarded. This is essentially the same as the ‘Cancel’ button.\n4. **Cancel button:** When pressed, the drawer should close. Any changes that have been made since opening the drawer should be discarded. This is essentially the same as the ‘Close’ button.\n\n## Search filter sidebar\n\nIf you have filters that need to be quickly accessed on a regular basis, you could consider putting them in a [Filter sidebar](/components/filter-sidebar) on the left so that they are always visible. The filter sidebar makes it faster and easier for users to access filters.\n\nEnsure that the correct HTML order is maintained by including a hero banner at the top, followed by the filter sidebar on the left, and the card listing on the right.\n\nSince the filters are always visible, there is no need to also include tags to show the active filters.\n\n[View Storybook preview](/storybook/index.html?path=/story/patterns-search-filters--cards)\n\n<ImageWithBorder\n\tsrc=\"/img/patterns/search-filters-search-filter-sidebar.png\"\n\talt=\"Screenshot of the search filter sidebar pattern\"\n/>\n\n## Empty state\n\nWhen a search filter doesn’t match any data, use an [empty state](/patterns/loading-error-empty-states) to let users know that they need to clear or change the search filter.\n\n```jsx live\n<Stack gap={3}>\n\t<Stack gap={1}>\n\t\t<Flex\n\t\t\tgap={1}\n\t\t\tjustifyContent=\"space-between\"\n\t\t\tflexDirection={['column', 'row']}\n\t\t>\n\t\t\t<Flex\n\t\t\t\tflexDirection={['column', 'row']}\n\t\t\t\tgap={1}\n\t\t\t\talignItems={['flex-start', 'flex-end']}\n\t\t\t>\n\t\t\t\t<SearchInput label=\"Search\" hideOptionalLabel />\n\t\t\t\t<Button variant=\"secondary\" iconAfter={FilterIcon}>\n\t\t\t\t\tShow filters\n\t\t\t\t</Button>\n\t\t\t</Flex>\n\t\t\t<Select\n\t\t\t\tlabel=\"Sort by\"\n\t\t\t\thideOptionalLabel\n\t\t\t\toptions={[\n\t\t\t\t\t{ value: 'newest', label: 'Newest to oldest' },\n\t\t\t\t\t{ value: 'old', label: 'Oldest to newest' },\n\t\t\t\t]}\n\t\t\t/>\n\t\t</Flex>\n\t\t<Divider />\n\t</Stack>\n\t<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t\t<Stack gap={1}>\n\t\t\t<HelpIcon size=\"lg\" color=\"muted\" />\n\t\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\t\tNo results found\n\t\t\t</Heading>\n\t\t\t<Text>Try adjusting your filter options.</Text>\n\t\t</Stack>\n\t\t<Button variant=\"secondary\">Clear filters</Button>\n\t</Stack>\n</Stack>\n```\n\n## Templates\n\nComing soon\n","data":{"title":"Search filters","description":"Search filters help users find what they’re looking for by displaying options that meet specified criteria.","figmaTemplateNodeId":"18586-56265","githubTemplatePath":"/.storybook/stories/DataFiltering","storybookPath":"/story/patterns-search-filters--cards","relatedComponents":["card","drawer","filter-sidebar","pagination","table"]},"title":"Search filters","description":"Search filters help users find what they’re looking for by displaying options that meet specified criteria.","figmaTemplateNodeId":"18586-56265","githubTemplatePath":"/.storybook/stories/DataFiltering","storybookPath":"/story/patterns-search-filters--cards","relatedComponents":["card","drawer","filter-sidebar","pagination","table"],"relatedPatterns":null}]},"__N_SSG":true}