{"pageProps":{"pkg":{"slug":"skeleton","name":"skeleton","title":"Skeleton","description":"Skeletons are visual placeholders for information while data is still loading.","storybookPath":"/story/content-skeleton-skeletonheading--basic","figmaGalleryNodeId":"11981%3A101691","subNavItems":[{"label":"Overview","href":"/components/skeleton","path":"/home/runner/work/agds-next/agds-next/packages/react/src/skeleton/docs/overview.mdx"},{"label":"Code","href":"/components/skeleton/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/skeleton/docs/code.mdx"},{"label":"Accessibility","href":"/components/skeleton/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/skeleton/docs/accessibility.mdx"}],"relatedComponents":["loading"],"relatedPatterns":["loading-error-empty-states"],"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Skeleton"}],"toc":[{"id":"skeletonheading","title":"SkeletonHeading","level":2,"slug":"skeletonheading","items":[]},{"id":"skeletontext","title":"SkeletonText","level":2,"slug":"skeletontext","items":[]},{"id":"skeletonbox","title":"SkeletonBox","level":2,"slug":"skeletonbox","items":[]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to reduce page jumpiness as different parts of the page load\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"map the size of the Skeleton to the shape of the final user interface\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use an animation to indicate something is happening.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use a Skeleton to represent components that contain other components such as cards, tables, accordions etc.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"SkeletonHeading\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"SkeletonHeading\"\n      }), \" component can be used as a placeholder for any \", _jsx(_components.a, {\n        href: \"/components/heading\",\n        children: \"Heading component\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The height of the component is determined by the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" property.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The width of the element can be customised using the \", _jsx(_components.code, {\n        children: \"width\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<SkeletonHeading type=\\\"h1\\\" />\\n\\t<SkeletonHeading type=\\\"h2\\\" />\\n\\t<SkeletonHeading type=\\\"h3\\\" />\\n\\t<SkeletonHeading type=\\\"h4\\\" />\\n\\t<SkeletonHeading type=\\\"h5\\\" />\\n\\t<SkeletonHeading type=\\\"h6\\\" />\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"SkeletonText\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"SkeletonHeading\"\n      }), \" component can be used as a placeholder for any \", _jsx(_components.a, {\n        href: \"/components/text\",\n        children: \"Text component\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The height of the component can be controlled using using the \", _jsx(_components.code, {\n        children: \"fontSize\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"lineHeight\"\n      }), \" properties.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The width of the element can be customised using the \", _jsx(_components.code, {\n        children: \"width\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<SkeletonText fontSize=\\\"xxxl\\\" lineHeight=\\\"default\\\" />\\n\\t<SkeletonText fontSize=\\\"xxl\\\" lineHeight=\\\"default\\\" />\\n\\t<SkeletonText fontSize=\\\"xl\\\" lineHeight=\\\"default\\\" />\\n\\t<SkeletonText fontSize=\\\"lg\\\" lineHeight=\\\"default\\\" />\\n\\t<SkeletonText fontSize=\\\"md\\\" lineHeight=\\\"default\\\" />\\n\\t<SkeletonText fontSize=\\\"sm\\\" lineHeight=\\\"default\\\" />\\n\\t<SkeletonText fontSize=\\\"xs\\\" lineHeight=\\\"default\\\" />\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"SkeletonBox\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"SkeletonBox\"\n      }), \" component allows you to create custom shapes by providing full control over both the width and height.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<SkeletonBox width=\\\"150px\\\" height=\\\"150px\\\" />\\n\\t<SkeletonBox width=\\\"50%\\\" height=\\\"50px\\\" />\\n</Stack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Skeleton","description":"Skeletons are visual placeholders for information while data is still loading.","group":"Content","storybookPath":"/story/content-skeleton-skeletonheading--basic","figmaGalleryNodeId":"11981%3A101691","relatedComponents":["loading"],"relatedPatterns":["loading-error-empty-states"]}},"relatedPatterns":[{"slug":"loading-error-empty-states","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Loading state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The loading state provides feedback to users that data is being loaded.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Loading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/skeleton\",\n        children: \"Skeleton components\"\n      }), \" can be used as visual placeholders for information that is still loading - e.g. cells inside of a table.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Table loading state example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Below is an example of a \", _jsx(_components.a, {\n        href: \"/components/table\",\n        children: \"Table\"\n      }), \" in a loading state.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TableWrapper>\\n\\t<Table tableLayout=\\\"fixed\\\">\\n\\t\\t<TableHead>\\n\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t<TableHeader width=\\\"6rem\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t\\tID\\n\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Name</TableHeader>\\n\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Email</TableHeader>\\n\\t\\t\\t</TableRow>\\n\\t\\t</TableHead>\\n\\t\\t<TableBody>\\n\\t\\t\\t{Array.from(Array(5)).map((_, idx) => (\\n\\t\\t\\t\\t<TableRow key={idx}>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t))}\\n\\t\\t</TableBody>\\n\\t</Table>\\n</TableWrapper>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Cards loading state example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Below is an example of a list of \", _jsx(_components.a, {\n        href: \"/components/card\",\n        children: \"Cards\"\n      }), \" in a loading state.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Columns as=\\\"ul\\\" cols={{ xs: 2 }}>\\n\\t{Array.from(Array(2).keys()).map((i) => (\\n\\t\\t<Card key={i} as=\\\"li\\\" shadow>\\n\\t\\t\\t<CardInner>\\n\\t\\t\\t\\t<Stack gap={1}>\\n\\t\\t\\t\\t\\t<SkeletonHeading type=\\\"h3\\\" width=\\\"50%\\\" />\\n\\t\\t\\t\\t\\t<SkeletonText fontSize=\\\"sm\\\" width=\\\"25%\\\" />\\n\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t</Stack>\\n\\t\\t\\t</CardInner>\\n\\t\\t</Card>\\n\\t))}\\n</Columns>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The error state provides feedback to users that an error has occurred while loading the data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When creating an error message:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be specific in describing the error\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Distil technical jargon into more simple and conversational language where possible\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Describe how and when the error can be resolved\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Don’t blame the user for the error\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Include the error code in the message if possible. It may be helpful is a user accesses human-led support.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If applicable, use a \", _jsx(_components.a, {\n        href: \"/components-button\",\n        children: \"Button\"\n      }), \" component to provide the user with an option to retrieve the data again.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Section level error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an error that occured at the section level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<AlertFilledIcon color=\\\"error\\\" size=\\\"lg\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tFailed to load\\n\\t\\t</Heading>\\n\\t\\t<Text>There was an error loading the data. Click retry to try again.</Text>\\n\\t</Stack>\\n\\t<Button>Retry</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Component level error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an error that occured at the component level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Flex gap={0.75} role=\\\"alert\\\">\\n\\t<AlertFilledIcon color=\\\"error\\\" />\\n\\t<Stack gap={1} alignItems=\\\"flex-start\\\">\\n\\t\\t<Stack gap={0.5}>\\n\\t\\t\\t<Text fontWeight=\\\"bold\\\">Failed to load</Text>\\n\\t\\t\\t<Text>\\n\\t\\t\\t\\tThere was an error loading the data. Click retry to try again.\\n\\t\\t\\t</Text>\\n\\t\\t</Stack>\\n\\n\\t\\t<Button variant=\\\"text\\\">Retry</Button>\\n\\t</Stack>\\n</Flex>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Page level error state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For errors which occur at the page level, see the \", _jsx(_components.a, {\n        href: \"/template/error-page\",\n        children: \"Error page template\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The empty state is displayed when data has loaded succesfully, but there is nothing available to show to the user.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This state could potentially be a result of either:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"a new user vists a service for the first time and needs to create data\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"a user applies a number of filters or settings which do return any results\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Depending on what the cause the empty state is, provide clear messaging and a helpful action to get rid of the empty state via a \", _jsx(_components.a, {\n        href: \"/components/button\",\n        children: \"Button\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Section level empty state examples\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of two different empty states at the section level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<FactoryIcon size=\\\"lg\\\" color=\\\"muted\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tAdd an establishment\\n\\t\\t</Heading>\\n\\t\\t<Text>You haven’t added any establishments yet.</Text>\\n\\t</Stack>\\n\\t<Button>Add establishment</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<HelpIcon size=\\\"lg\\\" color=\\\"muted\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tNo results found\\n\\t\\t</Heading>\\n\\t\\t<Text>Try adjusting your filter options.</Text>\\n\\t</Stack>\\n\\t<Button>Clear filters</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Component level empty state example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an empty state at the component level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Flex gap={0.75} role=\\\"alert\\\">\\n\\t<HelpIcon color=\\\"muted\\\" />\\n\\t<Stack gap={1} alignItems=\\\"flex-start\\\">\\n\\t\\t<Stack gap={0.5}>\\n\\t\\t\\t<Text fontWeight=\\\"bold\\\">No results found</Text>\\n\\t\\t\\t<Text>Try adjusting your filter options.</Text>\\n\\t\\t</Stack>\\n\\t\\t<Button variant=\\\"text\\\">Clear filters</Button>\\n\\t</Stack>\\n</Flex>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Loading, empty and error states","group":"Patterns","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","figmaTemplateNodeId":"18846-97172","storybookPath":"/story/patterns-data-loading-cards--basic","relatedComponents":["skeleton","icon","button","text","heading"]}},"content":"\n## Loading state\n\nThe loading state provides feedback to users that data is being loaded.\n\nLoading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\n\n[Skeleton components](/components/skeleton) can be used as visual placeholders for information that is still loading - e.g. cells inside of a table.\n\n### Table loading state example\n\nBelow is an example of a [Table](/components/table) in a loading state.\n\n```jsx live\n<TableWrapper>\n\t<Table tableLayout=\"fixed\">\n\t\t<TableHead>\n\t\t\t<TableRow>\n\t\t\t\t<TableHeader width=\"6rem\" scope=\"col\">\n\t\t\t\t\tID\n\t\t\t\t</TableHeader>\n\t\t\t\t<TableHeader scope=\"col\">Name</TableHeader>\n\t\t\t\t<TableHeader scope=\"col\">Email</TableHeader>\n\t\t\t</TableRow>\n\t\t</TableHead>\n\t\t<TableBody>\n\t\t\t{Array.from(Array(5)).map((_, idx) => (\n\t\t\t\t<TableRow key={idx}>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t</TableRow>\n\t\t\t))}\n\t\t</TableBody>\n\t</Table>\n</TableWrapper>\n```\n\n### Cards loading state example\n\nBelow is an example of a list of [Cards](/components/card) in a loading state.\n\n```jsx live\n<Columns as=\"ul\" cols={{ xs: 2 }}>\n\t{Array.from(Array(2).keys()).map((i) => (\n\t\t<Card key={i} as=\"li\" shadow>\n\t\t\t<CardInner>\n\t\t\t\t<Stack gap={1}>\n\t\t\t\t\t<SkeletonHeading type=\"h3\" width=\"50%\" />\n\t\t\t\t\t<SkeletonText fontSize=\"sm\" width=\"25%\" />\n\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t</Stack>\n\t\t\t</CardInner>\n\t\t</Card>\n\t))}\n</Columns>\n```\n\n## Error state\n\nThe error state provides feedback to users that an error has occurred while loading the data.\n\nWhen creating an error message:\n\n- Be specific in describing the error\n- Distil technical jargon into more simple and conversational language where possible\n- Describe how and when the error can be resolved\n- Don’t blame the user for the error\n- Include the error code in the message if possible. It may be helpful is a user accesses human-led support.\n\nIf applicable, use a [Button](/components-button) component to provide the user with an option to retrieve the data again.\n\n### Section level error state\n\nBelow is an example of an error that occured at the section level.\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t<Stack gap={1}>\n\t\t<AlertFilledIcon color=\"error\" size=\"lg\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tFailed to load\n\t\t</Heading>\n\t\t<Text>There was an error loading the data. Click retry to try again.</Text>\n\t</Stack>\n\t<Button>Retry</Button>\n</Stack>\n```\n\n### Component level error state\n\nBelow is an example of an error that occured at the component level.\n\n```jsx live\n<Flex gap={0.75} role=\"alert\">\n\t<AlertFilledIcon color=\"error\" />\n\t<Stack gap={1} alignItems=\"flex-start\">\n\t\t<Stack gap={0.5}>\n\t\t\t<Text fontWeight=\"bold\">Failed to load</Text>\n\t\t\t<Text>\n\t\t\t\tThere was an error loading the data. Click retry to try again.\n\t\t\t</Text>\n\t\t</Stack>\n\n\t\t<Button variant=\"text\">Retry</Button>\n\t</Stack>\n</Flex>\n```\n\n### Page level error state\n\nFor errors which occur at the page level, see the [Error page template](/template/error-page).\n\n## Empty state\n\nThe empty state is displayed when data has loaded succesfully, but there is nothing available to show to the user.\n\nThis state could potentially be a result of either:\n\n- a new user vists a service for the first time and needs to create data\n- a user applies a number of filters or settings which do return any results\n\nDepending on what the cause the empty state is, provide clear messaging and a helpful action to get rid of the empty state via a [Button](/components/button) component.\n\n### Section level empty state examples\n\nBelow is an example of two different empty states at the section level.\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\">\n\t<Stack gap={1}>\n\t\t<FactoryIcon size=\"lg\" color=\"muted\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tAdd an establishment\n\t\t</Heading>\n\t\t<Text>You haven’t added any establishments yet.</Text>\n\t</Stack>\n\t<Button>Add establishment</Button>\n</Stack>\n```\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t<Stack gap={1}>\n\t\t<HelpIcon size=\"lg\" color=\"muted\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tNo results found\n\t\t</Heading>\n\t\t<Text>Try adjusting your filter options.</Text>\n\t</Stack>\n\t<Button>Clear filters</Button>\n</Stack>\n```\n\n### Component level empty state example\n\nBelow is an example of an empty state at the component level.\n\n```jsx live\n<Flex gap={0.75} role=\"alert\">\n\t<HelpIcon color=\"muted\" />\n\t<Stack gap={1} alignItems=\"flex-start\">\n\t\t<Stack gap={0.5}>\n\t\t\t<Text fontWeight=\"bold\">No results found</Text>\n\t\t\t<Text>Try adjusting your filter options.</Text>\n\t\t</Stack>\n\t\t<Button variant=\"text\">Clear filters</Button>\n\t</Stack>\n</Flex>\n```\n","data":{"title":"Loading, empty and error states","group":"Patterns","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","figmaTemplateNodeId":"18846-97172","storybookPath":"/story/patterns-data-loading-cards--basic","relatedComponents":["skeleton","icon","button","text","heading"]},"title":"Loading, empty and error states","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","figmaTemplateNodeId":"18846-97172","githubTemplatePath":null,"storybookPath":"/story/patterns-data-loading-cards--basic","relatedComponents":["skeleton","icon","button","text","heading"]}],"relatedComponents":[{"slug":"loading","name":"loading","title":"Loading","description":"Loading indicators inform users their action is being processed.","storybookPath":"/story/content-loading-loadingblanket--basic","figmaGalleryNodeId":"11981%3A101666","subNavItems":[{"label":"Overview","href":"/components/loading","path":"/home/runner/work/agds-next/agds-next/packages/react/src/loading/docs/overview.mdx"},{"label":"Code","href":"/components/loading/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/loading/docs/code.mdx"}],"relatedComponents":["skeleton"],"relatedPatterns":["loading-error-empty-states"],"deprecated":false,"unreleased":false}]},"__N_SSG":true}