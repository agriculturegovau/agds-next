{"pageProps":{"guide":{"slug":"responsive-props","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Breakpoints\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It is important to understand that our responsive style APIs are dependant on the global \", _jsx(_components.code, {\n        children: \"breakpoints\"\n      }), \" token. Each key in the object refers to the breakpoint name, and each value refers to the the minimum width of the breakpoint.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const breakpoint = {\\n\\txs: 0,\\n\\tsm: 576,\\n\\tmd: 768,\\n\\tlg: 992,\\n\\txl: 1200,\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"We use the \", _jsx(_components.code, {\n          children: \"@media (min-width)\"\n        }), \" syntax to ensure styles are generated for mobile-first.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The array syntax\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As a simple example, we will create a \", _jsx(_components.code, {\n        children: \"Box\"\n      }), \" with some padding.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box background=\\\"shade\\\" padding={2}>\\n\\tHello world\\n</Box>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now let's update the \", _jsx(_components.code, {\n        children: \"padding\"\n      }), \" prop to make it responsive.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box background=\\\"shade\\\" padding={[1, 2, 4]}>\\n\\tHello world\\n</Box>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Under the hood, this simple example has generated the following CSS:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \".css-1ped26i {\\n\\tpadding: 1rem;\\n}\\n\\n@media (min-width: 576px) {\\n\\t.css-1ped26i {\\n\\t\\tpadding: 2rem;\\n\\t}\\n}\\n\\n@media (min-width: 768px) {\\n\\t.css-1ped26i {\\n\\t\\tpadding: 4rem;\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To interpret array responsive values, we convert the values defined in our \", _jsx(_components.code, {\n        children: \"breakpoints\"\n      }), \" token and sort them in ascending order. Afterward, we map each value in the array to a \", _jsx(_components.code, {\n        children: \"min-width\"\n      }), \" media query.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To skip certain breakpoints, you can pass \", _jsx(_components.code, {\n        children: \"null\"\n      }), \" to any item in the array to avoid generating unnecessary CSS.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The object syntax\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also define responsive styles as an object, with each key in the object mapping to a breakpoint name.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box background=\\\"shade\\\" padding={{ xs: 1, xl: 2 }}>\\n\\tHello world\\n</Box>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Responsive props","opener":"The Agriculture Design System provides first class support for mobile-first responsive styles. Instead of manually writing CSS media queries throughout your codebase, our primitive components allow you to provide arrays and objects to generate responsive styles in your project."}},"data":{"title":"Responsive props","opener":"The Agriculture Design System provides first class support for mobile-first responsive styles. Instead of manually writing CSS media queries throughout your codebase, our primitive components allow you to provide arrays and objects to generate responsive styles in your project."},"title":"Responsive props","opener":"The Agriculture Design System provides first class support for mobile-first responsive styles. Instead of manually writing CSS media queries throughout your codebase, our primitive components allow you to provide arrays and objects to generate responsive styles in your project.","overview":"The Agriculture Design System provides first class support for mobile-fi..."},"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/guides","label":"Guides"},{"label":"Responsive props"}],"slug":"responsive-props"},"__N_SSG":true}