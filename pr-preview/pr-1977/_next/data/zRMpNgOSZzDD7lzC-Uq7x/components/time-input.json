{"pageProps":{"pkg":{"slug":"time-input","name":"time-input","title":"Time input","description":"The Time input component allows users to enter a time in multiple formats.","storybookPath":"/story/Forms-TimeInput--basic","figmaGalleryNodeId":"20846:18895","subNavItems":[{"label":"Overview","href":"/components/time-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-input/docs/overview.mdx"},{"label":"Code","href":"/components/time-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-input/docs/code.mdx"}],"relatedComponents":["text-input","time-picker"],"relatedPatterns":null,"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Time input"}],"toc":[{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"changing-the-time-format","title":"Changing the time format","level":2,"slug":"changing-the-time-format","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\n\\tconst onChange = (timeValue) => {\\n\\t\\tconsole.log('onChange', timeValue);\\n\\t\\tsetValue(timeValue);\\n\\t};\\n\\n\\tconst invalid = value && !isValidTime(value.value);\\n\\n\\treturn (\\n\\t\\t<TimeInput\\n\\t\\t\\tinvalid={invalid}\\n\\t\\t\\tlabel=\\\"Time\\\"\\n\\t\\t\\tmessage=\\\"Enter a valid time\\\"\\n\\t\\t\\tonChange={onChange}\\n\\t\\t\\tvalue={value}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Time input is a superset of \", _jsx(_components.a, {\n        href: \"/components/text-input\",\n        children: \"Text input\"\n      }), \", with additional functionality specific to entering times. It accepts all of Text input’s props, with changes to \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"value\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Time input is a controlled component which means consumers of this component need to manage the state of this component by using the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" props.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" handler provides an object with both a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"formatted\"\n      }), \" version of the time. \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" is always in \", _jsx(_components.code, {\n        children: \"'HH:mm'\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"formatted\"\n      }), \" is provided in the \", _jsx(_components.code, {\n        children: \"timeFormat\"\n      }), \" used. You can use this to display the time elsewhere in the UI, where necessary.\"]\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use when users are specifically required to enter an exact, arbitrary time.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use when users are required to enter free-form text that isn’t a time\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use when users are required to enter a specific, constrained time – use Time picker instead.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid. The \", _jsx(_components.code, {\n        children: \"isValidTime()\"\n      }), \" function can be used to help identify whether the input is valid.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState({ value: '9:66' });\\n\\n\\tconst onChange = (timeValue) => {\\n\\t\\tconsole.log('onChange', timeValue);\\n\\t\\tsetValue(timeValue);\\n\\t};\\n\\n\\tconst invalid = value && !isValidTime(value.value);\\n\\n\\treturn (\\n\\t\\t<TimeInput\\n\\t\\t\\tinvalid={invalid}\\n\\t\\t\\tlabel=\\\"Time\\\"\\n\\t\\t\\tmessage=\\\"Enter a valid time\\\"\\n\\t\\t\\tonChange={onChange}\\n\\t\\t\\tvalue={value}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Changing the time format\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Time input component allows users to enter times in various formats. To input 9:00 pm, a user could input '9pm', '9:00pm', '2100', '21:00', 'T21:00:00.000Z', or other, lenient variations on these formats.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a valid time is typed, on blur, the time will be formatted using the \", _jsx(_components.code, {\n        children: \"timeFormat\"\n      }), \" prop, which is set to \", _jsx(_components.code, {\n        children: \"'h:mm aaa'\"\n      }), \" by default.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To modify the time format, you can change the \", _jsx(_components.code, {\n        children: \"timeFormat\"\n      }), \" prop to one of these supported time formats:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'h:mm aaa'\"\n        }), \" (e.g. 9:00 am, 9:00 pm)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'hh:mm aaa'\"\n        }), \" (e.g. 09:00 am, 09:00 pm)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'HH:mm'\"\n        }), \" (e.g. 09:00, 21:00)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\n\\tconst onChange = (timeValue) => {\\n\\t\\tconsole.log('onChange', timeValue);\\n\\t\\tsetValue(timeValue);\\n\\t};\\n\\n\\treturn (\\n\\t\\t<TimeInput\\n\\t\\t\\tlabel=\\\"Time\\\"\\n\\t\\t\\tonChange={onChange}\\n\\t\\t\\ttimeFormat=\\\"HH:mm\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Time input","description":"The Time input component allows users to enter a time in multiple formats.","group":"Forms","storybookPath":"/story/Forms-TimeInput--basic","figmaGalleryNodeId":"20846:18895","relatedComponents":["text-input","time-picker"]}},"relatedPatterns":null,"relatedComponents":[{"slug":"text-input","name":"text-input","title":"Text input","description":"This component allows users to enter free-form text.","storybookPath":"/story/forms-textinput--basic","figmaGalleryNodeId":"12444%3A100673","subNavItems":[{"label":"Overview","href":"/components/text-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/text-input/docs/overview.mdx"},{"label":"Code","href":"/components/text-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/text-input/docs/code.mdx"}],"relatedComponents":["autocomplete","combobox","password-input","textarea"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"time-picker","name":"time-picker","title":"Time picker","description":"The Time picker component allows users to easily select a time from a list of options.","storybookPath":"/story/Forms-TimePicker--basic","figmaGalleryNodeId":"21379:67824","subNavItems":[{"label":"Overview","href":"/components/time-picker","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-picker/docs/overview.mdx"},{"label":"Code","href":"/components/time-picker/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/time-picker/docs/code.mdx"}],"relatedComponents":["combobox","time-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}