{"pageProps":{"pkg":{"slug":"grouped-fields","name":"grouped-fields","title":"Grouped fields","description":"The Grouped fields component allows two closely related form inputs to be grouped together.","storybookPath":"/story/forms-groupedfields--basic","figmaGalleryNodeId":"20225-16760","subNavItems":[{"label":"Overview","href":"/components/grouped-fields","path":"/home/runner/work/agds-next/agds-next/packages/react/src/grouped-fields/docs/overview.mdx"},{"label":"Code","href":"/components/grouped-fields/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/grouped-fields/docs/code.mdx"}],"relatedComponents":["autocomplete","combobox","date-picker","password-input","search-input","select","text-input","textarea"],"relatedPatterns":null,"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Grouped fields"}],"toc":[{"id":"hide-optional-label","title":"Hide optional label","level":2,"slug":"hide-optional-label","items":[]},{"id":"visually-hide-legend","title":"Visually hide legend","level":2,"slug":"visually-hide-legend","items":[]},{"id":"hint","title":"Hint","level":2,"slug":"hint","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<GroupedFields legend=\\\"Item weight\\\">\\n\\t{({ field1Props, field2Props }) => (\\n\\t\\t<>\\n\\t\\t\\t<TextInput label=\\\"Weight\\\" {...field1Props} />\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tlabel=\\\"Unit\\\"\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'mg', label: 'mg' },\\n\\t\\t\\t\\t\\t{ value: 'g', label: 'g' },\\n\\t\\t\\t\\t\\t{ value: 'kg', label: 'kg' },\\n\\t\\t\\t\\t\\t{ value: 't', label: 't' },\\n\\t\\t\\t\\t\\t{ value: 'Mt', label: 'Mt' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t/>\\n\\t\\t</>\\n\\t)}\\n</GroupedFields>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Grouped fields allows two related form inputs to be composed together while providing the ability to present and describe this relationship and any invalid input errors.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It uses the \", _jsx(_components.a, {\n        href: \"https://www.patterns.dev/react/render-props-pattern/\",\n        children: \"render props pattern\"\n      }), \" to spread a series of necessary attributes to the \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" form inputs.\"]\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"group two related inputs, such as weight and unit, and date and time\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"always provide a meaningful legend, regardless if it is visible or visually hidden\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use the group’s optional label instead of the inputs’ labels when both fields are optional.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"provide hint text for instruction\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"group unrelated inputs to save space or reduce the length of a form\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When both inputs are required or one input is optional and the other has no empty state, hide the group’s optional label with the \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<FormStack>\\n\\t<GroupedFields legend=\\\"Item weight\\\" hideOptionalLabel>\\n\\t\\t{({ field1Props, field2Props }) => (\\n\\t\\t\\t<>\\n\\t\\t\\t\\t<TextInput label=\\\"Weight\\\" {...field1Props} required />\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"Unit\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ value: 'mg', label: 'mg' },\\n\\t\\t\\t\\t\\t\\t{ value: 'g', label: 'g' },\\n\\t\\t\\t\\t\\t\\t{ value: 'kg', label: 'kg' },\\n\\t\\t\\t\\t\\t\\t{ value: 't', label: 't' },\\n\\t\\t\\t\\t\\t\\t{ value: 'Mt', label: 'Mt' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\tplaceholder=\\\"Choose\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</>\\n\\t\\t)}\\n\\t</GroupedFields>\\n\\n\\t<GroupedFields legend=\\\"Item weight\\\" hideOptionalLabel>\\n\\t\\t{({ field1Props, field2Props }) => (\\n\\t\\t\\t<>\\n\\t\\t\\t\\t<TextInput label=\\\"Weight\\\" {...field1Props} />\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"Unit\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ value: 'mg', label: 'mg' },\\n\\t\\t\\t\\t\\t\\t{ value: 'g', label: 'g' },\\n\\t\\t\\t\\t\\t\\t{ value: 'kg', label: 'kg' },\\n\\t\\t\\t\\t\\t\\t{ value: 't', label: 't' },\\n\\t\\t\\t\\t\\t\\t{ value: 'Mt', label: 'Mt' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\thideOptionalLabel\\n\\t\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</>\\n\\t\\t)}\\n\\t</GroupedFields>\\n</FormStack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Visually hide legend\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a group’s relationship is clear to the average sighted user, you can choose to visually hide the \", _jsx(_components.code, {\n        children: \"legend\"\n      }), \" to reduce cognitive load with the \", _jsx(_components.code, {\n        children: \"visuallyHideLegend\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When both fields are required, remember to also use \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" so screen reader users are not informed that required fields are optional.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<GroupedFields legend=\\\"Item weight\\\" hideOptionalLabel visuallyHideLegend>\\n\\t{({ field1Props, field2Props }) => (\\n\\t\\t<>\\n\\t\\t\\t<TextInput label=\\\"Weight\\\" {...field1Props} required />\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tlabel=\\\"Unit\\\"\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'mg', label: 'mg' },\\n\\t\\t\\t\\t\\t{ value: 'g', label: 'g' },\\n\\t\\t\\t\\t\\t{ value: 'kg', label: 'kg' },\\n\\t\\t\\t\\t\\t{ value: 't', label: 't' },\\n\\t\\t\\t\\t\\t{ value: 'Mt', label: 'Mt' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\tplaceholder=\\\"Choose\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t/>\\n\\t\\t</>\\n\\t)}\\n</GroupedFields>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hint\"\n      }), \" prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<GroupedFields legend=\\\"Item weight\\\" hint=\\\"Example hint text\\\">\\n\\t{({ field1Props, field2Props }) => (\\n\\t\\t<>\\n\\t\\t\\t<TextInput label=\\\"Weight\\\" {...field1Props} required />\\n\\t\\t\\t<Select\\n\\t\\t\\t\\tlabel=\\\"Unit\\\"\\n\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t{ value: 'mg', label: 'mg' },\\n\\t\\t\\t\\t\\t{ value: 'g', label: 'g' },\\n\\t\\t\\t\\t\\t{ value: 'kg', label: 'kg' },\\n\\t\\t\\t\\t\\t{ value: 't', label: 't' },\\n\\t\\t\\t\\t\\t{ value: 'Mt', label: 'Mt' },\\n\\t\\t\\t\\t]}\\n\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\tplaceholder=\\\"Choose\\\"\\n\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t/>\\n\\t\\t</>\\n\\t)}\\n</GroupedFields>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"field1Invalid\"\n      }), \", \", _jsx(_components.code, {\n        children: \"field2Invalid\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"message\"\n      }), \" props to indicate if the user input is invalid.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"message\"\n      }), \" should be helpful but generic enough to apply and make sense to both inputs.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<FormStack>\\n\\t<GroupedFields\\n\\t\\tlegend=\\\"Item weight\\\"\\n\\t\\thideOptionalLabel\\n\\t\\tmessage=\\\"Enter a valid item weight\\\"\\n\\t\\tfield1Invalid\\n\\t>\\n\\t\\t{({ field1Props, field2Props }) => (\\n\\t\\t\\t<>\\n\\t\\t\\t\\t<TextInput label=\\\"Weight\\\" {...field1Props} required />\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"Unit\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ value: 'mg', label: 'mg' },\\n\\t\\t\\t\\t\\t\\t{ value: 'g', label: 'g' },\\n\\t\\t\\t\\t\\t\\t{ value: 'kg', label: 'kg' },\\n\\t\\t\\t\\t\\t\\t{ value: 't', label: 't' },\\n\\t\\t\\t\\t\\t\\t{ value: 'Mt', label: 'Mt' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\tplaceholder=\\\"Choose\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\tvalue=\\\"kg\\\"\\n\\t\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</>\\n\\t\\t)}\\n\\t</GroupedFields>\\n\\n\\t<GroupedFields\\n\\t\\tlegend=\\\"Item weight\\\"\\n\\t\\thideOptionalLabel\\n\\t\\tmessage=\\\"Enter a valid item weight\\\"\\n\\t\\tfield2Invalid\\n\\t>\\n\\t\\t{({ field1Props, field2Props }) => (\\n\\t\\t\\t<>\\n\\t\\t\\t\\t<TextInput label=\\\"Weight\\\" {...field1Props} required value=\\\"10\\\" />\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"Unit\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ value: 'mg', label: 'mg' },\\n\\t\\t\\t\\t\\t\\t{ value: 'g', label: 'g' },\\n\\t\\t\\t\\t\\t\\t{ value: 'kg', label: 'kg' },\\n\\t\\t\\t\\t\\t\\t{ value: 't', label: 't' },\\n\\t\\t\\t\\t\\t\\t{ value: 'Mt', label: 'Mt' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\tplaceholder=\\\"Choose\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</>\\n\\t\\t)}\\n\\t</GroupedFields>\\n\\n\\t<GroupedFields\\n\\t\\tlegend=\\\"Item weight\\\"\\n\\t\\thideOptionalLabel\\n\\t\\tmessage=\\\"Enter a valid item weight\\\"\\n\\t\\tfield1Invalid\\n\\t\\tfield2Invalid\\n\\t>\\n\\t\\t{({ field1Props, field2Props }) => (\\n\\t\\t\\t<>\\n\\t\\t\\t\\t<TextInput label=\\\"Weight\\\" {...field1Props} required />\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tlabel=\\\"Unit\\\"\\n\\t\\t\\t\\t\\toptions={[\\n\\t\\t\\t\\t\\t\\t{ value: 'mg', label: 'mg' },\\n\\t\\t\\t\\t\\t\\t{ value: 'g', label: 'g' },\\n\\t\\t\\t\\t\\t\\t{ value: 'kg', label: 'kg' },\\n\\t\\t\\t\\t\\t\\t{ value: 't', label: 't' },\\n\\t\\t\\t\\t\\t\\t{ value: 'Mt', label: 'Mt' },\\n\\t\\t\\t\\t\\t]}\\n\\t\\t\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t\\t\\t\\tplaceholder=\\\"Choose\\\"\\n\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t{...field2Props}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</>\\n\\t\\t)}\\n\\t</GroupedFields>\\n</FormStack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Grouped fields","description":"The Grouped fields component allows two closely related form inputs to be grouped together.","group":"Forms","storybookPath":"/story/forms-groupedfields--basic","figmaGalleryNodeId":"20225-16760","relatedComponents":["autocomplete","combobox","date-picker","password-input","search-input","select","text-input","textarea"]}},"relatedPatterns":null,"relatedComponents":[{"slug":"autocomplete","name":"autocomplete","title":"Autocomplete","description":"Autocomplete, also known as type-ahead, uses predictive text to help select options as a user types.","storybookPath":"/story/forms-autocomplete--basic","figmaGalleryNodeId":"12911%3A103687","subNavItems":[{"label":"Overview","href":"/components/autocomplete","path":"/home/runner/work/agds-next/agds-next/packages/react/src/autocomplete/docs/overview.mdx"},{"label":"Code","href":"/components/autocomplete/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/autocomplete/docs/code.mdx"}],"relatedComponents":["combobox","text-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"combobox","name":"combobox","title":"Combobox","description":"This component allows users to select from a list of options. It’s especially useful when there are many options to choose from.","storybookPath":"/story/forms-combobox-combobox--basic","figmaGalleryNodeId":"12925%3A104632","subNavItems":[{"label":"Overview","href":"/components/combobox","path":"/home/runner/work/agds-next/agds-next/packages/react/src/combobox/docs/overview.mdx"},{"label":"Code","href":"/components/combobox/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/combobox/docs/code.mdx"}],"relatedComponents":["autocomplete","select","text-input","dropdown-menu"],"relatedPatterns":["selecting-multiple-options"],"deprecated":false,"unreleased":false},{"slug":"date-picker","name":"date-picker","title":"Date picker","description":"The Date picker component allows users to select a single date via a calendar or text input.","storybookPath":"/story/forms-datepicker-datepicker--basic","figmaGalleryNodeId":"12444%3A100327","subNavItems":[{"label":"Overview","href":"/components/date-picker","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker/docs/overview.mdx"},{"label":"Code","href":"/components/date-picker/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker/docs/code.mdx"},{"label":"Accessibility","href":"/components/date-picker/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker/docs/accessibility.mdx"}],"relatedComponents":["date-picker-next","date-range-picker-next","date-range-picker"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"password-input","name":"password-input","title":"Password input","description":"The password input component allows users to securely enter a password. The text is obscured by default, but can be revealed by pressing the ‘Show password’ checkbox.","storybookPath":"/story/forms-passwordinput--basic","figmaGalleryNodeId":"12444%3A100673","subNavItems":[{"label":"Overview","href":"/components/password-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/password-input/docs/overview.mdx"},{"label":"Code","href":"/components/password-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/password-input/docs/code.mdx"}],"relatedComponents":["text-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"search-input","name":"search-input","title":"Search input","description":"Search input enables users to enter a word or phrase to find relevant content.","storybookPath":"/story/forms-searchinput--basic","figmaGalleryNodeId":"15243%3A46806","subNavItems":[{"label":"Overview","href":"/components/search-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/search-input/docs/overview.mdx"},{"label":"Code","href":"/components/search-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/search-input/docs/code.mdx"}],"relatedComponents":["search-box"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"select","name":"select","title":"Select","description":"Select provides a way for users to choose one item from a collapsible list. It helps reduce input errors and screen space.","storybookPath":"/story/forms-select--basic","figmaGalleryNodeId":"12444%3A100538","subNavItems":[{"label":"Overview","href":"/components/select","path":"/home/runner/work/agds-next/agds-next/packages/react/src/select/docs/overview.mdx"},{"label":"Code","href":"/components/select/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/select/docs/code.mdx"}],"relatedComponents":["combobox","dropdown-menu"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"text-input","name":"text-input","title":"Text input","description":"This component allows users to enter free-form text.","storybookPath":"/story/forms-textinput--basic","figmaGalleryNodeId":"12444%3A100673","subNavItems":[{"label":"Overview","href":"/components/text-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/text-input/docs/overview.mdx"},{"label":"Code","href":"/components/text-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/text-input/docs/code.mdx"}],"relatedComponents":["autocomplete","combobox","textarea","password-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"textarea","name":"textarea","title":"Textarea","description":"A text area lets users enter long-form, plain text over multiple lines and is commonly found in forms.","storybookPath":"/story/forms-textarea--basic","figmaGalleryNodeId":"12444%3A100718","subNavItems":[{"label":"Overview","href":"/components/textarea","path":"/home/runner/work/agds-next/agds-next/packages/react/src/textarea/docs/overview.mdx"},{"label":"Code","href":"/components/textarea/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/textarea/docs/code.mdx"}],"relatedComponents":["text-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}