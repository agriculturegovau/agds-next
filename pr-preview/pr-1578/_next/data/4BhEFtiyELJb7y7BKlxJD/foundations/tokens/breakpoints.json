{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/content","label":"Content"},{"label":"Breakpoints"}],"description":"Breakpoints are a set of predefined viewport widths that can be used to change the layout of a webpage to ensure it accommodates different devices.","page":{"slug":"breakpoints","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {BreakpointsTokenChart} = _components;\n  if (!BreakpointsTokenChart) _missingMdxReference(\"BreakpointsTokenChart\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Experiences built with AgDS should be responsive and accessible on any device. Breakpoints allow us to make adjustments to a composition based on the size of the device viewport.\"\n    }), \"\\n\", _jsx(BreakpointsTokenChart, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Responsive design in Figma\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Figma provides standard page templates for:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"320px (mobile)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"768px (tablet)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"1440px (large desktop)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We encourage mobile design at 320px wide to encourage consideration of the smallest screen edge case.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Responsive design in code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The AgDS React library provides first class support for responsive styles. The best way to take advantage of our breakpoints and responsive design is to use our \", _jsx(_components.strong, {\n        children: \"Responsive Props\"\n      }), \". Instead of manually writing CSS media queries throughout your codebase, our primitive components allow you to provide objects to generate responsive styles in your project.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we’ve made a simple Box, and passed an object to the \", _jsx(_components.code, {\n        children: \"padding\"\n      }), \" prop. The keys in the object refer to the breakpoint name.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      showCode: true,\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box background=\\\"shade\\\" padding={{ xs: 1, sm: 2, md: 4 }}>\\n\\tA box with responsive padding.\\n</Box>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Under the hood, this simple example has generated the following CSS:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \".css-11eb9 {\\n\\tpadding: 1rem;\\n}\\n\\n@media (min-width: 576px) {\\n\\t.css-11eb9 {\\n\\t\\tpadding: 2rem;\\n\\t}\\n}\\n\\n@media (min-width: 768px) {\\n\\t.css-11eb9 {\\n\\t\\tpadding: 4rem;\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can see the breakpoints and internal media queries are written to be mobile-first. This means that the styles for the smallest breakpoint are applied first, and then progressively overridden as the viewport gets larger. The \", _jsx(_components.code, {\n        children: \"padding\"\n      }), \" value is set to \", _jsx(_components.code, {\n        children: \"1rem\"\n      }), \" by default - or from 0px, which is the \", _jsx(_components.code, {\n        children: \"xs\"\n      }), \" breakpoint - and then we override it at each breakpoint, through a series of \", _jsx(_components.code, {\n        children: \"min-width\"\n      }), \" media queries.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You don’t need to provide a value for every breakpoint. Just provide a value for mobile (xs), and add any additional breakpoint values as needed.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also define responsive styles as an array. To interpret array responsive values, we convert the values defined in our \", _jsx(_components.code, {\n        children: \"breakpoints\"\n      }), \" token and sort them in ascending order. To skip certain breakpoints, you can pass \", _jsx(_components.code, {\n        children: \"null\"\n      }), \" to any item in the array to avoid generating unnecessary CSS. This approach is not recommended.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box background=\\\"shade\\\" padding={[1, 2, 4]}>\\n\\tA box with responsive padding.\\n</Box>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage in style objects\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using our primitive components - including Responsive Props - is the best way to compose layouts. But sometimes primitive components don’t support all of the style attributes you need. In these cases, you can use our breakpoints in your style objects, through the use of the \", _jsx(_components.code, {\n        children: \"mq\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"mapResponsiveProp\"\n      }), \" functions.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { mapResponsiveProp, mq } from '@ag.ds-next/react/core';\\n\\nfunction AppLayoutGrid({ children }: { children: React.ReactNode }) {\\n\\treturn (\\n\\t\\t<div\\n\\t\\t\\tcss={mq({\\n\\t\\t\\t\\tdisplay: 'grid',\\n\\t\\t\\t\\t// The value here changes depending on the viewport\\n\\t\\t\\t\\tgridTemplateColumns: mapResponsiveProp({\\n\\t\\t\\t\\t\\txs: '1fr',\\n\\t\\t\\t\\t\\txl: '17.5rem 1fr',\\n\\t\\t\\t\\t}),\\n\\t\\t\\t})}\\n\\t\\t>\\n\\t\\t\\t{children}\\n\\t\\t</div>\\n\\t);\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Or you can use the \", _jsx(_components.code, {\n        children: \"mediaQuery\"\n      }), \" tokens from \", _jsx(_components.code, {\n        children: \"Core\"\n      }), \" to add styles at specific breakpoints.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { tokens } from '@ag.ds-next/react/core';\\n\\nexport function AppLayoutHeader() {\\n\\treturn (\\n\\t\\t<Flex\\n\\t\\t\\tflexDirection=\\\"column\\\"\\n\\t\\t\\tcss={{\\n\\t\\t\\t\\t// use the 'minimum width' mediaQuery tokens from Core.\\n\\t\\t\\t\\t// This resolves to `@media (min-width: 1200px)`\\n\\t\\t\\t\\t[tokens.mediaQuery.min.xl]: {\\n\\t\\t\\t\\t\\tgridColumnStart: 1,\\n\\t\\t\\t\\t\\tgridColumnEnd: 3,\\n\\t\\t\\t\\t},\\n\\t\\t\\t}}\\n\\t\\t>\\n\\t\\t\\t...\\n\\t\\t</Flex>\\n\\t);\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"content":"Experiences built with AgDS should be responsive and accessible on any device. Breakpoints allow us to make adjustments to a composition based on the size of the device viewport.\n\n<BreakpointsTokenChart />\n\n## Responsive design in Figma\n\nFigma provides standard page templates for:\n\n- 320px (mobile)\n- 768px (tablet)\n- 1440px (large desktop)\n\nWe encourage mobile design at 320px wide to encourage consideration of the smallest screen edge case.\n\n## Responsive design in code\n\nThe AgDS React library provides first class support for responsive styles. The best way to take advantage of our breakpoints and responsive design is to use our **Responsive Props**. Instead of manually writing CSS media queries throughout your codebase, our primitive components allow you to provide objects to generate responsive styles in your project.\n\nIn this example, we’ve made a simple Box, and passed an object to the `padding` prop. The keys in the object refer to the breakpoint name.\n\n```tsx live showCode\n<Box background=\"shade\" padding={{ xs: 1, sm: 2, md: 4 }}>\n\tA box with responsive padding.\n</Box>\n```\n\nUnder the hood, this simple example has generated the following CSS:\n\n```css\n.css-11eb9 {\n\tpadding: 1rem;\n}\n\n@media (min-width: 576px) {\n\t.css-11eb9 {\n\t\tpadding: 2rem;\n\t}\n}\n\n@media (min-width: 768px) {\n\t.css-11eb9 {\n\t\tpadding: 4rem;\n\t}\n}\n```\n\nYou can see the breakpoints and internal media queries are written to be mobile-first. This means that the styles for the smallest breakpoint are applied first, and then progressively overridden as the viewport gets larger. The `padding` value is set to `1rem` by default - or from 0px, which is the `xs` breakpoint - and then we override it at each breakpoint, through a series of `min-width` media queries.\n\nYou don’t need to provide a value for every breakpoint. Just provide a value for mobile (xs), and add any additional breakpoint values as needed.\n\nYou can also define responsive styles as an array. To interpret array responsive values, we convert the values defined in our `breakpoints` token and sort them in ascending order. To skip certain breakpoints, you can pass `null` to any item in the array to avoid generating unnecessary CSS. This approach is not recommended.\n\n```tsx\n<Box background=\"shade\" padding={[1, 2, 4]}>\n\tA box with responsive padding.\n</Box>\n```\n\n### Usage in style objects\n\nUsing our primitive components - including Responsive Props - is the best way to compose layouts. But sometimes primitive components don’t support all of the style attributes you need. In these cases, you can use our breakpoints in your style objects, through the use of the `mq` and `mapResponsiveProp` functions.\n\n```tsx\nimport { mapResponsiveProp, mq } from '@ag.ds-next/react/core';\n\nfunction AppLayoutGrid({ children }: { children: React.ReactNode }) {\n\treturn (\n\t\t<div\n\t\t\tcss={mq({\n\t\t\t\tdisplay: 'grid',\n\t\t\t\t// The value here changes depending on the viewport\n\t\t\t\tgridTemplateColumns: mapResponsiveProp({\n\t\t\t\t\txs: '1fr',\n\t\t\t\t\txl: '17.5rem 1fr',\n\t\t\t\t}),\n\t\t\t})}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n```\n\nOr you can use the `mediaQuery` tokens from `Core` to add styles at specific breakpoints.\n\n```tsx\nimport { tokens } from '@ag.ds-next/react/core';\n\nexport function AppLayoutHeader() {\n\treturn (\n\t\t<Flex\n\t\t\tflexDirection=\"column\"\n\t\t\tcss={{\n\t\t\t\t// use the 'minimum width' mediaQuery tokens from Core.\n\t\t\t\t// This resolves to `@media (min-width: 1200px)`\n\t\t\t\t[tokens.mediaQuery.min.xl]: {\n\t\t\t\t\tgridColumnStart: 1,\n\t\t\t\t\tgridColumnEnd: 3,\n\t\t\t\t},\n\t\t\t}}\n\t\t>\n\t\t\t...\n\t\t</Flex>\n\t);\n}\n```\n","data":{},"title":"breakpoints","description":null},"editPath":"/docs/content/foundations/tokens/breakpoints.mdx","pageTitle":"Breakpoint tokens","toc":[{"id":"responsive-design-in-figma","title":"Responsive design in Figma","level":2,"slug":"responsive-design-in-figma","items":[]},{"id":"responsive-design-in-code","title":"Responsive design in code","level":2,"slug":"responsive-design-in-code","items":[{"id":"usage-in-style-objects","title":"Usage in style objects","level":3,"slug":"usage-in-style-objects","items":[]}]}]},"__N_SSG":true}