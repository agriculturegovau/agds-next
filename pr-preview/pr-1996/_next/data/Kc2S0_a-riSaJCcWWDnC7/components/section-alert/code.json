{"pageProps":{"pkg":{"slug":"section-alert","name":"section-alert","title":"Section alert","description":"Section alerts are non-disruptive notifications that provide Success, Error, Warning, Information and Progress messages about a state change in a section of a page.","storybookPath":"/story/Content-SectionAlert--basic","figmaGalleryNodeId":"19223%3A12705","subNavItems":[{"label":"Overview","href":"/components/section-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/overview.mdx"},{"label":"Content","href":"/components/section-alert/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/content.mdx"},{"label":"Code","href":"/components/section-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/code.mdx"}],"relatedComponents":["callout","page-alert","status-badge","global-alert"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Divider with text","href":"/components/divider-with-text"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"href":"/components/section-alert","label":"Section alert"},{"label":"Code"}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    em: \"em\",\n    code: \"code\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {ComponentPropsTable} = _components;\n  if (!ComponentPropsTable) _missingMdxReference(\"ComponentPropsTable\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Props\"\n    }), \"\\n\", _jsx(ComponentPropsTable, {\n      name: \"SectionAlert\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Focusing the alert\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"NOTE: When focusing an alert after closing a \", _jsx(_components.code, {\n          children: \"Drawer\"\n        }), \", use the \", _jsx(_components.a, {\n          href: \"/components/drawer#focus-custom-element-on-close\",\n          children: \"focusElementOnClose prop in the Drawer component\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the event you need to focus the alert, you can do so in one of three ways:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#automatically-focus-on-mount\",\n          children: \"Automatically focus on mount\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#automatically-focus-on-update\",\n          children: \"Automatically focus on update\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#manually-set-focus\",\n          children: \"Manually set focus\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Automatically focus on mount\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the \\\"Toggle alert\\\" button below to mount/unmount the alert. Notice that each time the alert is mounted it will be focused. Here we use the \", _jsx(_components.code, {\n        children: \"focusOnMount\"\n      }), \" boolean prop to automatically handle the focusing.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [showAlert, setShowAlert] = React.useState(false);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\talignSelf=\\\"start\\\"\\n\\t\\t\\t\\tonClick={() => setShowAlert((prevShowAlert) => !prevShowAlert)}\\n\\t\\t\\t>\\n\\t\\t\\t\\tToggle alert\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t{showAlert && (\\n\\t\\t\\t\\t<SectionAlert\\n\\t\\t\\t\\t\\tfocusOnMount\\n\\t\\t\\t\\t\\ttitle=\\\"Something went wrong\\\"\\n\\t\\t\\t\\t\\ttone=\\\"errorHigh\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">There was an error submitting the application.</Text>\\n\\t\\t\\t\\t</SectionAlert>\\n\\t\\t\\t)}\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Automatically focus on update\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the \\\"Toggle alert\\\" button below to mount/unmount the alert. Notice that each time the alert is mounted and subsequently updated it will be focused. Here we use the \", _jsx(_components.code, {\n        children: \"focusOnUpdate\"\n      }), \" prop to automatically handle the focusing both on mount, and on updates to the alert's content.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once the alert is displayed, try updating the content by pressing the \\\"Update alert content\\\" button. This will focus the alert.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst availableErrors = [\\n\\t\\t'Full name must not be empty.',\\n\\t\\t'Email must not be empty.',\\n\\t];\\n\\n\\tconst [errors, setErrors] = React.useState([]);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\talignSelf=\\\"start\\\"\\n\\t\\t\\t\\tonClick={() =>\\n\\t\\t\\t\\t\\t// Here we mock the updating of errors in our list\\n\\t\\t\\t\\t\\tsetErrors((prevErrors) =>\\n\\t\\t\\t\\t\\t\\tavailableErrors\\n\\t\\t\\t\\t\\t\\t\\t.toReversed()\\n\\t\\t\\t\\t\\t\\t\\t.slice(\\n\\t\\t\\t\\t\\t\\t\\t\\tavailableErrors.length - prevErrors.length - 1,\\n\\t\\t\\t\\t\\t\\t\\t\\tavailableErrors.length - prevErrors.length + 1\\n\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t.reverse()\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t}\\n\\t\\t\\t>\\n\\t\\t\\t\\tUpdate alert content\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t{!!errors.length && (\\n\\t\\t\\t\\t<SectionAlert\\n\\t\\t\\t\\t\\tfocusOnUpdate={errors}\\n\\t\\t\\t\\t\\ttitle=\\\"Something went wrong\\\"\\n\\t\\t\\t\\t\\ttone=\\\"errorHigh\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<UnorderedList>\\n\\t\\t\\t\\t\\t\\t{errors.map((text) => (\\n\\t\\t\\t\\t\\t\\t\\t<ListItem key={text}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Text as=\\\"p\\\">{text}</Text>\\n\\t\\t\\t\\t\\t\\t\\t</ListItem>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</UnorderedList>\\n\\t\\t\\t\\t</SectionAlert>\\n\\t\\t\\t)}\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Manually set focus\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the \\\"Focus the alert\\\" button below to set focus on the alert. To achieve this, we set the \", _jsx(_components.code, {\n        children: \"tabIndex\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"-1\"\n      }), \". This will allow programmatic focusing and will render a focus ring to aid accessibility.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst alertRef = React.useRef(null);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button alignSelf=\\\"start\\\" onClick={() => alertRef.current.focus()}>\\n\\t\\t\\t\\tFocus the alert\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t<SectionAlert\\n\\t\\t\\t\\tref={alertRef}\\n\\t\\t\\t\\ttabIndex={-1}\\n\\t\\t\\t\\ttitle=\\\"Submission successful\\\"\\n\\t\\t\\t\\ttone=\\\"successHigh\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<Text as=\\\"p\\\">Your application has been received.</Text>\\n\\t\\t\\t</SectionAlert>\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"toc":[{"id":"props","title":"Props","level":2,"slug":"props","items":[]},{"id":"focusing-the-alert","title":"Focusing the alert","level":2,"slug":"focusing-the-alert","items":[{"id":"automatically-focus-on-mount","title":"Automatically focus on mount","level":3,"slug":"automatically-focus-on-mount","items":[]},{"id":"automatically-focus-on-update","title":"Automatically focus on update","level":3,"slug":"automatically-focus-on-update","items":[]},{"id":"manually-set-focus","title":"Manually set focus","level":3,"slug":"manually-set-focus","items":[]}]}]},"__N_SSG":true}