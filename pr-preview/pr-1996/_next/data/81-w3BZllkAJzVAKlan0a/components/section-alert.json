{"pageProps":{"pkg":{"slug":"section-alert","name":"section-alert","title":"Section alert","description":"Section alerts are non-disruptive notifications that provide Success, Error, Warning, Information and Progress messages about a state change in a section of a page.","storybookPath":"/story/Content-SectionAlert--basic","figmaGalleryNodeId":"19223%3A12705","subNavItems":[{"label":"Overview","href":"/components/section-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/overview.mdx"},{"label":"Content","href":"/components/section-alert/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/content.mdx"},{"label":"Code","href":"/components/section-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/section-alert/docs/code.mdx"}],"relatedComponents":["callout","global-alert","page-alert","status-badge"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Divider with text","href":"/components/divider-with-text"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Section alert"}],"toc":[{"id":"tones","title":"Tones","level":2,"slug":"tones","items":[{"id":"success","title":"Success","level":3,"slug":"success","items":[]},{"id":"error","title":"Error","level":3,"slug":"error","items":[]},{"id":"warning","title":"Warning","level":3,"slug":"warning","items":[]},{"id":"information","title":"Information","level":3,"slug":"information","items":[]},{"id":"progress","title":"Progress","level":3,"slug":"progress","items":[]}]},{"id":"status-and-emphasis","title":"Status and emphasis","level":2,"slug":"status-and-emphasis","items":[{"id":"high-emphasis","title":"High emphasis","level":3,"slug":"high-emphasis","items":[]},{"id":"medium-emphasis","title":"Medium emphasis","level":3,"slug":"medium-emphasis","items":[]},{"id":"low-emphasis","title":"Low emphasis","level":3,"slug":"low-emphasis","items":[]}]},{"id":"dismissable","title":"Dismissable","level":2,"slug":"dismissable","items":[]},{"id":"focusing-the-alert","title":"Focusing the alert","level":2,"slug":"focusing-the-alert","items":[{"id":"automatically-focus-on-mount","title":"Automatically focus on mount","level":3,"slug":"automatically-focus-on-mount","items":[]},{"id":"automatically-focus-on-update","title":"Automatically focus on update","level":3,"slug":"automatically-focus-on-update","items":[]},{"id":"manually-set-focus","title":"Manually set focus","level":3,"slug":"manually-set-focus","items":[]}]},{"id":"colour","title":"Colour","level":2,"slug":"colour","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    em: \"em\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Section alerts appear inside of the main content area of the page and are used to alert users to a particular section of the screen. They should not be confused with Callouts.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"successHigh\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to notify users about a change in state in a section of a page\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use to communicate error, warning, success, informative or progress messages\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"allow users to dismiss alerts that are not critical\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"place above interactive components or at the top of page sections\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use constructive, no-blame language, avoid vague descriptions and always provide a solution\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"keep it short - content should be understood at a glance\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use feedback that accurately communicates the state or progress\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"apply the correct emphasis level to communicate the urgency or importance of the status tone.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"use to communicate messages which relate to the entire page - use \", _jsx(_components.a, {\n          href: \"/components/page-alert\",\n          children: \"Page alert\"\n        }), \" instead\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"use to communicate messages which relate to the entire application - use \", _jsx(_components.a, {\n          href: \"/components/global-alert\",\n          children: \"Global alert\"\n        }), \" instead\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"change tone colours or apply new colours - the default colour set has semantic meaning that matches the ARIA label and meaningful image\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"use to contain text in articles or other blocks of text content - use \", _jsx(_components.a, {\n          href: \"/components/callout\",\n          children: \"Callout\"\n        }), \" instead\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"close or hide the message automatically. Let the user dismiss the message instead\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"repeat the title in the description\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use the description if the title is enough to convey the message\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"include a close button for error messages.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tones\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Section alert can be used to communicate different types of messages. Choosing a tone for a Section alert allows the user to understand the importance and severity of the message at a glance.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The five supported tones are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#success\",\n          children: \"Success\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#error\",\n          children: \"Error\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#warning\",\n          children: \"Warning\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#information\",\n          children: \"Information\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#progress\",\n          children: \"Progress\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Success\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The success section alert (green) is used for notifying the user that a task is fully completed.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"successHigh\\\" />\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Error\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The error section alert (red) should be used when something destructive or critical has happened.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<SectionAlert\\n\\t\\ttitle=\\\"There was an error saving your changes\\\"\\n\\t\\ttone=\\\"errorHigh\\\"\\n\\t/>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Warning\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use warning section alerts (orange) to tell the user something urgent. Only use an alert if the information will help the user avoid a problem.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<SectionAlert title=\\\"A warning message for this section\\\" tone=\\\"warningHigh\\\" />\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Information\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use info section alerts (blue) to highlight information which is important for users.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<SectionAlert title=\\\"These records need more information\\\" tone=\\\"infoHigh\\\" />\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Progress\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use in progress section alerts to highlight information which relates to status.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<SectionAlert title=\\\"Record is in progress\\\" tone=\\\"inProgressLow\\\" />\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Status and emphasis\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The tone prop combines both a status and emphasis, which sets the correct importance and severity of the Section alert by automatically applying appropriate colour, iconography and accessible descriptions.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are nine unique tones with five levels of emphasis. All tones are available in Low emphasis but others are only available in Medium and High.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"High emphasis\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"High emphasis Section alerts use filled icons and are available in four tone colours.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use high emphasis section alerts for:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"important system messages\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"notifications that require user action\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"conveying urgent statuses in lists.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"successHigh\\\" />\\n\\t<SectionAlert\\n\\t\\ttitle=\\\"There was an error saving your changes\\\"\\n\\t\\ttone=\\\"errorHigh\\\"\\n\\t/>\\n\\t<SectionAlert title=\\\"A warning message for this section\\\" tone=\\\"warningHigh\\\" />\\n\\t<SectionAlert\\n\\t\\ttitle=\\\"An information message for this section\\\"\\n\\t\\ttone=\\\"infoHigh\\\"\\n\\t/>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Medium emphasis\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Medium emphasis Section alerts use stroked icons and are available in four tone colours.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use medium emphasis section alerts to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"convey non-urgent alerts.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"successMedium\\\" />\\n\\t<SectionAlert\\n\\t\\ttitle=\\\"There was an error saving your changes\\\"\\n\\t\\ttone=\\\"errorMedium\\\"\\n\\t/>\\n\\t<SectionAlert\\n\\t\\ttitle=\\\"A warning message for this section\\\"\\n\\t\\ttone=\\\"warningMedium\\\"\\n\\t/>\\n\\t<SectionAlert\\n\\t\\ttitle=\\\"An information message for this section\\\"\\n\\t\\ttone=\\\"infoMedium\\\"\\n\\t/>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Low emphasis\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Low emphasis Section alerts use stroked icons and are available in the default, neutral colour only.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use low emphasis section alerts to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"convey non-urgent alerts\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"convey progress through a process.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<SectionAlert title=\\\"Success\\\" tone=\\\"successLow\\\" />\\n\\t<SectionAlert title=\\\"Error\\\" tone=\\\"errorLow\\\" />\\n\\t<SectionAlert title=\\\"Warning\\\" tone=\\\"warningLow\\\" />\\n\\t<SectionAlert title=\\\"Info\\\" tone=\\\"infoLow\\\" />\\n\\t<Divider />\\n\\t<SectionAlert title=\\\"Cannot start\\\" tone=\\\"cannotStartLow\\\" />\\n\\t<SectionAlert title=\\\"In progress\\\" tone=\\\"inProgressLow\\\" />\\n\\t<SectionAlert title=\\\"Paused\\\" tone=\\\"pausedLow\\\" />\\n\\t<SectionAlert title=\\\"Not started\\\" tone=\\\"notStartedLow\\\" />\\n\\t<SectionAlert title=\\\"Unknown\\\" tone=\\\"unknownLow\\\" />\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dismissable\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Section alerts can be dismissed by a user if they have understood the message and no longer need to see it. Only use the close action when the alert does not impact the user’s available actions.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avoid dismissing error messages which block the user from completing a task. Instead, provide a way for the user to fix the error, then dismiss the alert once the error has been resolved.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"onClose\"\n      }), \" prop to make the alert dismissable.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a user dismisses an alert, it’s important to manage their focus appropriately to help them continue their task or journey. In some cases, there may not be an obvious (or any) element to send focus to, such as when the alert was triggered by an action on a previous page or from a drawer that is now closed. Always carefully consider the context and previous user actions before moving their focus to ensure a smooth and accessible experience.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<SectionAlert\\n\\tonClose={console.log}\\n\\ttitle=\\\"Section alert title\\\"\\n\\ttone=\\\"successHigh\\\"\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Focusing the alert\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"NOTE: When focusing an alert after closing a \", _jsx(_components.code, {\n          children: \"Drawer\"\n        }), \", use the \", _jsx(_components.a, {\n          href: \"/components/drawer#focus-custom-element-on-close\",\n          children: \"focusElementOnClose prop in the Drawer component\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the event you need to focus the alert, you can do so in one of three ways:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#automatically-focus-on-mount\",\n          children: \"Automatically focus on mount\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#automatically-focus-on-update\",\n          children: \"Automatically focus on update\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#manually-set-focus\",\n          children: \"Manually set focus\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Automatically focus on mount\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the “Toggle alert” button below to mount/unmount the alert. The alert is focused each time it is mounted. The \", _jsx(_components.code, {\n        children: \"focusOnMount\"\n      }), \" boolean prop automatically handles the focus management.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [showAlert, setShowAlert] = React.useState(false);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\talignSelf=\\\"start\\\"\\n\\t\\t\\t\\tonClick={() => setShowAlert((prevShowAlert) => !prevShowAlert)}\\n\\t\\t\\t>\\n\\t\\t\\t\\tToggle alert\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t{showAlert && (\\n\\t\\t\\t\\t<SectionAlert\\n\\t\\t\\t\\t\\tfocusOnMount\\n\\t\\t\\t\\t\\ttitle=\\\"Something went wrong\\\"\\n\\t\\t\\t\\t\\ttone=\\\"errorHigh\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">There was an error submitting the application.</Text>\\n\\t\\t\\t\\t</SectionAlert>\\n\\t\\t\\t)}\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Automatically focus on update\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the “Toggle alert” button below to mount/unmount the alert. The alert is focused each time it is mounted and its content is subsequently updated. The \", _jsx(_components.code, {\n        children: \"focusOnUpdate\"\n      }), \" prop automatically handles the focus management.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once the alert is displayed, update the content by pressing the “Update alert content” button. Focus will be automatically moved to the alert.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst availableErrors = [\\n\\t\\t'Full name must not be empty.',\\n\\t\\t'Email must not be empty.',\\n\\t];\\n\\n\\tconst [errors, setErrors] = React.useState([]);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button\\n\\t\\t\\t\\talignSelf=\\\"start\\\"\\n\\t\\t\\t\\tonClick={() =>\\n\\t\\t\\t\\t\\t// Here we mock the updating of errors in our list\\n\\t\\t\\t\\t\\tsetErrors((prevErrors) =>\\n\\t\\t\\t\\t\\t\\tavailableErrors\\n\\t\\t\\t\\t\\t\\t\\t.toReversed()\\n\\t\\t\\t\\t\\t\\t\\t.slice(\\n\\t\\t\\t\\t\\t\\t\\t\\tavailableErrors.length - prevErrors.length - 1,\\n\\t\\t\\t\\t\\t\\t\\t\\tavailableErrors.length - prevErrors.length + 1\\n\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t.reverse()\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t}\\n\\t\\t\\t>\\n\\t\\t\\t\\tUpdate alert content\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t{!!errors.length && (\\n\\t\\t\\t\\t<SectionAlert\\n\\t\\t\\t\\t\\tfocusOnUpdate={errors}\\n\\t\\t\\t\\t\\ttitle=\\\"Something went wrong\\\"\\n\\t\\t\\t\\t\\ttone=\\\"errorHigh\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<UnorderedList>\\n\\t\\t\\t\\t\\t\\t{errors.map((text) => (\\n\\t\\t\\t\\t\\t\\t\\t<ListItem key={text}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Text as=\\\"p\\\">{text}</Text>\\n\\t\\t\\t\\t\\t\\t\\t</ListItem>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</UnorderedList>\\n\\t\\t\\t\\t</SectionAlert>\\n\\t\\t\\t)}\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Manually set focus\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Press the “Focus the alert” button below to manually set focus on the alert. To achieve this, we must set \", _jsx(_components.code, {\n        children: \"tabIndex\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"-1\"\n      }), \" to allow programmatic focusing.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst alertRef = React.useRef(null);\\n\\n\\treturn (\\n\\t\\t<Stack gap={2}>\\n\\t\\t\\t<Button alignSelf=\\\"start\\\" onClick={() => alertRef.current.focus()}>\\n\\t\\t\\t\\tFocus the alert\\n\\t\\t\\t</Button>\\n\\n\\t\\t\\t<SectionAlert\\n\\t\\t\\t\\tref={alertRef}\\n\\t\\t\\t\\ttabIndex={-1}\\n\\t\\t\\t\\ttitle=\\\"Submission successful\\\"\\n\\t\\t\\t\\ttone=\\\"successHigh\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<Text as=\\\"p\\\">Your application has been received.</Text>\\n\\t\\t\\t</SectionAlert>\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Colour\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AgDS foreground components respond to the background colour of their parent container. When placed on a dark palette background, the dark palette variant of the component is displayed. When placed on a light palette background, the light palette variant is displayed.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This logic ensures sufficient contrast between foreground and background elements is maintained to meet WCAG 2.1 AA 4.5:1 contrast ratio for text (WCAG 1.4.3) and 3:1 for graphic elements that convey information (WCAG 1.4.11).\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Fragment>\\n\\t<Box padding={1.5}>\\n\\t\\t<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"successHigh\\\" />\\n\\t</Box>\\n\\n\\t<Box background=\\\"body\\\" padding={1.5} palette=\\\"dark\\\">\\n\\t\\t<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"successHigh\\\" />\\n\\t</Box>\\n</Fragment>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Section alert","description":"Section alerts are non-disruptive notifications that provide Success, Error, Warning, Information and Progress messages about a state change in a section of a page.","group":"Content","storybookPath":"/story/Content-SectionAlert--basic","figmaGalleryNodeId":"19223%3A12705","relatedComponents":["callout","global-alert","page-alert","status-badge"],"relatedPatterns":["messaging"]}},"relatedPatterns":[{"slug":"messaging","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Global alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/global-alert\",\n        children: \"Global alerts\"\n      }), \" display prominent service or system wide messages at the top of the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"They are used to communicate system or service wide messages, not page or feature messages. Global alerts are not initiated by the user and should persist for a session but can be dismissed by the user.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<GlobalAlert title=\\\"Alert title\\\">\\n\\t<Text as=\\\"p\\\">\\n\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce massa nibh,\\n\\t\\taliquam vel dolor non, gravida porttitor nulla. Pellentesque cursus orci\\n\\t\\tvulputate nibh sagittis blandit.\\n\\t</Text>\\n</GlobalAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Page alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/page-alert\",\n        children: \"Page alerts\"\n      }), \" are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Typically page alerts appear near the top of a page, under the H1 and introductory paragraph, following a submit action.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<PageAlert tone=\\\"error\\\" title=\\\"There is a problem\\\">\\n\\t<Text as=\\\"p\\\">Please correct the following fields and try again</Text>\\n\\t<UnorderedList>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Full name must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t\\t<ListItem>\\n\\t\\t\\t<TextLink href=\\\"#\\\">Email must not be empty</TextLink>\\n\\t\\t</ListItem>\\n\\t</UnorderedList>\\n</PageAlert>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Section alert\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/section-alert\",\n        children: \"Section alerts\"\n      }), \" are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages that are delivered in context at a specific section of the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Section alerts appear above an interactive component or at the top of a page section, and provide information or status following an action.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<SectionAlert title=\\\"Your changes have been saved\\\" tone=\\\"success\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid field\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Invalid \", _jsx(_components.a, {\n        href: \"/components/field\",\n        children: \"Fields\"\n      }), \" alert the user of something that has happened in an input component. They appear above the input and after any label or hint text.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A border is added to the left-margin of the input to group the message to the component.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput\\n\\tlabel=\\\"Email\\\"\\n\\tinvalid\\n\\tmessage=\\\"Enter an email address in the correct format, like name@example.com\\\"\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Callout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/components/callout\",\n        children: \"Callouts\"\n      }), \" are used draw attention to persistent, important or interesting information and should not be used to communicate validation or status.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An information hierarchy can be created with Callouts by applying the Feature, Information and Neutral variants of the component. The Feature variant of Callout has a larger icon and heading to draw a user’s attention.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Callout title=\\\"Callout heading\\\">\\n\\t<Text as=\\\"p\\\">Description of the callout.</Text>\\n</Callout>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Loading, empty and error states\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When loading data in an application, it is important to consider and design for loading, empty, and error states. The compositions in our \", _jsx(_components.a, {\n        href: \"/patterns/loading-error-empty-states\",\n        children: \"Loading, Error and Empty state\"\n      }), \" patterns are designed to help you communicate these states to users.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2} alignItems=\\\"flex-start\\\" role=\\\"alert\\\">\\n\\t<Stack gap={1}>\\n\\t\\t<AlertFilledIcon color=\\\"error\\\" size=\\\"lg\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tFailed to load\\n\\t\\t</Heading>\\n\\t\\t<Text>There was an error loading the data. Click retry to try again.</Text>\\n\\t</Stack>\\n\\t<Button>Retry</Button>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error page template\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/templates/error-page\",\n        children: \"Error page template\"\n      }), \" is used to display a full page error message to the user, if something goes wrong while loading the page.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This could include 404 errors, or if the application is down for maintenance.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/templates/error-page.webp\",\n        alt: \"Screenshot of error page template\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","relatedComponents":["page-alert","global-alert","section-alert","field","callout"]}},"content":"\n## Global alert\n\n[Global alerts](/components/global-alert) display prominent service or system wide messages at the top of the screen.\n\nThey are used to communicate system or service wide messages, not page or feature messages. Global alerts are not initiated by the user and should persist for a session but can be dismissed by the user.\n\n```jsx live\n<GlobalAlert title=\"Alert title\">\n\t<Text as=\"p\">\n\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce massa nibh,\n\t\taliquam vel dolor non, gravida porttitor nulla. Pellentesque cursus orci\n\t\tvulputate nibh sagittis blandit.\n\t</Text>\n</GlobalAlert>\n```\n\n## Page alert\n\n[Page alerts](/components/page-alert) are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey.\n\nTypically page alerts appear near the top of a page, under the H1 and introductory paragraph, following a submit action.\n\n```jsx live\n<PageAlert tone=\"error\" title=\"There is a problem\">\n\t<Text as=\"p\">Please correct the following fields and try again</Text>\n\t<UnorderedList>\n\t\t<ListItem>\n\t\t\t<TextLink href=\"#\">Full name must not be empty</TextLink>\n\t\t</ListItem>\n\t\t<ListItem>\n\t\t\t<TextLink href=\"#\">Email must not be empty</TextLink>\n\t\t</ListItem>\n\t</UnorderedList>\n</PageAlert>\n```\n\n## Section alert\n\n[Section alerts](/components/section-alert) are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages that are delivered in context at a specific section of the screen.\n\nSection alerts appear above an interactive component or at the top of a page section, and provide information or status following an action.\n\n```jsx live\n<SectionAlert title=\"Your changes have been saved\" tone=\"success\" />\n```\n\n## Invalid field\n\nInvalid [Fields](/components/field) alert the user of something that has happened in an input component. They appear above the input and after any label or hint text.\n\nA border is added to the left-margin of the input to group the message to the component.\n\n```jsx live\n<TextInput\n\tlabel=\"Email\"\n\tinvalid\n\tmessage=\"Enter an email address in the correct format, like name@example.com\"\n/>\n```\n\n## Callout\n\n[Callouts](/components/callout) are used draw attention to persistent, important or interesting information and should not be used to communicate validation or status.\n\nAn information hierarchy can be created with Callouts by applying the Feature, Information and Neutral variants of the component. The Feature variant of Callout has a larger icon and heading to draw a user’s attention.\n\n```jsx live\n<Callout title=\"Callout heading\">\n\t<Text as=\"p\">Description of the callout.</Text>\n</Callout>\n```\n\n## Loading, empty and error states\n\nWhen loading data in an application, it is important to consider and design for loading, empty, and error states. The compositions in our [Loading, Error and Empty state](/patterns/loading-error-empty-states) patterns are designed to help you communicate these states to users.\n\n```jsx live\n<Stack gap={2} alignItems=\"flex-start\" role=\"alert\">\n\t<Stack gap={1}>\n\t\t<AlertFilledIcon color=\"error\" size=\"lg\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tFailed to load\n\t\t</Heading>\n\t\t<Text>There was an error loading the data. Click retry to try again.</Text>\n\t</Stack>\n\t<Button>Retry</Button>\n</Stack>\n```\n\n## Error page template\n\nThe [Error page template](/templates/error-page) is used to display a full page error message to the user, if something goes wrong while loading the page.\n\nThis could include 404 errors, or if the application is down for maintenance.\n\n![Screenshot of error page template](/img/templates/error-page.webp)\n","data":{"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","relatedComponents":["page-alert","global-alert","section-alert","field","callout"]},"title":"Messaging","description":"Messaging conveys contextual information to the user, provides information in relation to a service or interaction, and provides feedback in response to their actions or the current system status.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["page-alert","global-alert","section-alert","field","callout"]}],"relatedComponents":[{"slug":"callout","name":"callout","title":"Callout","description":"Callouts are an excerpt of text used to draw attention to important or interesting information. They should not be confused with Page alerts.","storybookPath":"/story/content-callout--basic","figmaGalleryNodeId":"11981%3A101425","subNavItems":[{"label":"Overview","href":"/components/callout","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/overview.mdx"},{"label":"Code","href":"/components/callout/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/code.mdx"},{"label":"Accessibility","href":"/components/callout/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/callout/docs/accessibility.mdx"}],"relatedComponents":["global-alert","page-alert"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},{"slug":"global-alert","name":"global-alert","title":"Global alert","description":"Global alerts display prominent service or system wide messages at the top of the screen.","storybookPath":"/story/content-globalalert--basic","figmaGalleryNodeId":"15243%3A46718","subNavItems":[{"label":"Overview","href":"/components/global-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/global-alert/docs/overview.mdx"},{"label":"Code","href":"/components/global-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/global-alert/docs/code.mdx"}],"relatedComponents":["callout","page-alert","section-alert"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false},{"slug":"page-alert","name":"page-alert","title":"Page alert","description":"Page alerts are colour-coded, non-disruptive notifications that provide Success, Error, Warning or Information messages at relevant times during the user journey. They should not be confused with Callouts.","storybookPath":"/story/content-pagealert--basic","figmaGalleryNodeId":"11981%3A101690","subNavItems":[{"label":"Overview","href":"/components/page-alert","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/overview.mdx"},{"label":"Rationale","href":"/components/page-alert/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/rationale.mdx"},{"label":"Content","href":"/components/page-alert/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/content.mdx"},{"label":"Code","href":"/components/page-alert/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/code.mdx"},{"label":"Accessibility","href":"/components/page-alert/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/page-alert/docs/accessibility.mdx"}],"relatedComponents":["callout","global-alert","section-alert"],"relatedPatterns":["accessible-form-validation-and-recovery","messaging"],"deprecated":false,"unreleased":false},{"slug":"status-badge","name":"status-badge","title":"Status badge","description":"Status badges are visual indicators used to highlight an item’s status for quick recognition.","storybookPath":"/story/content-statusbadge--success-high","figmaGalleryNodeId":"18568%3A86192","subNavItems":[{"label":"Overview","href":"/components/status-badge","path":"/home/runner/work/agds-next/agds-next/packages/react/src/status-badge/docs/overview.mdx"},{"label":"Content","href":"/components/status-badge/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/status-badge/docs/content.mdx"},{"label":"Code","href":"/components/status-badge/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/status-badge/docs/code.mdx"}],"relatedComponents":["indicator-dot","notification-badge","section-alert","tags"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}