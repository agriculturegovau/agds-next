{"pageProps":{"pkg":{"slug":"autocomplete","name":"autocomplete","title":"Autocomplete","description":"Autocomplete, also known as type-ahead, uses predictive text to help select options as a user types.","storybookPath":"/story/forms-autocomplete--basic","figmaGalleryNodeId":"12911%3A103687","subNavItems":[{"label":"Overview","href":"/components/autocomplete","path":"/home/runner/work/agds-next/agds-next/packages/react/src/autocomplete/docs/overview.mdx"},{"label":"Code","href":"/components/autocomplete/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/autocomplete/docs/code.mdx"}],"relatedComponents":["combobox","text-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Autocomplete"}],"toc":[{"id":"loading-options","title":"Loading options","level":2,"slug":"loading-options","items":[]},{"id":"block","title":"Block","level":2,"slug":"block","items":[]},{"id":"required","title":"Required","level":2,"slug":"required","items":[{"id":"hide-optional-label","title":"Hide optional label","level":3,"slug":"hide-optional-label","items":[]}]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"disabled","title":"Disabled","level":2,"slug":"disabled","items":[]},{"id":"custom-rendering","title":"Custom rendering","level":2,"slug":"custom-rendering","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Autocomplete helps users by making forms or tasks faster and easier to complete. It is also a feature used in Comboboxes and search tools and bars.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Autocomplete\"\n      }), \" is a \", _jsx(_components.a, {\n        href: \"https://reactjs.org/docs/forms.html#controlled-components\",\n        children: \"controlled component\"\n      }), \" which means consumers of this component need to manage the state of this component by using the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" props.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\treturn (\\n\\t\\t<Autocomplete\\n\\t\\t\\tlabel=\\\"Find your country\\\"\\n\\t\\t\\thint=\\\"Start typing to see results\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tloadOptions={async function loadOptions(inputValue) {\\n\\t\\t\\t\\t// Simulate a slow network call\\n\\t\\t\\t\\tawait new Promise((resolve) => setTimeout(resolve, 1500));\\n\\t\\t\\t\\treturn COUNTRY_OPTIONS;\\n\\t\\t\\t}}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to help people complete input from an API\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for address or personal input\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use where spelling or data entry might be challenging\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use to order results in a meaningful way\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"indicate whether input is optional\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ensure users can easily filter a list of options\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"provide hint text for instruction\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"consider using Radio buttons if you need a user to read each option or there are less than 5 items\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"deliver suggestions in real-time for low latency.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"show more than 10 results at a time.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Loading options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"loadOptions\"\n      }), \" prop to load options from a remote source as the user types.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is a function that returns a promise, which is the set of options to be used once the promise resolves.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Block\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"block\"\n      }), \" prop to expand the component to fill the available space.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\treturn (\\n\\t\\t<Autocomplete\\n\\t\\t\\tlabel=\\\"Find your country\\\"\\n\\t\\t\\thint=\\\"Start typing to see results\\\"\\n\\t\\t\\tblock\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tloadOptions={async function loadOptions(inputValue) {\\n\\t\\t\\t\\t// Simulate a slow network call\\n\\t\\t\\t\\tawait new Promise((resolve) => setTimeout(resolve, 1500));\\n\\t\\t\\t\\treturn COUNTRY_OPTIONS;\\n\\t\\t\\t}}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop, this component will automatically append ‘(optional)’ to the label as well as using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen reader users that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indicate to screen reader users that a field is optional but don’t want to show the ‘(optional)’ label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\treturn (\\n\\t\\t<Autocomplete\\n\\t\\t\\tlabel=\\\"Find your country\\\"\\n\\t\\t\\thint=\\\"Start typing to see results\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tloadOptions={async function loadOptions(inputValue) {\\n\\t\\t\\t\\t// Simulate a slow network call\\n\\t\\t\\t\\tawait new Promise((resolve) => setTimeout(resolve, 1500));\\n\\t\\t\\t\\treturn COUNTRY_OPTIONS;\\n\\t\\t\\t}}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid. An example where this shoud be applied is when ‘All fields are required unless marked optional’.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\tconst invalid = !value;\\n\\treturn (\\n\\t\\t<Autocomplete\\n\\t\\t\\tlabel=\\\"Find your country\\\"\\n\\t\\t\\thint=\\\"Start typing to see results\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tinvalid={invalid}\\n\\t\\t\\tmessage={invalid ? 'State is required' : undefined}\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tloadOptions={async function loadOptions(inputValue) {\\n\\t\\t\\t\\t// Simulate a slow network call\\n\\t\\t\\t\\tawait new Promise((resolve) => setTimeout(resolve, 1500));\\n\\t\\t\\t\\treturn COUNTRY_OPTIONS;\\n\\t\\t\\t}}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Disabled input elements are unusable and can not be clicked. This prevents a user from interacting with the input element until another action is complete.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\treturn (\\n\\t\\t<Autocomplete\\n\\t\\t\\tlabel=\\\"Find your country\\\"\\n\\t\\t\\thint=\\\"Start typing to see results\\\"\\n\\t\\t\\tdisabled\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tloadOptions={async function loadOptions(inputValue) {\\n\\t\\t\\t\\t// Simulate a slow network call\\n\\t\\t\\t\\tawait new Promise((resolve) => setTimeout(resolve, 1500));\\n\\t\\t\\t\\treturn COUNTRY_OPTIONS;\\n\\t\\t\\t}}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom rendering\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"renderItem\"\n      }), \" prop to customise how each option in the dropdown list is rendered. Inside this function, you can make use of the \", _jsx(_components.code, {\n        children: \"AutocompleteRenderItem\"\n      }), \" component to style extra information.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note: When you are using this prop, you still need to assign a \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" to every option.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, onChange] = React.useState(null);\\n\\treturn (\\n\\t\\t<Autocomplete\\n\\t\\t\\tlabel=\\\"Search users\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={onChange}\\n\\t\\t\\tloadOptions={async function loadOptions() {\\n\\t\\t\\t\\t// Simulate a slow network connection\\n\\t\\t\\t\\tawait new Promise((resolve) => setTimeout(resolve, 1000));\\n\\t\\t\\t\\treturn NAME_OPTIONS;\\n\\t\\t\\t}}\\n\\t\\t\\trenderItem={(item) => (\\n\\t\\t\\t\\t<AutocompleteRenderItem\\n\\t\\t\\t\\t\\titemLabel={item.label}\\n\\t\\t\\t\\t\\tsecondaryText={`Role: ${item.jobTitle}`}\\n\\t\\t\\t\\t\\ttertiaryText={`Job: ${item.status}`}\\n\\t\\t\\t\\t\\tbeforeElement={\\n\\t\\t\\t\\t\\t\\t<Avatar name={item.fullName} size=\\\"sm\\\" tone=\\\"action\\\" />\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tendElement={\\n\\t\\t\\t\\t\\t\\titem.unreadMessageCount > 0 ? (\\n\\t\\t\\t\\t\\t\\t\\t<NotificationBadge\\n\\t\\t\\t\\t\\t\\t\\t\\tvalue={item.unreadMessageCount}\\n\\t\\t\\t\\t\\t\\t\\t\\ttone=\\\"action\\\"\\n\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t) : null\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t)}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Autocomplete","description":"Autocomplete, also known as type-ahead, uses predictive text to help select options as a user types.","group":"Forms","storybookPath":"/story/forms-autocomplete--basic","figmaGalleryNodeId":"12911%3A103687","relatedComponents":["combobox","text-input"]}},"relatedPatterns":null,"relatedComponents":[{"slug":"combobox","name":"combobox","title":"Combobox","description":"This component allows users to select from a list of options. It’s especially useful when there are many options to choose from.","storybookPath":"/story/forms-combobox-combobox--basic","figmaGalleryNodeId":"12925%3A104632","subNavItems":[{"label":"Overview","href":"/components/combobox","path":"/home/runner/work/agds-next/agds-next/packages/react/src/combobox/docs/overview.mdx"},{"label":"Code","href":"/components/combobox/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/combobox/docs/code.mdx"}],"relatedComponents":["autocomplete","select","text-input","dropdown-menu"],"relatedPatterns":["selecting-multiple-options"],"deprecated":false,"unreleased":false},{"slug":"text-input","name":"text-input","title":"Text input","description":"This component allows users to enter free-form text.","storybookPath":"/story/forms-textinput--basic","figmaGalleryNodeId":"12444%3A100673","subNavItems":[{"label":"Overview","href":"/components/text-input","path":"/home/runner/work/agds-next/agds-next/packages/react/src/text-input/docs/overview.mdx"},{"label":"Code","href":"/components/text-input/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/text-input/docs/code.mdx"}],"relatedComponents":["autocomplete","combobox","textarea","password-input"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}