{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Helpful form content"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed form content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/helpful-form-content","label":"Helpful form content"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"helpful-form-content","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Headings\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Headings play a crucial role in user-friendly form page design. They establish hierarchy and help users understand the purpose and structure of a form.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The H1 heading should clearly state the purpose or primary action of the form. This purpose should be reflected in the primary button label. For example, where the H1 is ‘Sign in to your account’, the primary button label might be ‘Sign in’.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Supporting headings should be used to organise sections logically. This is important for making complex forms easier to understand and complete.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Introductory paragraphs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use a concise, introductory paragraph of 1 or 2 sentences, immediately after the H1. This provides the user with any further context they need to understand the purpose of the form.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Requirements list\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"List anything the user will need to complete the form. This helps users prepare and reduces the risk of abandoned forms.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Give the list a help title such as ‘What you will need’. This should appear before any form’s fields. For a multi-page form, this should appear on a ‘Getting started’ page.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Present requirements as a scannable list of specific items. Use plain language to ensure a good understanding of what they will need.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint text\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use hint text for the smallest piece of information to help users understand each form input. An example is describing the required format for a field.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hint\"\n      }), \" prop provides help that’s relevant to the majority of users, like how their information will be used, or where to find it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t use long paragraphs or lists in hint text. Screen readers announce the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t include links within hint text. While screen readers will read out the link text when describing the field, they will not not be informed that it is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput\\n\\tlabel=\\\"Phone number\\\"\\n\\thint=\\\"Any Australian mobile or landline. For example, 0444 111 222 or 02 9988 7766\\\"\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Details\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Details component reveals more information when opened. Use the Details component for information that is useful for some users, but not needed by everyone to complete a form. Do not use the Details component if all users need the information to complete a form.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Details should only be used for one piece of content. We recommend keeping this to a paragraph or short list. If more than one piece of content is required, use a Drawer.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the guidance pertains to a list, provide the list, then link to more detailed information on all items.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We recommend the use of one link to give a clear path to the right information for the user’s context. Links to content pages should be opened in the same tab. If a user is in the middle of a process, such as filling in a form, opening links into the same tab can cause a user to lose their place. In this case, it’s preferable to open a link into a drawer or new tab. Clearly indicate this with an icon: \", _jsx(_components.code, {\n        children: \"ExternalLinkIcon\"\n      }), \" for new tabs and \", _jsx(_components.code, {\n        children: \"MoveLeftIcon\"\n      }), \" for drawers. Provide appropriate announcements for screen readers.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\t/**\\n\\t * This implementation is for documentation purposes only.\\n\\t * Use <ArticleLink> from ag.common/help-reference to handle drawers with help information.\\n\\t *\\n\\t * import { VisuallyHidden } from '@ag.ds-next/react/a11y';\\n\\t */\\n\\tconst [isDrawerOpen, openDrawer, closeDrawer] = useTernaryState(false);\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t<Details iconBefore label=\\\"Why should I invite a new staff member?\\\">\\n\\t\\t\\t\\t<Flex flexDirection=\\\"column\\\" gap={1}>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\tInviting individuals to the service can help you streamline your\\n\\t\\t\\t\\t\\t\\toperations. You can then assign them a role, so they can access\\n\\t\\t\\t\\t\\t\\tnecessary information and tasks.\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\tLearn more about{' '}\\n\\t\\t\\t\\t\\t\\t<TextLink\\n\\t\\t\\t\\t\\t\\t\\thref=\\\"/help/inviting-a-staff-member\\\"\\n\\t\\t\\t\\t\\t\\t\\tonClick={(event) => {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (event.metaKey) return;\\n\\t\\t\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\t\\t\\topenDrawer();\\n\\t\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tinviting a staff member\\n\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>, Opens in a side drawer</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t\\t<Box\\n\\t\\t\\t\\t\\t\\t\\t\\tas=\\\"span\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tcss={{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdisplay: 'inline',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmarginLeft: '0.25rem',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tposition: 'relative',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttop: 3,\\n\\t\\t\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<MoveLeftIcon size=\\\"sm\\\" weight=\\\"regular\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</Box>\\n\\t\\t\\t\\t\\t\\t</TextLink>\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t</Flex>\\n\\t\\t\\t</Details>\\n\\t\\t\\t<Drawer\\n\\t\\t\\t\\tactions={<TextLinkExternal href=\\\"#\\\">Open in new tab</TextLinkExternal>}\\n\\t\\t\\t\\tisOpen={isDrawerOpen}\\n\\t\\t\\t\\tonClose={closeDrawer}\\n\\t\\t\\t\\ttitle=\\\"Inviting a staff member\\\"\\n\\t\\t\\t\\twidth=\\\"lg\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<Stack gap={1.5}>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\" color=\\\"muted\\\" fontSize=\\\"md\\\">\\n\\t\\t\\t\\t\\t\\tInviting individuals to join your staff can bring numerous benefits\\n\\t\\t\\t\\t\\t\\tto your business and help streamline your operations.\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\tAs your business grows, you’ll need to scale your team accordingly.\\n\\t\\t\\t\\t\\t\\tInviting new staff members allows you to expand your workforce in\\n\\t\\t\\t\\t\\t\\tline with your evolving needs.\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">Below are a list of the types of roles available:</Text>\\n\\t\\t\\t\\t\\t<H2>Owner</H2>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\tOwners have the highest level of access. They can add, edit and\\n\\t\\t\\t\\t\\t\\tremove managers and staff members. They can set rosters, send an\\n\\t\\t\\t\\t\\t\\treceive messages with owners, employees and other managers.\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<H2>Manager</H2>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\tManagers can add, edit and remove staff members. They can set\\n\\t\\t\\t\\t\\t\\trosters, send an receive messages with owners, employees and other\\n\\t\\t\\t\\t\\t\\tmanagers.\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<H2>Employee</H2>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\tEmployees can see their shifts, send an receive messages with\\n\\t\\t\\t\\t\\t\\tmanagers and edit their personal and contact information.\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<Callout title=\\\"Need help?\\\">\\n\\t\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\t\\tCall <strong>02 9481 1122</strong> (9am to 5pm AEST Monday to\\n\\t\\t\\t\\t\\t\\t\\tFriday)\\n\\t\\t\\t\\t\\t\\t\\t<br />\\n\\t\\t\\t\\t\\t\\t\\tEmail{' '}\\n\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"mailto:emailaccount@yourgov.gov.au\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\temailaccount@yourgov.gov.au\\n\\t\\t\\t\\t\\t\\t\\t</TextLink>\\n\\t\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t</Callout>\\n\\t\\t\\t\\t</Stack>\\n\\t\\t\\t</Drawer>\\n\\t\\t</>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Drawer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A Drawer is a panel that slides in from the right side of the screen. The Drawer is overlayed on top of the main area of the page to capture the user’s attention while keeping the context of the current task.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Drawers can be used to filter data, for small subtask forms and to provide supporting information to users when completing a task.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avoid lengthy content that would result in scrolling.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Explore the \", _jsx(_components.a, {\n        href: \"/components/drawer\",\n        children: \"Drawer\"\n      }), \" options to see if they might be suitable.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\t/** import { VisuallyHidden } from '@ag.ds-next/react/a11y'; */\\n\\tconst [isDrawerOpen, openDrawer, closeDrawer] = useTernaryState(false);\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\tLearn more about{' '}\\n\\t\\t\\t\\t<TextLink\\n\\t\\t\\t\\t\\thref=\\\"/help/access-requests\\\"\\n\\t\\t\\t\\t\\tonClick={(event) => {\\n\\t\\t\\t\\t\\t\\tif (event.metaKey) return;\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\topenDrawer();\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tunderstanding access requests\\n\\t\\t\\t\\t\\t<VisuallyHidden>, Opens in a side drawer</VisuallyHidden>\\n\\t\\t\\t\\t\\t<Box\\n\\t\\t\\t\\t\\t\\tas=\\\"span\\\"\\n\\t\\t\\t\\t\\t\\tcss={{\\n\\t\\t\\t\\t\\t\\t\\tdisplay: 'inline',\\n\\t\\t\\t\\t\\t\\t\\tmarginLeft: '0.25rem',\\n\\t\\t\\t\\t\\t\\t\\tposition: 'relative',\\n\\t\\t\\t\\t\\t\\t\\ttop: 3,\\n\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<MoveLeftIcon size=\\\"sm\\\" weight=\\\"regular\\\" />\\n\\t\\t\\t\\t\\t</Box>\\n\\t\\t\\t\\t</TextLink>{' '}\\n\\t\\t\\t\\tfor your staff\\n\\t\\t\\t</Text>\\n\\t\\t\\t<Drawer\\n\\t\\t\\t\\tactions={<TextLinkExternal href=\\\"#\\\">Open in new tab</TextLinkExternal>}\\n\\t\\t\\t\\tisOpen={isDrawerOpen}\\n\\t\\t\\t\\tonClose={closeDrawer}\\n\\t\\t\\t\\ttitle=\\\"Help\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<Stack gap={1.5}>\\n\\t\\t\\t\\t\\t<H2>Understanding access requests</H2>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\" color=\\\"muted\\\" fontSize=\\\"md\\\">\\n\\t\\t\\t\\t\\t\\tAccess requests allow your existing employees to apply for\\n\\t\\t\\t\\t\\t\\tpermissions to use specific business systems. This enable you to\\n\\t\\t\\t\\t\\t\\tdelegate tasks effectively and streamline your operations by giving\\n\\t\\t\\t\\t\\t\\temployees the tools they need to contribute.\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<H3>Managing requests</H3>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\tYou can accept or reject each access request based on the employee's\\n\\t\\t\\t\\t\\t\\trole and responsibilities. Consider whether the employee needs\\n\\t\\t\\t\\t\\t\\tsystem access to perform their assigned duties.\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<H3>Removing access</H3>\\n\\t\\t\\t\\t\\t<Text as=\\\"p\\\">\\n\\t\\t\\t\\t\\t\\tAfter granting access, you can remove it at any time if an employee\\n\\t\\t\\t\\t\\t\\tno longer requires system access. You can also change their type of\\n\\t\\t\\t\\t\\t\\taccess as their role evolves. This might happen when:\\n\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t<UnorderedList>\\n\\t\\t\\t\\t\\t\\t<ListItem>their role changes</ListItem>\\n\\t\\t\\t\\t\\t\\t<ListItem>their responsibilities shift</ListItem>\\n\\t\\t\\t\\t\\t\\t<ListItem>they complete a specific project</ListItem>\\n\\t\\t\\t\\t\\t</UnorderedList>\\n\\t\\t\\t\\t</Stack>\\n\\t\\t\\t</Drawer>\\n\\t\\t</>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"HelpReference\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"ArticleLink\"\n      }), \" components when implementing a drawer containing help information. These can be installed from \", _jsx(_components.code, {\n        children: \"@ag.common/help-reference\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Text as=\\\"p\\\">\\n\\tLearn more about{' '}\\n\\t<ArticleLink article=\\\"your-article\\\">inviting a staff member</ArticleLink>\\n</Text>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Open in new tab\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Opening information in a new tab allows users to read related help content, without concern that they may lose their form data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Outside of forms, avoid opening links in new tabs. This can be confusing and disorienting for users. This is especially true for those who have trouble perceiving visual content. The exception would be if they are logged into a secure area and navigating away would require them to log in again.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the supporting information won’t fit into a drawer without scrolling, then open this form help content into a new tab.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Text as=\\\"p\\\">\\n\\tFor more information, go to{' '}\\n\\t<TextLinkExternal href=\\\"#\\\">\\n\\t\\tunderstanding safety requirements\\n\\t</TextLinkExternal>\\n</Text>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Related guidance\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/components/field#hint\",\n          children: \"Field hints\"\n        }), \" – Short, in context help.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/content/content-styles#links\",\n          children: \"Content styles - links\"\n        }), \" – Also known as hyperlinks, connects users to helpful, related content.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Helpful form content","description":"Providing the right content in forms can help users understand and complete forms quickly and efficiently. The location, amount and type of content provided is important.","relatedComponents":["details","drawer"],"relatedContent":["content-styles"]}},"content":"\n## Headings\n\nHeadings play a crucial role in user-friendly form page design. They establish hierarchy and help users understand the purpose and structure of a form.\n\nThe H1 heading should clearly state the purpose or primary action of the form. This purpose should be reflected in the primary button label. For example, where the H1 is ‘Sign in to your account’, the primary button label might be ‘Sign in’.\n\nSupporting headings should be used to organise sections logically. This is important for making complex forms easier to understand and complete.\n\n## Introductory paragraphs\n\nUse a concise, introductory paragraph of 1 or 2 sentences, immediately after the H1. This provides the user with any further context they need to understand the purpose of the form.\n\n## Requirements list\n\nList anything the user will need to complete the form. This helps users prepare and reduces the risk of abandoned forms.\n\nGive the list a help title such as ‘What you will need’. This should appear before any form’s fields. For a multi-page form, this should appear on a ‘Getting started’ page.\n\nPresent requirements as a scannable list of specific items. Use plain language to ensure a good understanding of what they will need.\n\n## Hint text\n\nUse hint text for the smallest piece of information to help users understand each form input. An example is describing the required format for a field.\n\nThe `hint` prop provides help that’s relevant to the majority of users, like how their information will be used, or where to find it.\n\nDon’t use long paragraphs or lists in hint text. Screen readers announce the entire text when users interact with the form element. This could frustrate users if the text is long.\n\nDon’t include links within hint text. While screen readers will read out the link text when describing the field, they will not not be informed that it is a link.\n\n```jsx live\n<TextInput\n\tlabel=\"Phone number\"\n\thint=\"Any Australian mobile or landline. For example, 0444 111 222 or 02 9988 7766\"\n/>\n```\n\n## Details\n\nThe Details component reveals more information when opened. Use the Details component for information that is useful for some users, but not needed by everyone to complete a form. Do not use the Details component if all users need the information to complete a form.\n\nDetails should only be used for one piece of content. We recommend keeping this to a paragraph or short list. If more than one piece of content is required, use a Drawer.\n\nIf the guidance pertains to a list, provide the list, then link to more detailed information on all items.\n\nWe recommend the use of one link to give a clear path to the right information for the user’s context. Links to content pages should be opened in the same tab. If a user is in the middle of a process, such as filling in a form, opening links into the same tab can cause a user to lose their place. In this case, it’s preferable to open a link into a drawer or new tab. Clearly indicate this with an icon: `ExternalLinkIcon` for new tabs and `MoveLeftIcon` for drawers. Provide appropriate announcements for screen readers.\n\n```jsx live\n() => {\n\t/**\n\t * This implementation is for documentation purposes only.\n\t * Use <ArticleLink> from ag.common/help-reference to handle drawers with help information.\n\t *\n\t * import { VisuallyHidden } from '@ag.ds-next/react/a11y';\n\t */\n\tconst [isDrawerOpen, openDrawer, closeDrawer] = useTernaryState(false);\n\treturn (\n\t\t<>\n\t\t\t<Details iconBefore label=\"Why should I invite a new staff member?\">\n\t\t\t\t<Flex flexDirection=\"column\" gap={1}>\n\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\tInviting individuals to the service can help you streamline your\n\t\t\t\t\t\toperations. You can then assign them a role, so they can access\n\t\t\t\t\t\tnecessary information and tasks.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\tLearn more about{' '}\n\t\t\t\t\t\t<TextLink\n\t\t\t\t\t\t\thref=\"/help/inviting-a-staff-member\"\n\t\t\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\t\t\tif (event.metaKey) return;\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\topenDrawer();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tinviting a staff member\n\t\t\t\t\t\t\t<VisuallyHidden>, Opens in a side drawer</VisuallyHidden>\n\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\tas=\"span\"\n\t\t\t\t\t\t\t\tcss={{\n\t\t\t\t\t\t\t\t\tdisplay: 'inline',\n\t\t\t\t\t\t\t\t\tmarginLeft: '0.25rem',\n\t\t\t\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\t\t\t\ttop: 3,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<MoveLeftIcon size=\"sm\" weight=\"regular\" />\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</TextLink>\n\t\t\t\t\t</Text>\n\t\t\t\t</Flex>\n\t\t\t</Details>\n\t\t\t<Drawer\n\t\t\t\tactions={<TextLinkExternal href=\"#\">Open in new tab</TextLinkExternal>}\n\t\t\t\tisOpen={isDrawerOpen}\n\t\t\t\tonClose={closeDrawer}\n\t\t\t\ttitle=\"Inviting a staff member\"\n\t\t\t\twidth=\"lg\"\n\t\t\t>\n\t\t\t\t<Stack gap={1.5}>\n\t\t\t\t\t<Text as=\"p\" color=\"muted\" fontSize=\"md\">\n\t\t\t\t\t\tInviting individuals to join your staff can bring numerous benefits\n\t\t\t\t\t\tto your business and help streamline your operations.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\tAs your business grows, you’ll need to scale your team accordingly.\n\t\t\t\t\t\tInviting new staff members allows you to expand your workforce in\n\t\t\t\t\t\tline with your evolving needs.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Text as=\"p\">Below are a list of the types of roles available:</Text>\n\t\t\t\t\t<H2>Owner</H2>\n\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\tOwners have the highest level of access. They can add, edit and\n\t\t\t\t\t\tremove managers and staff members. They can set rosters, send an\n\t\t\t\t\t\treceive messages with owners, employees and other managers.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<H2>Manager</H2>\n\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\tManagers can add, edit and remove staff members. They can set\n\t\t\t\t\t\trosters, send an receive messages with owners, employees and other\n\t\t\t\t\t\tmanagers.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<H2>Employee</H2>\n\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\tEmployees can see their shifts, send an receive messages with\n\t\t\t\t\t\tmanagers and edit their personal and contact information.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Callout title=\"Need help?\">\n\t\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\t\tCall <strong>02 9481 1122</strong> (9am to 5pm AEST Monday to\n\t\t\t\t\t\t\tFriday)\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\tEmail{' '}\n\t\t\t\t\t\t\t<TextLink href=\"mailto:emailaccount@yourgov.gov.au\">\n\t\t\t\t\t\t\t\temailaccount@yourgov.gov.au\n\t\t\t\t\t\t\t</TextLink>\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Callout>\n\t\t\t\t</Stack>\n\t\t\t</Drawer>\n\t\t</>\n\t);\n};\n```\n\n## Drawer\n\nA Drawer is a panel that slides in from the right side of the screen. The Drawer is overlayed on top of the main area of the page to capture the user’s attention while keeping the context of the current task.\n\nDrawers can be used to filter data, for small subtask forms and to provide supporting information to users when completing a task.\n\nAvoid lengthy content that would result in scrolling.\n\nExplore the [Drawer](/components/drawer) options to see if they might be suitable.\n\n```jsx live\n() => {\n\t/** import { VisuallyHidden } from '@ag.ds-next/react/a11y'; */\n\tconst [isDrawerOpen, openDrawer, closeDrawer] = useTernaryState(false);\n\treturn (\n\t\t<>\n\t\t\t<Text as=\"p\">\n\t\t\t\tLearn more about{' '}\n\t\t\t\t<TextLink\n\t\t\t\t\thref=\"/help/access-requests\"\n\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\tif (event.metaKey) return;\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\topenDrawer();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tunderstanding access requests\n\t\t\t\t\t<VisuallyHidden>, Opens in a side drawer</VisuallyHidden>\n\t\t\t\t\t<Box\n\t\t\t\t\t\tas=\"span\"\n\t\t\t\t\t\tcss={{\n\t\t\t\t\t\t\tdisplay: 'inline',\n\t\t\t\t\t\t\tmarginLeft: '0.25rem',\n\t\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\t\ttop: 3,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MoveLeftIcon size=\"sm\" weight=\"regular\" />\n\t\t\t\t\t</Box>\n\t\t\t\t</TextLink>{' '}\n\t\t\t\tfor your staff\n\t\t\t</Text>\n\t\t\t<Drawer\n\t\t\t\tactions={<TextLinkExternal href=\"#\">Open in new tab</TextLinkExternal>}\n\t\t\t\tisOpen={isDrawerOpen}\n\t\t\t\tonClose={closeDrawer}\n\t\t\t\ttitle=\"Help\"\n\t\t\t>\n\t\t\t\t<Stack gap={1.5}>\n\t\t\t\t\t<H2>Understanding access requests</H2>\n\t\t\t\t\t<Text as=\"p\" color=\"muted\" fontSize=\"md\">\n\t\t\t\t\t\tAccess requests allow your existing employees to apply for\n\t\t\t\t\t\tpermissions to use specific business systems. This enable you to\n\t\t\t\t\t\tdelegate tasks effectively and streamline your operations by giving\n\t\t\t\t\t\temployees the tools they need to contribute.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<H3>Managing requests</H3>\n\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\tYou can accept or reject each access request based on the employee's\n\t\t\t\t\t\trole and responsibilities. Consider whether the employee needs\n\t\t\t\t\t\tsystem access to perform their assigned duties.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<H3>Removing access</H3>\n\t\t\t\t\t<Text as=\"p\">\n\t\t\t\t\t\tAfter granting access, you can remove it at any time if an employee\n\t\t\t\t\t\tno longer requires system access. You can also change their type of\n\t\t\t\t\t\taccess as their role evolves. This might happen when:\n\t\t\t\t\t</Text>\n\t\t\t\t\t<UnorderedList>\n\t\t\t\t\t\t<ListItem>their role changes</ListItem>\n\t\t\t\t\t\t<ListItem>their responsibilities shift</ListItem>\n\t\t\t\t\t\t<ListItem>they complete a specific project</ListItem>\n\t\t\t\t\t</UnorderedList>\n\t\t\t\t</Stack>\n\t\t\t</Drawer>\n\t\t</>\n\t);\n};\n```\n\nUse the `HelpReference` and `ArticleLink` components when implementing a drawer containing help information. These can be installed from `@ag.common/help-reference`\n\n```jsx\n<Text as=\"p\">\n\tLearn more about{' '}\n\t<ArticleLink article=\"your-article\">inviting a staff member</ArticleLink>\n</Text>\n```\n\n## Open in new tab\n\nOpening information in a new tab allows users to read related help content, without concern that they may lose their form data.\n\nOutside of forms, avoid opening links in new tabs. This can be confusing and disorienting for users. This is especially true for those who have trouble perceiving visual content. The exception would be if they are logged into a secure area and navigating away would require them to log in again.\n\nIf the supporting information won’t fit into a drawer without scrolling, then open this form help content into a new tab.\n\n```jsx live\n<Text as=\"p\">\n\tFor more information, go to{' '}\n\t<TextLinkExternal href=\"#\">\n\t\tunderstanding safety requirements\n\t</TextLinkExternal>\n</Text>\n```\n\n## Related guidance\n\n- [Field hints](/components/field#hint) – Short, in context help.\n- [Content styles - links](/content/content-styles#links) – Also known as hyperlinks, connects users to helpful, related content.\n","data":{"title":"Helpful form content","description":"Providing the right content in forms can help users understand and complete forms quickly and efficiently. The location, amount and type of content provided is important.","relatedComponents":["details","drawer"],"relatedContent":["content-styles"]},"title":"Helpful form content","description":"Providing the right content in forms can help users understand and complete forms quickly and efficiently. The location, amount and type of content provided is important.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["details","drawer"],"relatedPatterns":null},"relatedComponents":[{"slug":"details","name":"details","title":"Details","description":"The Details component hides non-essential content unless a user explicitly chooses to view it.","storybookPath":"/story/content-details--basic","figmaGalleryNodeId":"14934%3A110986","subNavItems":[{"label":"Overview","href":"/components/details","path":"/home/runner/work/agds-next/agds-next/packages/react/src/details/docs/overview.mdx"},{"label":"Content","href":"/components/details/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/details/docs/content.mdx"},{"label":"Code","href":"/components/details/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/details/docs/code.mdx"},{"label":"Accessibility","href":"/components/details/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/details/docs/accessibility.mdx"}],"relatedComponents":["accordion","tabs"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"drawer","name":"drawer","title":"Drawer","description":"A drawer is a panel that slides in from the right side of the screen. The Drawer is overlayed on top of the main area of the page to capture the user’s attention while keeping the context of the current task.","storybookPath":"/story/layout-drawer--basic","figmaGalleryNodeId":"18684%3A85147","subNavItems":[{"label":"Overview","href":"/components/drawer","path":"/home/runner/work/agds-next/agds-next/packages/react/src/drawer/docs/overview.mdx"},{"label":"Code","href":"/components/drawer/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/drawer/docs/code.mdx"}],"relatedComponents":["modal"],"relatedPatterns":["search-filters"],"deprecated":false,"unreleased":false}],"relatedPatterns":null,"toc":[{"id":"headings","title":"Headings","level":2,"slug":"headings","items":[]},{"id":"introductory-paragraphs","title":"Introductory paragraphs","level":2,"slug":"introductory-paragraphs","items":[]},{"id":"requirements-list","title":"Requirements list","level":2,"slug":"requirements-list","items":[]},{"id":"hint-text","title":"Hint text","level":2,"slug":"hint-text","items":[]},{"id":"details","title":"Details","level":2,"slug":"details","items":[]},{"id":"drawer","title":"Drawer","level":2,"slug":"drawer","items":[]},{"id":"open-in-new-tab","title":"Open in new tab","level":2,"slug":"open-in-new-tab","items":[]},{"id":"related-guidance","title":"Related guidance","level":2,"slug":"related-guidance","items":[]},{"id":"related-components","items":[],"level":2,"slug":"related-components","title":"Related components"}]},"__N_SSG":true}