{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Helpful form content"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed form content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/helpful-form-content","label":"Helpful form content"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"helpful-form-content","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Headings\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Headings play a crucial role in user-friendly form page design. They establish hierarchy and help users understand the purpose and structure of a form.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The H1 heading should clearly state the purpose or primary action of the form. This purpose should be reflected in the primary button label. For example, where the H1 is ’Sign in to your account’, the primary button label might be ’Sign in’.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Supporting headings should be used to organise sections logically. This is important for making complex forms easier to understand and complete.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Introductory paragraphs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use a concise, introductory paragraph of 1 or 2 sentences, immediately after the H1. This provides the user with an further context they need to understand the purpose of the form.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Requirements list\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"List anything the user will need to complete the form. This helps users prepare and reduce the risk of abandoned forms.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Give the list a help title such as ’What you will need’. This should appear before any forms fields. For a multi-page form, this should appear on a ’Getting started’ page.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Present requirements as a scannable list of specific items. Use plain language to ensure a good understanding of what they will need.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint text\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use hit text for the smallest piece of information that will help users to understand each form input or control and complete forms. This could be the mark a field as optional or to let them know the required format for a field.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The hint prop provides help that’s relevant to the majority of users, like how their information will be used, or where to find it.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t use long paragraphs or lists in hint text. Screen readers announce the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput\\n    label=\\\"Phone number\\\"\\n    hint=\\\"Any Australian mobile or landline. For example, 0444 111 222 or 02 9988 7766\\\"\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Details\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Details component reveals more information when opened. Use the Details component for information that is useful for some users, but not needed by everyone to complete a form. Do not use the Details component if all users need the information to complete a form.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Details should only be used for one piece of content. We recommended keeping this to a paragraph or short list. If more than one piece of content is required, use a \", _jsx(_components.a, {\n        href: \"#drawer\",\n        children: \"Drawer\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the guidance pertains to a list, provide the list, then link to more detailed information on all items.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We recommend the use of one link to give a clear path to the right information for the user’s context. Links to content pages should be opened in the same tab. If a user is in the middle of a process, such as filling in a form, opening lists into the same tab can cause a user to lose their place. In this case it’s preferable to open a link into a drawer or new tab. Clearly indicated this with an icon: \", _jsx(_components.code, {\n        children: \"ExternalLinkIcon\"\n      }), \" for new tabs and \", _jsx(_components.code, {\n        children: \"MoveLeftIcon\"\n      }), \" for drawers. Provide appropriate announcements for screen readers.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Details label=\\\"Why should I invite a new staff member?\\\" iconBefore>\\n\\t<Text as=\\\"p\\\">\\n\\t\\tInviting individuals to the service can help you streamline your operations. You can then assign them a role, so they can access necessary information and tasks.\\n\\t</Text>\\n    <TextLinkExternal href=\\\"#\\\">\\n\\t\\tLearn more about inviting a staff member\\n\\t</TextLinkExternal>\\n</Details>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Drawer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A Drawer is a panel that slides in from the right side of the screen. The Drawer is overlayed on top of the main area of the page to capture the user’s attention while keeping the context of the current task.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Drawers can be used to filter data, for small subtask forms and to provide supporting information to users when completing a task.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avoid lengthy context that would result in scrolling.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Explore the \", _jsx(_components.a, {\n        href: \"/components/drawer\",\n        children: \"Drawer\"\n      }), \" options to see if they might be suitable.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [isDrawerOpen, openDrawer, closeDrawer] = useTernaryState(false);\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t<Button onClick={openDrawer}>Open Drawer</Button>\\n\\t\\t\\t<Drawer\\n\\t\\t\\t\\tisOpen={isDrawerOpen}\\n\\t\\t\\t\\tonClose={closeDrawer}\\n\\t\\t\\t\\ttitle=\\\"Drawer title\\\"\\n\\t\\t\\t\\tactions={\\n\\t\\t\\t\\t\\t<ButtonGroup>\\n\\t\\t\\t\\t\\t\\t<Button onClick={closeDrawer}>Primary</Button>\\n\\t\\t\\t\\t\\t\\t<Button variant=\\\"secondary\\\" onClick={closeDrawer}>\\n\\t\\t\\t\\t\\t\\t\\tSecondary\\n\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t<Button variant=\\\"tertiary\\\" onClick={closeDrawer}>\\n\\t\\t\\t\\t\\t\\t\\tTertiary\\n\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t\\t}\\n\\t\\t\\t>\\n\\t\\t\\t\\t<Text as=\\\"p\\\">Drawer body area.</Text>\\n\\t\\t\\t</Drawer>\\n\\t\\t</>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Open in new tab\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Opening information in a new tab allows users to read related help content, without concern that they may lose their form data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Outside of forms, avoid opening links in new tabs. This can be confusing and disorienting for users. This is especially true for those who have trouble perceiving visual content. The exception would be if they are logged into a secure area and navigating away would require them to log in again.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the supporting information won’t fit into a drawer without scrolling, then open this form help content into a new tab.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Helpful form content","description":"Providing the right content in forms can help users understand and complete forms quickly and efficiently. The location, amount and type of content provided is important.","relatedComponents":["details","drawer","field"],"relatedContent":["content-styles"]}},"content":"\n## Headings\n\nHeadings play a crucial role in user-friendly form page design. They establish hierarchy and help users understand the purpose and structure of a form.\n\nThe H1 heading should clearly state the purpose or primary action of the form. This purpose should be reflected in the primary button label. For example, where the H1 is ’Sign in to your account’, the primary button label might be ’Sign in’.\n\nSupporting headings should be used to organise sections logically. This is important for making complex forms easier to understand and complete.\n\n## Introductory paragraphs\n\nUse a concise, introductory paragraph of 1 or 2 sentences, immediately after the H1. This provides the user with an further context they need to understand the purpose of the form.\n\n## Requirements list\n\nList anything the user will need to complete the form. This helps users prepare and reduce the risk of abandoned forms.\n\nGive the list a help title such as ’What you will need’. This should appear before any forms fields. For a multi-page form, this should appear on a ’Getting started’ page.\n\nPresent requirements as a scannable list of specific items. Use plain language to ensure a good understanding of what they will need.\n\n## Hint text\n\nUse hit text for the smallest piece of information that will help users to understand each form input or control and complete forms. This could be the mark a field as optional or to let them know the required format for a field.\n\nThe hint prop provides help that’s relevant to the majority of users, like how their information will be used, or where to find it.\n\nDon’t use long paragraphs or lists in hint text. Screen readers announce the entire text when users interact with the form element. This could frustrate users if the text is long.\n\nDon’t include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\n\n```jsx live\n<TextInput\n    label=\"Phone number\"\n    hint=\"Any Australian mobile or landline. For example, 0444 111 222 or 02 9988 7766\"\n/>\n```\n\n## Details\n\nThe Details component reveals more information when opened. Use the Details component for information that is useful for some users, but not needed by everyone to complete a form. Do not use the Details component if all users need the information to complete a form.\n\nDetails should only be used for one piece of content. We recommended keeping this to a paragraph or short list. If more than one piece of content is required, use a [Drawer](#drawer).\n\nIf the guidance pertains to a list, provide the list, then link to more detailed information on all items.\n\nWe recommend the use of one link to give a clear path to the right information for the user’s context. Links to content pages should be opened in the same tab. If a user is in the middle of a process, such as filling in a form, opening lists into the same tab can cause a user to lose their place. In this case it’s preferable to open a link into a drawer or new tab. Clearly indicated this with an icon: `ExternalLinkIcon` for new tabs and `MoveLeftIcon` for drawers. Provide appropriate announcements for screen readers.\n\n```jsx live\n<Details label=\"Why should I invite a new staff member?\" iconBefore>\n\t<Text as=\"p\">\n\t\tInviting individuals to the service can help you streamline your operations. You can then assign them a role, so they can access necessary information and tasks.\n\t</Text>\n    <TextLinkExternal href=\"#\">\n\t\tLearn more about inviting a staff member\n\t</TextLinkExternal>\n</Details>\n```\n\n## Drawer\n\nA Drawer is a panel that slides in from the right side of the screen. The Drawer is overlayed on top of the main area of the page to capture the user’s attention while keeping the context of the current task.\n\nDrawers can be used to filter data, for small subtask forms and to provide supporting information to users when completing a task.\n\nAvoid lengthy context that would result in scrolling.\n\nExplore the [Drawer](/components/drawer) options to see if they might be suitable.\n\n```jsx live\n() => {\n\tconst [isDrawerOpen, openDrawer, closeDrawer] = useTernaryState(false);\n\treturn (\n\t\t<>\n\t\t\t<Button onClick={openDrawer}>Open Drawer</Button>\n\t\t\t<Drawer\n\t\t\t\tisOpen={isDrawerOpen}\n\t\t\t\tonClose={closeDrawer}\n\t\t\t\ttitle=\"Drawer title\"\n\t\t\t\tactions={\n\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t<Button onClick={closeDrawer}>Primary</Button>\n\t\t\t\t\t\t<Button variant=\"secondary\" onClick={closeDrawer}>\n\t\t\t\t\t\t\tSecondary\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button variant=\"tertiary\" onClick={closeDrawer}>\n\t\t\t\t\t\t\tTertiary\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<Text as=\"p\">Drawer body area.</Text>\n\t\t\t</Drawer>\n\t\t</>\n\t);\n};\n```\n\n## Open in new tab\n\nOpening information in a new tab allows users to read related help content, without concern that they may lose their form data.\n\nOutside of forms, avoid opening links in new tabs. This can be confusing and disorienting for users. This is especially true for those who have trouble perceiving visual content. The exception would be if they are logged into a secure area and navigating away would require them to log in again.\n\nIf the supporting information won’t fit into a drawer without scrolling, then open this form help content into a new tab.\n","data":{"title":"Helpful form content","description":"Providing the right content in forms can help users understand and complete forms quickly and efficiently. The location, amount and type of content provided is important.","relatedComponents":["details","drawer","field"],"relatedContent":["content-styles"]},"title":"Helpful form content","description":"Providing the right content in forms can help users understand and complete forms quickly and efficiently. The location, amount and type of content provided is important.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["details","drawer","field"],"relatedPatterns":null},"toc":[{"id":"headings","title":"Headings","level":2,"slug":"headings","items":[]},{"id":"introductory-paragraphs","title":"Introductory paragraphs","level":2,"slug":"introductory-paragraphs","items":[]},{"id":"requirements-list","title":"Requirements list","level":2,"slug":"requirements-list","items":[]},{"id":"hint-text","title":"Hint text","level":2,"slug":"hint-text","items":[]},{"id":"details","title":"Details","level":2,"slug":"details","items":[]},{"id":"drawer","title":"Drawer","level":2,"slug":"drawer","items":[]},{"id":"open-in-new-tab","title":"Open in new tab","level":2,"slug":"open-in-new-tab","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"relatedComponents":[{"slug":"details","name":"details","title":"Details","description":"The Details component hides non-essential content unless a user explicitly chooses to view it.","storybookPath":"/story/content-details--basic","figmaGalleryNodeId":"14934%3A110986","subNavItems":[{"label":"Overview","href":"/components/details","path":"/home/runner/work/agds-next/agds-next/packages/react/src/details/docs/overview.mdx"},{"label":"Content","href":"/components/details/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/details/docs/content.mdx"},{"label":"Code","href":"/components/details/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/details/docs/code.mdx"},{"label":"Accessibility","href":"/components/details/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/details/docs/accessibility.mdx"}],"relatedComponents":["accordion","tabs"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"drawer","name":"drawer","title":"Drawer","description":"A drawer is a panel that slides in from the right side of the screen. The Drawer is overlayed on top of the main area of the page to capture the user’s attention while keeping the context of the current task.","storybookPath":"/story/layout-drawer--basic","figmaGalleryNodeId":"18684%3A85147","subNavItems":[{"label":"Overview","href":"/components/drawer","path":"/home/runner/work/agds-next/agds-next/packages/react/src/drawer/docs/overview.mdx"},{"label":"Code","href":"/components/drawer/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/drawer/docs/code.mdx"}],"relatedComponents":["modal"],"relatedPatterns":["search-filters"],"deprecated":false,"unreleased":false},{"slug":"field","name":"field","title":"Field","description":"The field package exposes the elements around form inputs, and an API to compose them.","storybookPath":"/story/forms-field--basic","figmaGalleryNodeId":null,"subNavItems":[{"label":"Overview","href":"/components/field","path":"/home/runner/work/agds-next/agds-next/packages/react/src/field/docs/overview.mdx"},{"label":"Code","href":"/components/field/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/field/docs/code.mdx"}],"relatedComponents":["fieldset"],"relatedPatterns":["messaging"],"deprecated":false,"unreleased":false}],"relatedPatterns":null},"__N_SSG":true}