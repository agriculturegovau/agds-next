{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Loading, empty and error states"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed questions"},{"href":"/patterns/filtering-a-dataset","label":"Filtering a dataset"},{"href":"/patterns/loading-data","label":"Loading, empty and error states"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"loading-data","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Loading state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The loading state provides feedback to users that data is being loaded.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Loading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.a, {\n        href: \"/components/skeleton\",\n        children: \"Skeleton components\"\n      }), \" as visual placeholders for information while data is still loading.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Table loading state example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Below is an example of a \", _jsx(_components.a, {\n        href: \"/components/table\",\n        children: \"Table\"\n      }), \" in a loading state.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TableWrapper>\\n\\t<Table tableLayout=\\\"fixed\\\">\\n\\t\\t<TableHead>\\n\\t\\t\\t<tr>\\n\\t\\t\\t\\t<TableHeader width=\\\"6rem\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t\\tID\\n\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Name</TableHeader>\\n\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Email</TableHeader>\\n\\t\\t\\t</tr>\\n\\t\\t</TableHead>\\n\\t\\t<TableBody>\\n\\t\\t\\t{Array.from(Array(5)).map((_, idx) => (\\n\\t\\t\\t\\t<tr key={idx}>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t</tr>\\n\\t\\t\\t))}\\n\\t\\t</TableBody>\\n\\t</Table>\\n</TableWrapper>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Cards loading state example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Below is an example of a list of \", _jsx(_components.a, {\n        href: \"/components/card\",\n        children: \"Cards\"\n      }), \" in a loading state.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Columns as=\\\"ul\\\" cols={{ xs: 2 }}>\\n\\t{Array.from(Array(2).keys()).map((i) => (\\n\\t\\t<Card key={i} as=\\\"li\\\" shadow>\\n\\t\\t\\t<CardInner>\\n\\t\\t\\t\\t<Stack gap={1}>\\n\\t\\t\\t\\t\\t<SkeletonHeading type=\\\"h3\\\" width=\\\"50%\\\" />\\n\\t\\t\\t\\t\\t<SkeletonText fontSize=\\\"sm\\\" width=\\\"25%\\\" />\\n\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t</Stack>\\n\\t\\t\\t</CardInner>\\n\\t\\t</Card>\\n\\t))}\\n</Columns>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The error state provides feedback to users that an error has occurred while loading the data.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \\\"Retry\\\" \", _jsx(_components.a, {\n        href: \"/components-button\",\n        children: \"Button\"\n      }), \" is used to give the user a way to refetch the request.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This should not be confused with the \", _jsx(_components.a, {\n        href: \"#empty-state\",\n        children: \"Empty state\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Page level error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an error that occured at the page level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2}>\\n\\t<Stack gap={1}>\\n\\t\\t<AlertFilledIcon color=\\\"error\\\" size=\\\"lg\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tFailed to load\\n\\t\\t</Heading>\\n\\t\\t<Text>There was an error loading the data. Click retry to try again.</Text>\\n\\t</Stack>\\n\\t<div>\\n\\t\\t<Button>Retry</Button>\\n\\t</div>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Component level error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an error that occured at the component level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Flex gap={0.75}>\\n\\t<AlertFilledIcon color=\\\"error\\\" />\\n\\t<Stack gap={1} alignItems=\\\"flex-start\\\">\\n\\t\\t<Text>\\n\\t\\t\\t<Text fontWeight=\\\"bold\\\">Failed to load</Text>\\n\\t\\t\\t<br />\\n\\t\\t\\tThere was an error loading the data. Click retry to try again.\\n\\t\\t</Text>\\n\\t\\t<Button variant=\\\"text\\\">Retry</Button>\\n\\t</Stack>\\n</Flex>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The empty state is displayed when data has loaded succesfully, but there is nothing available to show to the user.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This should not be confused with the \", _jsx(_components.a, {\n        href: \"#error-state\",\n        children: \"Error state\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Page level empty state examples\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an empty state at the page level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={2}>\\n\\t<Stack gap={1}>\\n\\t\\t<HelpIcon size=\\\"lg\\\" color=\\\"muted\\\" />\\n\\t\\t<Heading type=\\\"h2\\\" fontSize=\\\"lg\\\">\\n\\t\\t\\tNo results found\\n\\t\\t</Heading>\\n\\t\\t<Text>Try adjusting your filter options.</Text>\\n\\t</Stack>\\n\\t<div>\\n\\t\\t<Button>Clear filters</Button>\\n\\t</div>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Component level empty state example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is an example of an empty state at the component level.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Flex gap={0.75}>\\n\\t<HelpIcon color=\\\"muted\\\" />\\n\\t<Stack gap={1} alignItems=\\\"flex-start\\\">\\n\\t\\t<Text>\\n\\t\\t\\t<Text fontWeight=\\\"bold\\\">No results found</Text>\\n\\t\\t\\t<br />\\n\\t\\t\\tTry adjusting your filter options.\\n\\t\\t</Text>\\n\\t\\t<Button variant=\\\"text\\\">Clear filters</Button>\\n\\t</Stack>\\n</Flex>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Loading, empty and error states","group":"Patterns","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","version":"1.0.0"}},"content":"\n## Loading state\n\nThe loading state provides feedback to users that data is being loaded.\n\nLoading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\n\nUse [Skeleton components](/components/skeleton) as visual placeholders for information while data is still loading.\n\n### Table loading state example\n\nBelow is an example of a [Table](/components/table) in a loading state.\n\n```jsx live\n<TableWrapper>\n\t<Table tableLayout=\"fixed\">\n\t\t<TableHead>\n\t\t\t<tr>\n\t\t\t\t<TableHeader width=\"6rem\" scope=\"col\">\n\t\t\t\t\tID\n\t\t\t\t</TableHeader>\n\t\t\t\t<TableHeader scope=\"col\">Name</TableHeader>\n\t\t\t\t<TableHeader scope=\"col\">Email</TableHeader>\n\t\t\t</tr>\n\t\t</TableHead>\n\t\t<TableBody>\n\t\t\t{Array.from(Array(5)).map((_, idx) => (\n\t\t\t\t<tr key={idx}>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t</TableCell>\n\t\t\t\t</tr>\n\t\t\t))}\n\t\t</TableBody>\n\t</Table>\n</TableWrapper>\n```\n\n### Cards loading state example\n\nBelow is an example of a list of [Cards](/components/card) in a loading state.\n\n```jsx live\n<Columns as=\"ul\" cols={{ xs: 2 }}>\n\t{Array.from(Array(2).keys()).map((i) => (\n\t\t<Card key={i} as=\"li\" shadow>\n\t\t\t<CardInner>\n\t\t\t\t<Stack gap={1}>\n\t\t\t\t\t<SkeletonHeading type=\"h3\" width=\"50%\" />\n\t\t\t\t\t<SkeletonText fontSize=\"sm\" width=\"25%\" />\n\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t</Stack>\n\t\t\t</CardInner>\n\t\t</Card>\n\t))}\n</Columns>\n```\n\n## Error state\n\nThe error state provides feedback to users that an error has occurred while loading the data.\n\nA \"Retry\" [Button](/components-button) is used to give the user a way to refetch the request.\n\nThis should not be confused with the [Empty state](#empty-state).\n\n### Page level error state\n\nBelow is an example of an error that occured at the page level.\n\n```jsx live\n<Stack gap={2}>\n\t<Stack gap={1}>\n\t\t<AlertFilledIcon color=\"error\" size=\"lg\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tFailed to load\n\t\t</Heading>\n\t\t<Text>There was an error loading the data. Click retry to try again.</Text>\n\t</Stack>\n\t<div>\n\t\t<Button>Retry</Button>\n\t</div>\n</Stack>\n```\n\n### Component level error state\n\nBelow is an example of an error that occured at the component level.\n\n```jsx live\n<Flex gap={0.75}>\n\t<AlertFilledIcon color=\"error\" />\n\t<Stack gap={1} alignItems=\"flex-start\">\n\t\t<Text>\n\t\t\t<Text fontWeight=\"bold\">Failed to load</Text>\n\t\t\t<br />\n\t\t\tThere was an error loading the data. Click retry to try again.\n\t\t</Text>\n\t\t<Button variant=\"text\">Retry</Button>\n\t</Stack>\n</Flex>\n```\n\n## Empty state\n\nThe empty state is displayed when data has loaded succesfully, but there is nothing available to show to the user.\n\nThis should not be confused with the [Error state](#error-state).\n\n### Page level empty state examples\n\nBelow is an example of an empty state at the page level.\n\n```jsx live\n<Stack gap={2}>\n\t<Stack gap={1}>\n\t\t<HelpIcon size=\"lg\" color=\"muted\" />\n\t\t<Heading type=\"h2\" fontSize=\"lg\">\n\t\t\tNo results found\n\t\t</Heading>\n\t\t<Text>Try adjusting your filter options.</Text>\n\t</Stack>\n\t<div>\n\t\t<Button>Clear filters</Button>\n\t</div>\n</Stack>\n```\n\n### Component level empty state example\n\nBelow is an example of an empty state at the component level.\n\n```jsx live\n<Flex gap={0.75}>\n\t<HelpIcon color=\"muted\" />\n\t<Stack gap={1} alignItems=\"flex-start\">\n\t\t<Text>\n\t\t\t<Text fontWeight=\"bold\">No results found</Text>\n\t\t\t<br />\n\t\t\tTry adjusting your filter options.\n\t\t</Text>\n\t\t<Button variant=\"text\">Clear filters</Button>\n\t</Stack>\n</Flex>\n```\n","data":{"title":"Loading, empty and error states","group":"Patterns","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","version":"1.0.0"},"title":"Loading, empty and error states","description":"When loading data in an application, it is important to consider and design for loading, empty, and error states. These states will help set user expectations and prevent them from assuming that the interface is unresponsive.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null},"toc":[{"id":"loading-state","title":"Loading state","level":2,"slug":"loading-state","items":[{"id":"table-loading-state-example","title":"Table loading state example","level":3,"slug":"table-loading-state-example","items":[]},{"id":"cards-loading-state-example","title":"Cards loading state example","level":3,"slug":"cards-loading-state-example","items":[]}]},{"id":"error-state","title":"Error state","level":2,"slug":"error-state","items":[{"id":"page-level-error-state","title":"Page level error state","level":3,"slug":"page-level-error-state","items":[]},{"id":"component-level-error-state","title":"Component level error state","level":3,"slug":"component-level-error-state","items":[]}]},{"id":"empty-state","title":"Empty state","level":2,"slug":"empty-state","items":[{"id":"page-level-empty-state-examples","title":"Page level empty state examples","level":3,"slug":"page-level-empty-state-examples","items":[]},{"id":"component-level-empty-state-example","title":"Component level empty state example","level":3,"slug":"component-level-empty-state-example","items":[]}]}]},"__N_SSG":true}