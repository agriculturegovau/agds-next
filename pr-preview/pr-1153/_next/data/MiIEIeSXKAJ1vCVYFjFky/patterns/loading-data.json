{"pageProps":{"pattern":{"slug":"loading-data","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"When loading data, it is important to consider the following states:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#loading-state\",\n          children: \"Loading State\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#error-state\",\n          children: \"Error State\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#empty-state\",\n          children: \"Empty State\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#ideal-state\",\n          children: \"Ideal State\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Loading state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The loading state provides feedback to users that data is being loaded. Loading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the following example, \", _jsx(_components.a, {\n        href: \"/components/skeleton\",\n        children: \"Skeleton components\"\n      }), \" are used as placeholders while the actual user registration data is being fetched.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<H2>User registrations</H2>\\n\\t<TableWrapper>\\n\\t\\t<Table tableLayout=\\\"fixed\\\">\\n\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t<TableHeader width=\\\"6rem\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t\\t\\tID\\n\\t\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Name</TableHeader>\\n\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Email</TableHeader>\\n\\t\\t\\t\\t</tr>\\n\\t\\t\\t</TableHead>\\n\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t{Array.from(Array(10)).map((_, idx) => (\\n\\t\\t\\t\\t\\t<tr key={idx}>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t))}\\n\\t\\t\\t</TableBody>\\n\\t\\t</Table>\\n\\t</TableWrapper>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In case of an error while loading the data, an error state can be displayed to inform users about the issue.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the following example, a simple error message is shown.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<H2>User registrations</H2>\\n\\t<Text>An error occurred</Text>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The empty state is displayed when no data is available to show to the user. The empty state helps manage user expectations and provides a visually unambiguous representation when there is a lack of data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the following example, a simple message is shown.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<H2>User registrations</H2>\\n\\t<Text>No data found</Text>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Ideal state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The ideal state represents the fully loaded and rendered data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the following example, the actual user registration data is available and displayed in the table.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<H2>User registrations</H2>\\n\\t<TableWrapper>\\n\\t\\t<Table tableLayout=\\\"fixed\\\">\\n\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t<TableHeader width=\\\"6rem\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t\\t\\tID\\n\\t\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Name</TableHeader>\\n\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Email</TableHeader>\\n\\t\\t\\t\\t</tr>\\n\\t\\t\\t</TableHead>\\n\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t{[\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 1,\\n\\t\\t\\t\\t\\t\\tname: 'Rhys Conichie',\\n\\t\\t\\t\\t\\t\\temail: 'rconichie0@smh.com.au',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 2,\\n\\t\\t\\t\\t\\t\\tname: 'Meryl Tremblot',\\n\\t\\t\\t\\t\\t\\temail: 'mtremblot1@google.co.uk',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 3,\\n\\t\\t\\t\\t\\t\\tname: 'Adorne Fusedale',\\n\\t\\t\\t\\t\\t\\temail: 'afusedale2@people.com.cn',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 4,\\n\\t\\t\\t\\t\\t\\tname: 'Chrissie Coning',\\n\\t\\t\\t\\t\\t\\temail: 'cconing3@123-reg.co.uk',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 5,\\n\\t\\t\\t\\t\\t\\tname: 'Worth Keegan',\\n\\t\\t\\t\\t\\t\\temail: 'wkeegan4@surveymonkey.com',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 6,\\n\\t\\t\\t\\t\\t\\tname: 'Kendra Baelde',\\n\\t\\t\\t\\t\\t\\temail: 'kbaelde5@usda.gov',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 7,\\n\\t\\t\\t\\t\\t\\tname: 'Emeline Guidoni',\\n\\t\\t\\t\\t\\t\\temail: 'eguidoni6@youtube.com',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 8,\\n\\t\\t\\t\\t\\t\\tname: 'Alden Di Biasi',\\n\\t\\t\\t\\t\\t\\temail: 'adibiasi7@1und1.de',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 9,\\n\\t\\t\\t\\t\\t\\tname: 'Thacher Coxhead',\\n\\t\\t\\t\\t\\t\\temail: 'tcoxhead8@altervista.org',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 10,\\n\\t\\t\\t\\t\\t\\tname: 'Nicholle Batte',\\n\\t\\t\\t\\t\\t\\temail: 'nbatte9@theatlantic.com',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t].map(({ id, name, email }) => (\\n\\t\\t\\t\\t\\t<tr key={id}>\\n\\t\\t\\t\\t\\t\\t<TableCell>{id}</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>{name}</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>{email}</TableCell>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t))}\\n\\t\\t\\t</TableBody>\\n\\t\\t</Table>\\n\\t</TableWrapper>\\n</Stack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Providing feedback when loading","group":"Patterns","description":"Thoughtful loading states help set user expectations and prevents them from assuming that the interface is unresponsive.","version":"1.0.0"}},"content":"\nWhen loading data, it is important to consider the following states:\n\n- [Loading State](#loading-state)\n- [Error State](#error-state)\n- [Empty State](#empty-state)\n- [Ideal State](#ideal-state)\n\n## Loading state\n\nThe loading state provides feedback to users that data is being loaded. Loading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\n\nIn the following example, [Skeleton components](/components/skeleton) are used as placeholders while the actual user registration data is being fetched.\n\n```jsx live\n<Stack gap={1.5}>\n\t<H2>User registrations</H2>\n\t<TableWrapper>\n\t\t<Table tableLayout=\"fixed\">\n\t\t\t<TableHead>\n\t\t\t\t<tr>\n\t\t\t\t\t<TableHeader width=\"6rem\" scope=\"col\">\n\t\t\t\t\t\tID\n\t\t\t\t\t</TableHeader>\n\t\t\t\t\t<TableHeader scope=\"col\">Name</TableHeader>\n\t\t\t\t\t<TableHeader scope=\"col\">Email</TableHeader>\n\t\t\t\t</tr>\n\t\t\t</TableHead>\n\t\t\t<TableBody>\n\t\t\t\t{Array.from(Array(10)).map((_, idx) => (\n\t\t\t\t\t<tr key={idx}>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</TableBody>\n\t\t</Table>\n\t</TableWrapper>\n</Stack>\n```\n\n## Error state\n\nIn case of an error while loading the data, an error state can be displayed to inform users about the issue.\n\nIn the following example, a simple error message is shown.\n\n```jsx live\n<Stack gap={1.5}>\n\t<H2>User registrations</H2>\n\t<Text>An error occurred</Text>\n</Stack>\n```\n\n## Empty state\n\nThe empty state is displayed when no data is available to show to the user. The empty state helps manage user expectations and provides a visually unambiguous representation when there is a lack of data.\n\nIn the following example, a simple message is shown.\n\n```jsx live\n<Stack gap={1.5}>\n\t<H2>User registrations</H2>\n\t<Text>No data found</Text>\n</Stack>\n```\n\n## Ideal state\n\nThe ideal state represents the fully loaded and rendered data.\n\nIn the following example, the actual user registration data is available and displayed in the table.\n\n```jsx live\n<Stack gap={1.5}>\n\t<H2>User registrations</H2>\n\t<TableWrapper>\n\t\t<Table tableLayout=\"fixed\">\n\t\t\t<TableHead>\n\t\t\t\t<tr>\n\t\t\t\t\t<TableHeader width=\"6rem\" scope=\"col\">\n\t\t\t\t\t\tID\n\t\t\t\t\t</TableHeader>\n\t\t\t\t\t<TableHeader scope=\"col\">Name</TableHeader>\n\t\t\t\t\t<TableHeader scope=\"col\">Email</TableHeader>\n\t\t\t\t</tr>\n\t\t\t</TableHead>\n\t\t\t<TableBody>\n\t\t\t\t{[\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tname: 'Rhys Conichie',\n\t\t\t\t\t\temail: 'rconichie0@smh.com.au',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\tname: 'Meryl Tremblot',\n\t\t\t\t\t\temail: 'mtremblot1@google.co.uk',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 3,\n\t\t\t\t\t\tname: 'Adorne Fusedale',\n\t\t\t\t\t\temail: 'afusedale2@people.com.cn',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 4,\n\t\t\t\t\t\tname: 'Chrissie Coning',\n\t\t\t\t\t\temail: 'cconing3@123-reg.co.uk',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 5,\n\t\t\t\t\t\tname: 'Worth Keegan',\n\t\t\t\t\t\temail: 'wkeegan4@surveymonkey.com',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 6,\n\t\t\t\t\t\tname: 'Kendra Baelde',\n\t\t\t\t\t\temail: 'kbaelde5@usda.gov',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 7,\n\t\t\t\t\t\tname: 'Emeline Guidoni',\n\t\t\t\t\t\temail: 'eguidoni6@youtube.com',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 8,\n\t\t\t\t\t\tname: 'Alden Di Biasi',\n\t\t\t\t\t\temail: 'adibiasi7@1und1.de',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 9,\n\t\t\t\t\t\tname: 'Thacher Coxhead',\n\t\t\t\t\t\temail: 'tcoxhead8@altervista.org',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 10,\n\t\t\t\t\t\tname: 'Nicholle Batte',\n\t\t\t\t\t\temail: 'nbatte9@theatlantic.com',\n\t\t\t\t\t},\n\t\t\t\t].map(({ id, name, email }) => (\n\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t<TableCell>{id}</TableCell>\n\t\t\t\t\t\t<TableCell>{name}</TableCell>\n\t\t\t\t\t\t<TableCell>{email}</TableCell>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</TableBody>\n\t\t</Table>\n\t</TableWrapper>\n</Stack>\n```\n","data":{"title":"Providing feedback when loading","group":"Patterns","description":"Thoughtful loading states help set user expectations and prevents them from assuming that the interface is unresponsive.","version":"1.0.0"},"title":"Providing feedback when loading","group":"patterns","groupName":"Patterns","version":"1.0.0","description":"Thoughtful loading states help set user expectations and prevents them from assuming that the interface is unresponsive.","previewPath":null,"figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null},"navLinks":[{"href":"/patterns/home","label":"Home page"},{"href":"/patterns/category","label":"Category page"},{"href":"/patterns/subcategory","label":"Subcategory page"},{"href":"/patterns/content","label":"Content page"},{"href":"/patterns/single-page-form","label":"Single-page form"},{"href":"/patterns/multi-page-form","label":"Multi-page form"},{"href":"/patterns/sign-in","label":"Sign-in form page"},{"href":"/patterns/not-found","label":"Not found page"},{"href":"/patterns/filtering-a-dataset","label":"Filtering a dataset"},{"href":"/patterns/loading-data","label":"Providing feedback when loading"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Providing feedback when loading"}],"slug":"loading-data"},"__N_SSG":true}