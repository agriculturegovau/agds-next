{"pageProps":{"pattern":{"slug":"loading-data","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"When loading data, it is important to consider and design for the following states:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#loading-state\",\n          children: \"Loading state\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#error-state\",\n          children: \"Error state\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#empty-state\",\n          children: \"Empty state\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#finished-state\",\n          children: \"Finished state\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"use \", _jsx(_components.a, {\n          href: \"/components/skeleton\",\n          children: \"Skeleton components\"\n        }), \" as placeholders while the actual data is being loaded\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"use the \", _jsx(_components.a, {\n          href: \"/components/loading\",\n          children: \"Loading dots component\"\n        }), \" as a replacement to Skeleton components\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"only design for the finished state.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Loading state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The loading state provides feedback to users that data is being loaded.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Loading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<H2>User registrations</H2>\\n\\t<TableWrapper>\\n\\t\\t<Table tableLayout=\\\"fixed\\\">\\n\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t<TableHeader width=\\\"6rem\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t\\t\\tID\\n\\t\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Name</TableHeader>\\n\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Email</TableHeader>\\n\\t\\t\\t\\t</tr>\\n\\t\\t\\t</TableHead>\\n\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t{Array.from(Array(10)).map((_, idx) => (\\n\\t\\t\\t\\t\\t<tr key={idx}>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<SkeletonText />\\n\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Loading</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t))}\\n\\t\\t\\t</TableBody>\\n\\t\\t</Table>\\n\\t</TableWrapper>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Error state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The error state provides feedback to users that an error has occurred while loading the data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the following example, a simple error message is shown.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<H2>User registrations</H2>\\n\\t<Text>An error occurred</Text>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Empty state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The empty state is displayed when no data is available to show to the user.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The empty state helps manage user expectations and provides feedback to users that there is no data to be displayed.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the following example, a simple message is shown.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<H2>User registrations</H2>\\n\\t<Text>No data found</Text>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Finished state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The finished state represents the fully loaded and rendered data.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1.5}>\\n\\t<H2>User registrations</H2>\\n\\t<TableWrapper>\\n\\t\\t<Table tableLayout=\\\"fixed\\\">\\n\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t<TableHeader width=\\\"6rem\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t\\t\\tID\\n\\t\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Name</TableHeader>\\n\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Email</TableHeader>\\n\\t\\t\\t\\t</tr>\\n\\t\\t\\t</TableHead>\\n\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t{[\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 1,\\n\\t\\t\\t\\t\\t\\tname: 'Rhys Conichie',\\n\\t\\t\\t\\t\\t\\temail: 'rconichie0@smh.com.au',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 2,\\n\\t\\t\\t\\t\\t\\tname: 'Meryl Tremblot',\\n\\t\\t\\t\\t\\t\\temail: 'mtremblot1@google.co.uk',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 3,\\n\\t\\t\\t\\t\\t\\tname: 'Adorne Fusedale',\\n\\t\\t\\t\\t\\t\\temail: 'afusedale2@people.com.cn',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 4,\\n\\t\\t\\t\\t\\t\\tname: 'Chrissie Coning',\\n\\t\\t\\t\\t\\t\\temail: 'cconing3@123-reg.co.uk',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 5,\\n\\t\\t\\t\\t\\t\\tname: 'Worth Keegan',\\n\\t\\t\\t\\t\\t\\temail: 'wkeegan4@surveymonkey.com',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 6,\\n\\t\\t\\t\\t\\t\\tname: 'Kendra Baelde',\\n\\t\\t\\t\\t\\t\\temail: 'kbaelde5@usda.gov',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 7,\\n\\t\\t\\t\\t\\t\\tname: 'Emeline Guidoni',\\n\\t\\t\\t\\t\\t\\temail: 'eguidoni6@youtube.com',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 8,\\n\\t\\t\\t\\t\\t\\tname: 'Alden Di Biasi',\\n\\t\\t\\t\\t\\t\\temail: 'adibiasi7@1und1.de',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 9,\\n\\t\\t\\t\\t\\t\\tname: 'Thacher Coxhead',\\n\\t\\t\\t\\t\\t\\temail: 'tcoxhead8@altervista.org',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tid: 10,\\n\\t\\t\\t\\t\\t\\tname: 'Nicholle Batte',\\n\\t\\t\\t\\t\\t\\temail: 'nbatte9@theatlantic.com',\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t].map(({ id, name, email }) => (\\n\\t\\t\\t\\t\\t<tr key={id}>\\n\\t\\t\\t\\t\\t\\t<TableCell>{id}</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>{name}</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>{email}</TableCell>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t))}\\n\\t\\t\\t</TableBody>\\n\\t\\t</Table>\\n\\t</TableWrapper>\\n</Stack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Providing feedback when loading data","group":"Patterns","description":"Meaningful loading states help set user expectations and prevents them from assuming that the interface is unresponsive.","version":"1.0.0"}},"content":"\nWhen loading data, it is important to consider and design for the following states:\n\n- [Loading state](#loading-state)\n- [Error state](#error-state)\n- [Empty state](#empty-state)\n- [Finished state](#finished-state)\n\n<DoHeading />\n\n- use [Skeleton components](/components/skeleton) as placeholders while the actual data is being loaded\n\n<DontHeading />\n\n- use the [Loading dots component](/components/loading) as a replacement to Skeleton components\n- only design for the finished state.\n\n## Loading state\n\nThe loading state provides feedback to users that data is being loaded.\n\nLoading states can reduce uncertainty for the user by explaining what is happening and preparing them for what is coming up next.\n\n```jsx live\n<Stack gap={1.5}>\n\t<H2>User registrations</H2>\n\t<TableWrapper>\n\t\t<Table tableLayout=\"fixed\">\n\t\t\t<TableHead>\n\t\t\t\t<tr>\n\t\t\t\t\t<TableHeader width=\"6rem\" scope=\"col\">\n\t\t\t\t\t\tID\n\t\t\t\t\t</TableHeader>\n\t\t\t\t\t<TableHeader scope=\"col\">Name</TableHeader>\n\t\t\t\t\t<TableHeader scope=\"col\">Email</TableHeader>\n\t\t\t\t</tr>\n\t\t\t</TableHead>\n\t\t\t<TableBody>\n\t\t\t\t{Array.from(Array(10)).map((_, idx) => (\n\t\t\t\t\t<tr key={idx}>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<SkeletonText />\n\t\t\t\t\t\t\t<VisuallyHidden>Loading</VisuallyHidden>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</TableBody>\n\t\t</Table>\n\t</TableWrapper>\n</Stack>\n```\n\n## Error state\n\nThe error state provides feedback to users that an error has occurred while loading the data.\n\nIn the following example, a simple error message is shown.\n\n```jsx live\n<Stack gap={1.5}>\n\t<H2>User registrations</H2>\n\t<Text>An error occurred</Text>\n</Stack>\n```\n\n## Empty state\n\nThe empty state is displayed when no data is available to show to the user.\n\nThe empty state helps manage user expectations and provides feedback to users that there is no data to be displayed.\n\nIn the following example, a simple message is shown.\n\n```jsx live\n<Stack gap={1.5}>\n\t<H2>User registrations</H2>\n\t<Text>No data found</Text>\n</Stack>\n```\n\n## Finished state\n\nThe finished state represents the fully loaded and rendered data.\n\n```jsx live\n<Stack gap={1.5}>\n\t<H2>User registrations</H2>\n\t<TableWrapper>\n\t\t<Table tableLayout=\"fixed\">\n\t\t\t<TableHead>\n\t\t\t\t<tr>\n\t\t\t\t\t<TableHeader width=\"6rem\" scope=\"col\">\n\t\t\t\t\t\tID\n\t\t\t\t\t</TableHeader>\n\t\t\t\t\t<TableHeader scope=\"col\">Name</TableHeader>\n\t\t\t\t\t<TableHeader scope=\"col\">Email</TableHeader>\n\t\t\t\t</tr>\n\t\t\t</TableHead>\n\t\t\t<TableBody>\n\t\t\t\t{[\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tname: 'Rhys Conichie',\n\t\t\t\t\t\temail: 'rconichie0@smh.com.au',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\tname: 'Meryl Tremblot',\n\t\t\t\t\t\temail: 'mtremblot1@google.co.uk',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 3,\n\t\t\t\t\t\tname: 'Adorne Fusedale',\n\t\t\t\t\t\temail: 'afusedale2@people.com.cn',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 4,\n\t\t\t\t\t\tname: 'Chrissie Coning',\n\t\t\t\t\t\temail: 'cconing3@123-reg.co.uk',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 5,\n\t\t\t\t\t\tname: 'Worth Keegan',\n\t\t\t\t\t\temail: 'wkeegan4@surveymonkey.com',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 6,\n\t\t\t\t\t\tname: 'Kendra Baelde',\n\t\t\t\t\t\temail: 'kbaelde5@usda.gov',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 7,\n\t\t\t\t\t\tname: 'Emeline Guidoni',\n\t\t\t\t\t\temail: 'eguidoni6@youtube.com',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 8,\n\t\t\t\t\t\tname: 'Alden Di Biasi',\n\t\t\t\t\t\temail: 'adibiasi7@1und1.de',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 9,\n\t\t\t\t\t\tname: 'Thacher Coxhead',\n\t\t\t\t\t\temail: 'tcoxhead8@altervista.org',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 10,\n\t\t\t\t\t\tname: 'Nicholle Batte',\n\t\t\t\t\t\temail: 'nbatte9@theatlantic.com',\n\t\t\t\t\t},\n\t\t\t\t].map(({ id, name, email }) => (\n\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t<TableCell>{id}</TableCell>\n\t\t\t\t\t\t<TableCell>{name}</TableCell>\n\t\t\t\t\t\t<TableCell>{email}</TableCell>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</TableBody>\n\t\t</Table>\n\t</TableWrapper>\n</Stack>\n```\n","data":{"title":"Providing feedback when loading data","group":"Patterns","description":"Meaningful loading states help set user expectations and prevents them from assuming that the interface is unresponsive.","version":"1.0.0"},"title":"Providing feedback when loading data","group":"patterns","groupName":"Patterns","version":"1.0.0","description":"Meaningful loading states help set user expectations and prevents them from assuming that the interface is unresponsive.","previewPath":null,"figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null},"navLinks":[{"href":"/patterns/home","label":"Home page"},{"href":"/patterns/category","label":"Category page"},{"href":"/patterns/subcategory","label":"Subcategory page"},{"href":"/patterns/content","label":"Content page"},{"href":"/patterns/single-page-form","label":"Single-page form"},{"href":"/patterns/multi-page-form","label":"Multi-page form"},{"href":"/patterns/sign-in","label":"Sign-in form page"},{"href":"/patterns/not-found","label":"Not found page"},{"href":"/patterns/filtering-a-dataset","label":"Filtering a dataset"},{"href":"/patterns/loading-data","label":"Providing feedback when loading data"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Providing feedback when loading data"}],"slug":"loading-data"},"__N_SSG":true}