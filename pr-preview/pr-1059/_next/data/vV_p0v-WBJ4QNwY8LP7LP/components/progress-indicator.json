{"pageProps":{"pkg":{"slug":"progress-indicator","name":"progress-indicator","version":"1.3.1","title":"Progress indicator","description":"Progress indicators show users the number of steps in a task, where they are up to in the process and how much is left to do.","storybookPath":"/story/forms-progressindicator--basic","figmaGalleryNodeId":"12444%3A100448","subNavItems":[{"label":"Overview","href":"/components/progress-indicator","path":"/home/runner/work/agds-next/agds-next/packages/react/src/progress-indicator/docs/overview.mdx"},{"label":"Code","href":"/components/progress-indicator/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/progress-indicator/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"AppLayout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Progress indicator"}],"toc":[{"id":"status","title":"Status","level":2,"slug":"status","items":[]},{"id":"buttons","title":"Buttons","level":2,"slug":"buttons","items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading, Table, TableCaption, TableHead, TableHeader, TableBody, TableCell} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  if (!Table) _missingMdxReference(\"Table\", true);\n  if (!TableBody) _missingMdxReference(\"TableBody\", true);\n  if (!TableCaption) _missingMdxReference(\"TableCaption\", true);\n  if (!TableCell) _missingMdxReference(\"TableCell\", true);\n  if (!TableHead) _missingMdxReference(\"TableHead\", true);\n  if (!TableHeader) _missingMdxReference(\"TableHeader\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ProgressIndicator\\n\\titems={[\\n\\t\\t{ href: '#', label: 'Introduction', status: 'done' },\\n\\t\\t{ href: '#', label: 'Business Contacts', status: 'doing' },\\n\\t\\t{ href: '#', label: 'Case Studies', status: 'todo' },\\n\\t\\t{ href: '#', label: 'Attachments', status: 'blocked' },\\n\\t]}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Our design system provides a progress indicator for larger tasks that can be completed out of order and returned to at a later date, like doing a tax return or applying for a driver’s licence.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The background of the \", _jsx(_components.code, {\n        children: \"ProgressIndicator\"\n      }), \" must match the background it is being placed on. For example, if \", _jsx(_components.code, {\n        children: \"ProgressIndicator\"\n      }), \" is placed on a 'bodyAlt' background, please set the \", _jsx(_components.code, {\n        children: \"background\"\n      }), \" prop to \", _jsx(_components.code, {\n        children: \"bodyAlt\"\n      }), \".\"]\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"display steps in order from top to bottom\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use in forms and multi-page processes\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for processes of 2 – 10 steps\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"always present mobile menu Closed by default\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"pair with Task list if nesting is required\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ensure step names match H1s and truncate if long\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"keyword frontload\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"group related form fields.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use for fewer than 2 steps\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"have any other components in the left-hand column\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"add the step number to the text - list only the action the user needs to take\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"mix with other navigation patterns – for example, Side-nav\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"change labels or icons\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"make progress indicators a sticky nav item as this may cause reading order issues.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Status\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"status\"\n      }), \" prop can be used to indicate the status of each item. The following values are available:\"]\n    }), \"\\n\", _jsxs(Table, {\n      children: [_jsx(TableCaption, {\n        children: \"Available statuses for a Progress Indicator\"\n      }), _jsx(TableHead, {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(TableHeader, {\n            scope: \"col\",\n            children: \"Status\"\n          }), \"\\n\", _jsx(TableHeader, {\n            scope: \"col\",\n            children: \"Label\"\n          }), \"\\n\", _jsx(TableHeader, {\n            scope: \"col\",\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(TableBody, {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(TableCell, {\n            children: _jsx(\"code\", {\n              children: \"todo\"\n            })\n          }), _jsx(TableCell, {\n            children: \"Not started\"\n          }), \"\\n\", _jsx(TableCell, {\n            children: \"The task is available for the user to do\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(TableCell, {\n            children: _jsx(\"code\", {\n              children: \"doing\"\n            })\n          }), _jsx(TableCell, {\n            children: \"In progress\"\n          }), \"\\n\", _jsx(TableCell, {\n            children: \"The task is currently active or selected\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(TableCell, {\n            children: _jsx(\"code\", {\n              children: \"done\"\n            })\n          }), _jsx(TableCell, {\n            children: \"Completed\"\n          }), \"\\n\", _jsx(TableCell, {\n            children: \"The task has been completed\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(TableCell, {\n            children: _jsx(\"code\", {\n              children: \"blocked\"\n            })\n          }), _jsx(TableCell, {\n            children: \"Cannot start yet\"\n          }), \"\\n\", _jsx(TableCell, {\n            children: \"The task is not available yet for the user to do\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Buttons\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If an item does not specify a \", _jsx(_components.code, {\n        children: \"href\"\n      }), \" attribute a \", _jsx(_components.code, {\n        children: \"button\"\n      }), \" element will be rendered. This enables you to reponds to various mouse events such as \", _jsx(_components.code, {\n        children: \"onClick\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ProgressIndicator\\n\\titems={[\\n\\t\\t{ onClick: console.log, label: 'Introduction', status: 'done' },\\n\\t\\t{ onClick: console.log, label: 'Business Contacts', status: 'doing' },\\n\\t\\t{ onClick: console.log, label: 'Case Studies', status: 'todo' },\\n\\t\\t{ onClick: console.log, label: 'Attachments', status: 'blocked' },\\n\\t]}\\n/>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Progress indicator","description":"Progress indicators show users the number of steps in a task, where they are up to in the process and how much is left to do.","group":"Forms","storybookPath":"/story/forms-progressindicator--basic","figmaGalleryNodeId":"12444%3A100448"}}},"__N_SSG":true}