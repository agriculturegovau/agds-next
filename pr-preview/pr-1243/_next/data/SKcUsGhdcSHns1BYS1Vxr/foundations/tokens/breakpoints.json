{"pageProps":{"page":{"slug":"breakpoints","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {BreakpointsTokenChart} = _components;\n  if (!BreakpointsTokenChart) _missingMdxReference(\"BreakpointsTokenChart\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Experiences built with AgDS should be responsive and accessible on any device. Breakpoints allow us to make adjustments to a composition based on the size of the device viewport.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When desigining a webpage or composition, always consider how it should look on mobile devices.\"\n    }), \"\\n\", _jsx(BreakpointsTokenChart, {}), \"\\n\", _jsx(_components.p, {\n      children: \"The breakpoints are written to be mobile-first. This means that the styles for the smallest breakpoint are applied first, and then progressively overridden as the viewport gets larger.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The best way to take advantage of breakpoints and responsive design is to use our \", _jsx(_components.a, {\n        href: \"/guides/responsive-props\",\n        children: \"responsive props\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      showCode: true,\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box background=\\\"shade\\\" padding={{ xs: 1, sm: 2, md: 3 }}>\\n\\tHello world\\n</Box>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we have created a box with padding of \", _jsx(_components.code, {\n        children: \"1em\"\n      }), \" on mobile, \", _jsx(_components.code, {\n        children: \"2em\"\n      }), \" on tablet, and \", _jsx(_components.code, {\n        children: \"4em\"\n      }), \" on desktop.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In situations where the primitive components don't support all of the props you need, you can use our breakpoints in CSS-in-JS, through the user of the \", _jsx(_components.code, {\n        children: \"mapResponsiveProp\"\n      }), \" function, or the \", _jsx(_components.code, {\n        children: \"mediaQuery\"\n      }), \" helpers. Learn more about these techniques in our \", _jsx(_components.a, {\n        href: \"/guides/responsive-props\",\n        children: \"responsive props\"\n      }), \" guide.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Breakpoints","overview":"Breakpoints are a set of predefined viewport widths that can be used to change the layout of a webpage to ensure it accommodates different devices."}},"content":"\nExperiences built with AgDS should be responsive and accessible on any device. Breakpoints allow us to make adjustments to a composition based on the size of the device viewport.\n\nWhen desigining a webpage or composition, always consider how it should look on mobile devices.\n\n<BreakpointsTokenChart />\n\nThe breakpoints are written to be mobile-first. This means that the styles for the smallest breakpoint are applied first, and then progressively overridden as the viewport gets larger.\n\nThe best way to take advantage of breakpoints and responsive design is to use our [responsive props](/guides/responsive-props).\n\n```tsx live showCode\n<Box background=\"shade\" padding={{ xs: 1, sm: 2, md: 3 }}>\n\tHello world\n</Box>\n```\n\nIn this example, we have created a box with padding of `1em` on mobile, `2em` on tablet, and `4em` on desktop.\n\nIn situations where the primitive components don't support all of the props you need, you can use our breakpoints in CSS-in-JS, through the user of the `mapResponsiveProp` function, or the `mediaQuery` helpers. Learn more about these techniques in our [responsive props](/guides/responsive-props) guide.\n","data":{"title":"Breakpoints","overview":"Breakpoints are a set of predefined viewport widths that can be used to change the layout of a webpage to ensure it accommodates different devices."},"title":"Breakpoints","description":null},"toc":[]},"__N_SSG":true}