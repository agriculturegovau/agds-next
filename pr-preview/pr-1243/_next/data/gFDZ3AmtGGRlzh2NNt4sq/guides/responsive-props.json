{"pageProps":{"guide":{"slug":"responsive-props","content":"\nOur responsive style APIs are based on our global [Breakpoint tokens](/foundations/tokens/breakpoints). We use a mobile-first approach to generate the underlying styles.\n\n## Using responsive props\n\nTo use responsive props, you can pass an object to any prop that supports responsive values.\n\nHere we've made a simple Box, and passed an object to the `padding` prop. The keys in the object refer to the breakpoint name.\n\n```tsx live showCode\n<Box background=\"shade\" padding={{ xs: 1, sm: 2, md: 4 }}>\n\tA box with responsive padding.\n</Box>\n```\n\nUnder the hood, this simple example has generated the following CSS:\n\n```css\n.css-1ped26i {\n\tpadding: 1rem;\n}\n\n@media (min-width: 576px) {\n\t.css-1ped26i {\n\t\tpadding: 2rem;\n\t}\n}\n\n@media (min-width: 768px) {\n\t.css-1ped26i {\n\t\tpadding: 4rem;\n\t}\n}\n```\n\nYou can see the mobile-first approach in action here in this CSS. The `padding` value is set to `1rem` by default - or from 0px, which is the xs breakpoint - and then we override it at each breakpoint, through a series of `min-width` media queries.\n\nYou don't need to provide a value for every breakpoint. Just provide a value for mobile (xs), and add any additional breakpoint values as needed.\n\n## The array syntax\n\nYou can also define responsive styles as an array. To interpret array responsive values, we convert the values defined in our `breakpoints` token and sort them in ascending order.\n\nTo skip certain breakpoints, you can pass `null` to any item in the array to avoid generating unnecessary CSS.\n\n```tsx live showCode\n<Box background=\"shade\" padding={[1, 2, 4]}>\n\tA box with responsive padding.\n</Box>\n```\n\n## CSS-in-JS\n\nThere can be situations where the primitive components don't support all of the props you need. In these cases, you can use our breakpoints in your CSS-in-JS styles.\n\nYou can add the `mq` and `mapResponsiveProp` functions to add styles at specific breakpoints.\n\n```tsx\nimport { tokens } from '@ag.ds-next/react/core';\n\nfunction AppLayoutGrid({ children }: { children: React.ReactNode }) {\n\treturn (\n\t\t<div\n\t\t\tcss={mq({\n\t\t\t\tdisplay: 'grid',\n\t\t\t\t// The value here changes depending on the viewport\n\t\t\t\tgridTemplateColumns: mapResponsiveProp({\n\t\t\t\t\txs: '1fr',\n\t\t\t\t\txl: '17.5rem 1fr',\n\t\t\t\t}),\n\t\t\t})}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n```\n\nOr you can use the `mediaQuery` tokens from `Core` to add styles at specific breakpoints.\n\n```tsx\nimport { tokens } from '@ag.ds-next/react/core';\n\nexport function AppLayoutHeader() {\n\treturn (\n\t\t<Flex\n\t\t\tflexDirection=\"column\"\n\t\t\tcss={{\n\t\t\t\t// use the 'minimum width' mediaQuery tokens from Core.\n\t\t\t\t// This resolves to `@media (min-width: 1200px)`\n\t\t\t\t[tokens.mediaQuery.min.xl]: {\n\t\t\t\t\tgridColumnStart: 1,\n\t\t\t\t\tgridColumnEnd: 3,\n\t\t\t\t},\n\t\t\t}}\n\t\t>\n\t\t\t...\n\t\t</Flex>\n\t);\n}\n```\n","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Our responsive style APIs are based on our global \", _jsx(_components.a, {\n        href: \"/foundations/tokens/breakpoints\",\n        children: \"Breakpoint tokens\"\n      }), \". We use a mobile-first approach to generate the underlying styles.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Using responsive props\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To use responsive props, you can pass an object to any prop that supports responsive values.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here we've made a simple Box, and passed an object to the \", _jsx(_components.code, {\n        children: \"padding\"\n      }), \" prop. The keys in the object refer to the breakpoint name.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      showCode: true,\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box background=\\\"shade\\\" padding={{ xs: 1, sm: 2, md: 4 }}>\\n\\tA box with responsive padding.\\n</Box>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Under the hood, this simple example has generated the following CSS:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \".css-1ped26i {\\n\\tpadding: 1rem;\\n}\\n\\n@media (min-width: 576px) {\\n\\t.css-1ped26i {\\n\\t\\tpadding: 2rem;\\n\\t}\\n}\\n\\n@media (min-width: 768px) {\\n\\t.css-1ped26i {\\n\\t\\tpadding: 4rem;\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can see the mobile-first approach in action here in this CSS. The \", _jsx(_components.code, {\n        children: \"padding\"\n      }), \" value is set to \", _jsx(_components.code, {\n        children: \"1rem\"\n      }), \" by default - or from 0px, which is the xs breakpoint - and then we override it at each breakpoint, through a series of \", _jsx(_components.code, {\n        children: \"min-width\"\n      }), \" media queries.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You don't need to provide a value for every breakpoint. Just provide a value for mobile (xs), and add any additional breakpoint values as needed.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The array syntax\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also define responsive styles as an array. To interpret array responsive values, we convert the values defined in our \", _jsx(_components.code, {\n        children: \"breakpoints\"\n      }), \" token and sort them in ascending order.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To skip certain breakpoints, you can pass \", _jsx(_components.code, {\n        children: \"null\"\n      }), \" to any item in the array to avoid generating unnecessary CSS.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      showCode: true,\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box background=\\\"shade\\\" padding={[1, 2, 4]}>\\n\\tA box with responsive padding.\\n</Box>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"CSS-in-JS\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There can be situations where the primitive components don't support all of the props you need. In these cases, you can use our breakpoints in your CSS-in-JS styles.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can add the \", _jsx(_components.code, {\n        children: \"mq\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"mapResponsiveProp\"\n      }), \" functions to add styles at specific breakpoints.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { tokens } from '@ag.ds-next/react/core';\\n\\nfunction AppLayoutGrid({ children }: { children: React.ReactNode }) {\\n\\treturn (\\n\\t\\t<div\\n\\t\\t\\tcss={mq({\\n\\t\\t\\t\\tdisplay: 'grid',\\n\\t\\t\\t\\t// The value here changes depending on the viewport\\n\\t\\t\\t\\tgridTemplateColumns: mapResponsiveProp({\\n\\t\\t\\t\\t\\txs: '1fr',\\n\\t\\t\\t\\t\\txl: '17.5rem 1fr',\\n\\t\\t\\t\\t}),\\n\\t\\t\\t})}\\n\\t\\t>\\n\\t\\t\\t{children}\\n\\t\\t</div>\\n\\t);\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Or you can use the \", _jsx(_components.code, {\n        children: \"mediaQuery\"\n      }), \" tokens from \", _jsx(_components.code, {\n        children: \"Core\"\n      }), \" to add styles at specific breakpoints.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { tokens } from '@ag.ds-next/react/core';\\n\\nexport function AppLayoutHeader() {\\n\\treturn (\\n\\t\\t<Flex\\n\\t\\t\\tflexDirection=\\\"column\\\"\\n\\t\\t\\tcss={{\\n\\t\\t\\t\\t// use the 'minimum width' mediaQuery tokens from Core.\\n\\t\\t\\t\\t// This resolves to `@media (min-width: 1200px)`\\n\\t\\t\\t\\t[tokens.mediaQuery.min.xl]: {\\n\\t\\t\\t\\t\\tgridColumnStart: 1,\\n\\t\\t\\t\\t\\tgridColumnEnd: 3,\\n\\t\\t\\t\\t},\\n\\t\\t\\t}}\\n\\t\\t>\\n\\t\\t\\t...\\n\\t\\t</Flex>\\n\\t);\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Responsive props","overview":"AgDS provides first class support for mobile-first responsive styles.","opener":"The Agriculture Design System provides first class support for mobile-first responsive styles. Instead of manually writing CSS media queries throughout your codebase, our primitive components allow you to provide arrays and objects to generate responsive styles in your project."}},"data":{"title":"Responsive props","overview":"AgDS provides first class support for mobile-first responsive styles.","opener":"The Agriculture Design System provides first class support for mobile-first responsive styles. Instead of manually writing CSS media queries throughout your codebase, our primitive components allow you to provide arrays and objects to generate responsive styles in your project."},"title":"Responsive props","opener":"The Agriculture Design System provides first class support for mobile-first responsive styles. Instead of manually writing CSS media queries throughout your codebase, our primitive components allow you to provide arrays and objects to generate responsive styles in your project."},"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/guides","label":"Guides"},{"label":"Responsive props"}],"slug":"responsive-props","toc":[{"id":"using-responsive-props","title":"Using responsive props","level":2,"slug":"using-responsive-props","items":[]},{"id":"the-array-syntax","title":"The array syntax","level":2,"slug":"the-array-syntax","items":[]},{"id":"css-in-js","title":"CSS-in-JS","level":2,"slug":"css-in-js","items":[]}]},"__N_SSG":true}