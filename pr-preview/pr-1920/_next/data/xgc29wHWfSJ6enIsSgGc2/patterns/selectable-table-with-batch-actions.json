{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/patterns","label":"Patterns"},{"label":"Selectable tables with batch actions"}],"navLinks":[{"href":"/patterns/accessible-form-validation-and-recovery","label":"Accessible form validation and error recovery"},{"href":"/patterns/conditional-reveal","label":"Conditionally revealed content"},{"href":"/patterns/focus-mode","label":"Focus mode"},{"href":"/patterns/loading-error-empty-states","label":"Loading, empty and error states"},{"href":"/patterns/messaging","label":"Messaging"},{"href":"/patterns/multi-task-form","label":"Multi-task form"},{"href":"/patterns/search-filters","label":"Search filters"},{"href":"/patterns/selectable-table-with-batch-actions","label":"Selectable tables with batch actions"},{"href":"/patterns/selecting-multiple-options","label":"Selecting multiple options"}],"pattern":{"slug":"selectable-table-with-batch-actions","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Individual row selection\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To toggle the selection of an individual row, users can use the \", _jsx(_components.a, {\n        href: \"/components/checkbox\",\n        children: \"Checkbox\"\n      }), \" in the first column which should have the row heading ‘Select’.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Selected rows have a solid action coloured outline, which is achieved by setting \", _jsx(_components.code, {\n        children: \"selected={true}\"\n      }), \" on the \", _jsx(_components.code, {\n        children: \"TableRow\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [isRowSelected, setIsRowSelected] = React.useState(false);\\n\\treturn (\\n\\t\\t<TableWrapper>\\n\\t\\t\\t<Table>\\n\\t\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t<TableHeader>Select</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Reference</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Date submitted</TableHeader>\\n\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Actions</TableHeader>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t<TableRow selected={isRowSelected}>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tchecked={isRowSelected}\\n\\t\\t\\t\\t\\t\\t\\t\\tonChange={() => setIsRowSelected((x) => !x)}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Select row</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell as=\\\"th\\\" scope=\\\"row\\\" fontWeight=\\\"bold\\\">\\n\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">REF-AB3CD4EF</TextLink>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>20/06/2024</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<Flex gap={1}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">Download</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">Delete</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t</Flex>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t</Table>\\n\\t\\t</TableWrapper>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Selecting all rows\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To toggle the selection of all rows at once, users can use the ‘Select all rows’ checkbox above the table. The ‘Select all rows’ checkbox should always be placed just above the table element, with a border to divide the two elements.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Do not use \", _jsx(_components.code, {\n        children: \"TableCaption\"\n      }), \" component in combination with the ‘Select all rows’ checkbox as the caption will sit in between the checkbox and table. Instead, place a \", _jsx(_components.a, {\n        href: \"/components/heading\",\n        children: \"Heading\"\n      }), \" component above the Checkbox and connect the heading and table using \", _jsx(_components.code, {\n        children: \"aria-labelledby\"\n      }), \". For more information, please refer to the \", _jsx(_components.a, {\n        href: \"/components/table#labels-and-headings\",\n        children: \"Labels and headings\"\n      }), \" section of the table documentation.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Unlike the checkboxes in each row, the ‘Select all rows’ checkbox above the table has three states: checked, unchecked, and indeterminate. When some, but not all, rows are selected, the ‘Select all rows’ checkbox should enter an indeterminate state. This visual indicator signals to users that not all rows are selected and allows them to toggle all rows on or off with a single click.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [selectedRows, setSelectedRows] = React.useState([]);\\n\\n\\tfunction toggleRowSelection(rowIdx) {\\n\\t\\tif (selectedRows.includes(rowIdx)) {\\n\\t\\t\\tsetSelectedRows((r) => r.filter((s) => s !== rowIdx));\\n\\t\\t} else {\\n\\t\\t\\tsetSelectedRows((r) => [...r, rowIdx]);\\n\\t\\t}\\n\\t}\\n\\n\\tconst anyRowsChecked = selectedRows.length > 0;\\n\\tconst allRowsChecked = selectedRows.length === 3;\\n\\n\\tfunction toggleAllRows() {\\n\\t\\tif (anyRowsChecked) {\\n\\t\\t\\tsetSelectedRows([]);\\n\\t\\t} else {\\n\\t\\t\\tsetSelectedRows([0, 1, 2]);\\n\\t\\t}\\n\\t}\\n\\n\\treturn (\\n\\t\\t<Stack>\\n\\t\\t\\t<Box paddingBottom={0.75} paddingLeft={0.75} borderBottom>\\n\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\tchecked={allRowsChecked}\\n\\t\\t\\t\\t\\tindeterminate={anyRowsChecked && !allRowsChecked}\\n\\t\\t\\t\\t\\tonChange={() => toggleAllRows()}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tSelect all rows\\n\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t</Box>\\n\\t\\t\\t<TableWrapper>\\n\\t\\t\\t\\t<Table>\\n\\t\\t\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t\\t<TableHeader>Select</TableHeader>\\n\\t\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Reference</TableHeader>\\n\\t\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Date submitted</TableHeader>\\n\\t\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Actions</TableHeader>\\n\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t\\t{Array.from(new Array(3).keys()).map((idx) => {\\n\\t\\t\\t\\t\\t\\t\\tconst isRowSelected = selectedRows.includes(idx);\\n\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableRow selected={isRowSelected}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchecked={isRowSelected}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonChange={() => toggleRowSelection(idx)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Select</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell as=\\\"th\\\" scope=\\\"row\\\" fontWeight=\\\"bold\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">REF-AB3CD4EF</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>20/06/2024</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Flex gap={1}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">Download</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">Delete</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</Flex>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t\\t</Table>\\n\\t\\t\\t</TableWrapper>\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Batch actions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a data table has a set of actions that can be performed against every selectable row, those actions can be applied as a batch. Batch actions can increase user efficiency by allowing an action to be applied to multiple items simultaneously. This is far more efficient than repeatedly applying the same action to multiple table rows one at a time.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once a row from the table has been selected, the \", _jsx(_components.code, {\n        children: \"TableBatchActionsBar\"\n      }), \" component is positioned sticky at the bottom of the table, presenting a set of possible actions to apply to all selected rows.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Only small \", _jsx(_components.a, {\n        href: \"/components/button\",\n        children: \"Buttons\"\n      }), \" should be placed inside of the \", _jsx(_components.code, {\n        children: \"TableBatchActionsBar\"\n      }), \" component. When pressed, these buttons should trigger \", _jsx(_components.a, {\n        href: \"/components/drawer\",\n        children: \"Drawers\"\n      }), \" that contain the form related to the action.\"]\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"ensure each batch action can be performed on every selectable row\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"include a ‘Cancel’ button at the end of the batch actions button group\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use small buttons for batch actions\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"include batch actions that can not be performed on every selectable row\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"place form components inside the \", _jsx(_components.code, {\n          children: \"TableBatchActionsBar\"\n        }), \" component, as they can introduce inconsistencies as well as complexities related to validation and submission.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/storybook/index.html?path=/story/content-table--selectable-with-batch-actions\",\n        children: \"View an example in Storybook\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [selectedRows, setSelectedRows] = React.useState([]);\\n\\n\\tfunction toggleRowSelection(rowIdx) {\\n\\t\\tif (selectedRows.includes(rowIdx)) {\\n\\t\\t\\tsetSelectedRows((r) => r.filter((s) => s !== rowIdx));\\n\\t\\t} else {\\n\\t\\t\\tsetSelectedRows((r) => [...r, rowIdx]);\\n\\t\\t}\\n\\t}\\n\\n\\tconst anyRowsChecked = selectedRows.length > 0;\\n\\tconst allRowsChecked = selectedRows.length === 3;\\n\\n\\tfunction toggleAllRows() {\\n\\t\\tif (anyRowsChecked) {\\n\\t\\t\\tsetSelectedRows([]);\\n\\t\\t} else {\\n\\t\\t\\tsetSelectedRows([0, 1, 2]);\\n\\t\\t}\\n\\t}\\n\\n\\treturn (\\n\\t\\t<Stack gap={0.5}>\\n\\t\\t\\t<Stack>\\n\\t\\t\\t\\t<Box paddingBottom={0.75} paddingLeft={0.75} borderBottom>\\n\\t\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\tchecked={allRowsChecked}\\n\\t\\t\\t\\t\\t\\tindeterminate={anyRowsChecked && !allRowsChecked}\\n\\t\\t\\t\\t\\t\\tonChange={() => toggleAllRows()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\tSelect all rows\\n\\t\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t</Box>\\n\\t\\t\\t\\t<TableWrapper>\\n\\t\\t\\t\\t\\t<Table>\\n\\t\\t\\t\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableHeader>Select</TableHeader>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Reference</TableHeader>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Date submitted</TableHeader>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableHeader scope=\\\"col\\\">Actions</TableHeader>\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t\\t\\t{Array.from(new Array(3).keys()).map((idx) => {\\n\\t\\t\\t\\t\\t\\t\\t\\tconst isRowSelected = selectedRows.includes(idx);\\n\\t\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableRow selected={isRowSelected}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchecked={isRowSelected}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonChange={() => toggleRowSelection(idx)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<VisuallyHidden>Select</VisuallyHidden>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</Checkbox>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell as=\\\"th\\\" scope=\\\"row\\\" fontWeight=\\\"bold\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">REF-AB3CD4EF</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>20/06/2024</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Flex gap={1}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">Download</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TextLink href=\\\"#\\\">Delete</TextLink>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</Flex>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t\\t\\t</Table>\\n\\t\\t\\t\\t</TableWrapper>\\n\\t\\t\\t</Stack>\\n\\t\\t\\t{selectedRows.length > 0 ? (\\n\\t\\t\\t\\t<TableBatchActionsBar>\\n\\t\\t\\t\\t\\t<TableBatchActionsTitle>\\n\\t\\t\\t\\t\\t\\tApply action to {selectedRows.length} items\\n\\t\\t\\t\\t\\t</TableBatchActionsTitle>\\n\\t\\t\\t\\t\\t<ButtonGroup>\\n\\t\\t\\t\\t\\t\\t<Button variant=\\\"secondary\\\" size=\\\"sm\\\">\\n\\t\\t\\t\\t\\t\\t\\tDownload\\n\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t<Button variant=\\\"secondary\\\" size=\\\"sm\\\">\\n\\t\\t\\t\\t\\t\\t\\tDelete\\n\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t<Button variant=\\\"tertiary\\\" size=\\\"sm\\\" onClick={toggleAllRows}>\\n\\t\\t\\t\\t\\t\\t\\tCancel\\n\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t\\t</TableBatchActionsBar>\\n\\t\\t\\t) : null}\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Selectable tables with batch actions","description":"Selectable tables allow users to select one or more rows simultaneously and perform batch actions against the selected rows. A batch action is any action that can be performed against any selectable row of a table.","storybookPath":"/story/content-table--selectable-with-batch-actions","relatedComponents":["button","checkbox","drawer","table"],"githubTemplatePath":"/.storybook/stories/SelectableTableBatchActions"}},"content":"\n## Individual row selection\n\nTo toggle the selection of an individual row, users can use the [Checkbox](/components/checkbox) in the first column which should have the row heading ‘Select’.\n\nSelected rows have a solid action coloured outline, which is achieved by setting `selected={true}` on the `TableRow` component.\n\n```jsx live\n() => {\n\tconst [isRowSelected, setIsRowSelected] = React.useState(false);\n\treturn (\n\t\t<TableWrapper>\n\t\t\t<Table>\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableHeader>Select</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Reference</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Date submitted</TableHeader>\n\t\t\t\t\t\t<TableHeader scope=\"col\">Actions</TableHeader>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\t\t\t\t<TableBody>\n\t\t\t\t\t<TableRow selected={isRowSelected}>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\tchecked={isRowSelected}\n\t\t\t\t\t\t\t\tonChange={() => setIsRowSelected((x) => !x)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<VisuallyHidden>Select row</VisuallyHidden>\n\t\t\t\t\t\t\t</Checkbox>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell as=\"th\" scope=\"row\" fontWeight=\"bold\">\n\t\t\t\t\t\t\t<TextLink href=\"#\">REF-AB3CD4EF</TextLink>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>20/06/2024</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<Flex gap={1}>\n\t\t\t\t\t\t\t\t<TextLink href=\"#\">Download</TextLink>\n\t\t\t\t\t\t\t\t<TextLink href=\"#\">Delete</TextLink>\n\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t</TableWrapper>\n\t);\n};\n```\n\n## Selecting all rows\n\nTo toggle the selection of all rows at once, users can use the ‘Select all rows’ checkbox above the table. The ‘Select all rows’ checkbox should always be placed just above the table element, with a border to divide the two elements.\n\nDo not use `TableCaption` component in combination with the ‘Select all rows’ checkbox as the caption will sit in between the checkbox and table. Instead, place a [Heading](/components/heading) component above the Checkbox and connect the heading and table using `aria-labelledby`. For more information, please refer to the [Labels and headings](/components/table#labels-and-headings) section of the table documentation.\n\nUnlike the checkboxes in each row, the ‘Select all rows’ checkbox above the table has three states: checked, unchecked, and indeterminate. When some, but not all, rows are selected, the ‘Select all rows’ checkbox should enter an indeterminate state. This visual indicator signals to users that not all rows are selected and allows them to toggle all rows on or off with a single click.\n\n```jsx live\n() => {\n\tconst [selectedRows, setSelectedRows] = React.useState([]);\n\n\tfunction toggleRowSelection(rowIdx) {\n\t\tif (selectedRows.includes(rowIdx)) {\n\t\t\tsetSelectedRows((r) => r.filter((s) => s !== rowIdx));\n\t\t} else {\n\t\t\tsetSelectedRows((r) => [...r, rowIdx]);\n\t\t}\n\t}\n\n\tconst anyRowsChecked = selectedRows.length > 0;\n\tconst allRowsChecked = selectedRows.length === 3;\n\n\tfunction toggleAllRows() {\n\t\tif (anyRowsChecked) {\n\t\t\tsetSelectedRows([]);\n\t\t} else {\n\t\t\tsetSelectedRows([0, 1, 2]);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Stack>\n\t\t\t<Box paddingBottom={0.75} paddingLeft={0.75} borderBottom>\n\t\t\t\t<Checkbox\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tchecked={allRowsChecked}\n\t\t\t\t\tindeterminate={anyRowsChecked && !allRowsChecked}\n\t\t\t\t\tonChange={() => toggleAllRows()}\n\t\t\t\t>\n\t\t\t\t\tSelect all rows\n\t\t\t\t</Checkbox>\n\t\t\t</Box>\n\t\t\t<TableWrapper>\n\t\t\t\t<Table>\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableHeader>Select</TableHeader>\n\t\t\t\t\t\t\t<TableHeader scope=\"col\">Reference</TableHeader>\n\t\t\t\t\t\t\t<TableHeader scope=\"col\">Date submitted</TableHeader>\n\t\t\t\t\t\t\t<TableHeader scope=\"col\">Actions</TableHeader>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{Array.from(new Array(3).keys()).map((idx) => {\n\t\t\t\t\t\t\tconst isRowSelected = selectedRows.includes(idx);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<TableRow selected={isRowSelected}>\n\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={isRowSelected}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => toggleRowSelection(idx)}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<VisuallyHidden>Select</VisuallyHidden>\n\t\t\t\t\t\t\t\t\t\t</Checkbox>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell as=\"th\" scope=\"row\" fontWeight=\"bold\">\n\t\t\t\t\t\t\t\t\t\t<TextLink href=\"#\">REF-AB3CD4EF</TextLink>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell>20/06/2024</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t<Flex gap={1}>\n\t\t\t\t\t\t\t\t\t\t\t<TextLink href=\"#\">Download</TextLink>\n\t\t\t\t\t\t\t\t\t\t\t<TextLink href=\"#\">Delete</TextLink>\n\t\t\t\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableWrapper>\n\t\t</Stack>\n\t);\n};\n```\n\n## Batch actions\n\nWhen a data table has a set of actions that can be performed against every selectable row, those actions can be applied as a batch. Batch actions can increase user efficiency by allowing an action to be applied to multiple items simultaneously. This is far more efficient than repeatedly applying the same action to multiple table rows one at a time.\n\nOnce a row from the table has been selected, the `TableBatchActionsBar` component is positioned sticky at the bottom of the table, presenting a set of possible actions to apply to all selected rows.\n\nOnly small [Buttons](/components/button) should be placed inside of the `TableBatchActionsBar` component. When pressed, these buttons should trigger [Drawers](/components/drawer) that contain the form related to the action.\n\n<DoHeading />\n\n- ensure each batch action can be performed on every selectable row\n- include a ‘Cancel’ button at the end of the batch actions button group\n- use small buttons for batch actions\n\n<DontHeading />\n\n- include batch actions that can not be performed on every selectable row\n- place form components inside the `TableBatchActionsBar` component, as they can introduce inconsistencies as well as complexities related to validation and submission.\n\n[View an example in Storybook](/storybook/index.html?path=/story/content-table--selectable-with-batch-actions)\n\n```jsx live\n() => {\n\tconst [selectedRows, setSelectedRows] = React.useState([]);\n\n\tfunction toggleRowSelection(rowIdx) {\n\t\tif (selectedRows.includes(rowIdx)) {\n\t\t\tsetSelectedRows((r) => r.filter((s) => s !== rowIdx));\n\t\t} else {\n\t\t\tsetSelectedRows((r) => [...r, rowIdx]);\n\t\t}\n\t}\n\n\tconst anyRowsChecked = selectedRows.length > 0;\n\tconst allRowsChecked = selectedRows.length === 3;\n\n\tfunction toggleAllRows() {\n\t\tif (anyRowsChecked) {\n\t\t\tsetSelectedRows([]);\n\t\t} else {\n\t\t\tsetSelectedRows([0, 1, 2]);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Stack gap={0.5}>\n\t\t\t<Stack>\n\t\t\t\t<Box paddingBottom={0.75} paddingLeft={0.75} borderBottom>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\tchecked={allRowsChecked}\n\t\t\t\t\t\tindeterminate={anyRowsChecked && !allRowsChecked}\n\t\t\t\t\t\tonChange={() => toggleAllRows()}\n\t\t\t\t\t>\n\t\t\t\t\t\tSelect all rows\n\t\t\t\t\t</Checkbox>\n\t\t\t\t</Box>\n\t\t\t\t<TableWrapper>\n\t\t\t\t\t<Table>\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t<TableHeader>Select</TableHeader>\n\t\t\t\t\t\t\t\t<TableHeader scope=\"col\">Reference</TableHeader>\n\t\t\t\t\t\t\t\t<TableHeader scope=\"col\">Date submitted</TableHeader>\n\t\t\t\t\t\t\t\t<TableHeader scope=\"col\">Actions</TableHeader>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{Array.from(new Array(3).keys()).map((idx) => {\n\t\t\t\t\t\t\t\tconst isRowSelected = selectedRows.includes(idx);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow selected={isRowSelected}>\n\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\t\t\t\tchecked={isRowSelected}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => toggleRowSelection(idx)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<VisuallyHidden>Select</VisuallyHidden>\n\t\t\t\t\t\t\t\t\t\t\t</Checkbox>\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell as=\"th\" scope=\"row\" fontWeight=\"bold\">\n\t\t\t\t\t\t\t\t\t\t\t<TextLink href=\"#\">REF-AB3CD4EF</TextLink>\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>20/06/2024</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<Flex gap={1}>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextLink href=\"#\">Download</TextLink>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextLink href=\"#\">Delete</TextLink>\n\t\t\t\t\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableWrapper>\n\t\t\t</Stack>\n\t\t\t{selectedRows.length > 0 ? (\n\t\t\t\t<TableBatchActionsBar>\n\t\t\t\t\t<TableBatchActionsTitle>\n\t\t\t\t\t\tApply action to {selectedRows.length} items\n\t\t\t\t\t</TableBatchActionsTitle>\n\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\">\n\t\t\t\t\t\t\tDownload\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\">\n\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button variant=\"tertiary\" size=\"sm\" onClick={toggleAllRows}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t\t</TableBatchActionsBar>\n\t\t\t) : null}\n\t\t</Stack>\n\t);\n};\n```\n","data":{"title":"Selectable tables with batch actions","description":"Selectable tables allow users to select one or more rows simultaneously and perform batch actions against the selected rows. A batch action is any action that can be performed against any selectable row of a table.","storybookPath":"/story/content-table--selectable-with-batch-actions","relatedComponents":["button","checkbox","drawer","table"],"githubTemplatePath":"/.storybook/stories/SelectableTableBatchActions"},"title":"Selectable tables with batch actions","description":"Selectable tables allow users to select one or more rows simultaneously and perform batch actions against the selected rows. A batch action is any action that can be performed against any selectable row of a table.","figmaTemplateNodeId":null,"githubTemplatePath":"/.storybook/stories/SelectableTableBatchActions","storybookPath":"/story/content-table--selectable-with-batch-actions","relatedComponents":["button","checkbox","drawer","table"]},"toc":[{"id":"individual-row-selection","title":"Individual row selection","level":2,"slug":"individual-row-selection","items":[]},{"id":"selecting-all-rows","title":"Selecting all rows","level":2,"slug":"selecting-all-rows","items":[]},{"id":"batch-actions","title":"Batch actions","level":2,"slug":"batch-actions","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"relatedComponents":[{"slug":"button","name":"button","title":"Button","description":"A button communicates an action to a user and indicates what will happen next.","storybookPath":"/story/forms-button--primary","figmaGalleryNodeId":"12444%3A100219","subNavItems":[{"label":"Overview","href":"/components/button","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/overview.mdx"},{"label":"Rationale","href":"/components/button/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/rationale.mdx"},{"label":"Content","href":"/components/button/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/content.mdx"},{"label":"Code","href":"/components/button/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/code.mdx"},{"label":"Accessibility","href":"/components/button/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/accessibility.mdx"}],"relatedComponents":null,"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"checkbox","name":"checkbox","title":"Checkbox","description":"Checkboxes allow users to select one or more options from a list.","storybookPath":"/story/forms-checkbox--basic","figmaGalleryNodeId":"18834%3A97097","subNavItems":[{"label":"Overview","href":"/components/checkbox","path":"/home/runner/work/agds-next/agds-next/packages/react/src/checkbox/docs/overview.mdx"},{"label":"Code","href":"/components/checkbox/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/checkbox/docs/code.mdx"}],"relatedComponents":["control-group","radio","switch"],"relatedPatterns":["conditional-reveal","selecting-multiple-options"],"deprecated":false,"unreleased":false},{"slug":"drawer","name":"drawer","title":"Drawer","description":"A drawer is a panel that slides in from the right side of the screen. The Drawer is overlayed on top of the main area of the page to capture the user’s attention while keeping the context of the current task.","storybookPath":"/story/layout-drawer--basic","figmaGalleryNodeId":"18684%3A85147","subNavItems":[{"label":"Overview","href":"/components/drawer","path":"/home/runner/work/agds-next/agds-next/packages/react/src/drawer/docs/overview.mdx"},{"label":"Code","href":"/components/drawer/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/drawer/docs/code.mdx"}],"relatedComponents":["modal"],"relatedPatterns":["search-filters"],"deprecated":false,"unreleased":false},{"slug":"table","name":"table","title":"Table","description":"Tables help make complex information easier to scan and compare. Use tables for exact values or information that would be hard to read in body text.","storybookPath":"/story/content-table--basic","figmaGalleryNodeId":"11981%3A101727","subNavItems":[{"label":"Overview","href":"/components/table","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/overview.mdx"},{"label":"Rationale","href":"/components/table/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/rationale.mdx"},{"label":"Content","href":"/components/table/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/content.mdx"},{"label":"Code","href":"/components/table/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/code.mdx"},{"label":"Accessibility","href":"/components/table/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/table/docs/accessibility.mdx"}],"relatedComponents":["summary-list"],"relatedPatterns":["search-filters","selectable-table-with-batch-actions"],"deprecated":false,"unreleased":false}]},"__N_SSG":true}