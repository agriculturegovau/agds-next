{"pageProps":{"pkg":{"slug":"toggle-button","name":"toggle-button","title":"Toggle button","description":"Toggle button is a two-state button that represents and performs an on/off state.","storybookPath":"/story/Forms-ToggleButton--basic","figmaGalleryNodeId":"24997%3A25139","subNavItems":[{"label":"Overview","href":"/components/toggle-button","path":"/home/runner/work/agds-next/agds-next/packages/react/src/toggle-button/docs/overview.mdx"},{"label":"Code","href":"/components/toggle-button/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/toggle-button/docs/code.mdx"},{"label":"Accessibility","href":"/components/toggle-button/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/toggle-button/docs/accessibility.mdx"}],"relatedComponents":["button","switch"],"relatedPatterns":null,"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Toggle button"}],"toc":[{"id":"available-icons","title":"Available icons","level":2,"slug":"available-icons","items":[]},{"id":"icon-only","title":"Icon only","level":2,"slug":"icon-only","items":[]},{"id":"size","title":"Size","level":2,"slug":"size","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [isPressed, setPressed] = React.useState(false);\\n\\n\\treturn (\\n\\t\\t<ToggleButton\\n\\t\\t\\tlabel=\\\"Flag message\\\"\\n\\t\\t\\tpressedLabel=\\\"Unflag message\\\"\\n\\t\\t\\tonClick={setPressed}\\n\\t\\t\\tpressed={isPressed}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Toggle buttons should be used to allow a user to alternate an interaction between “on” and “off” states.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Its label should update and describe what will happen after it is pressed in its current state.\"\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to toggle with immediate effect\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"visually show its label when space permits.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use as a replacement for a form input like a Checkbox.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Available icons\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To prevent inconsistent implementations and user experience, we limit the icons that can be used to current, known use-cases.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\treturn (\\n\\t\\t<Stack alignItems=\\\"flex-start\\\" gap={1}>\\n\\t\\t\\t<Flex gap={1}>\\n\\t\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\t\\ticonType=\\\"flag\\\"\\n\\t\\t\\t\\t\\tonClick={console.log}\\n\\t\\t\\t\\t\\tpressed={false}\\n\\t\\t\\t\\t\\tlabel=\\\"flag (default)\\\"\\n\\t\\t\\t\\t\\tpressedLabel=\\\"flag (pressed)\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\t\\ticonType=\\\"flag\\\"\\n\\t\\t\\t\\t\\tonClick={console.log}\\n\\t\\t\\t\\t\\tpressed={true}\\n\\t\\t\\t\\t\\tlabel=\\\"flag (default)\\\"\\n\\t\\t\\t\\t\\tpressedLabel=\\\"flag (pressed)\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</Flex>\\n\\n\\t\\t\\t<Flex gap={1}>\\n\\t\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\t\\ticonType=\\\"star\\\"\\n\\t\\t\\t\\t\\tonClick={console.log}\\n\\t\\t\\t\\t\\tpressed={false}\\n\\t\\t\\t\\t\\tlabel=\\\"star (default)\\\"\\n\\t\\t\\t\\t\\tpressedLabel=\\\"star (pressed)\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\t\\ticonType=\\\"star\\\"\\n\\t\\t\\t\\t\\tonClick={console.log}\\n\\t\\t\\t\\t\\tpressed={true}\\n\\t\\t\\t\\t\\tlabel=\\\"star (default)\\\"\\n\\t\\t\\t\\t\\tpressedLabel=\\\"star (pressed)\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</Flex>\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Do you have a user need for a new or missing icon? \", _jsx(_components.a, {\n          href: \"/about\",\n          children: \"Get in touch\"\n        }), \" to discuss contribution.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Icon only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We encourage the use of visible labels for all actions with icons. However, some space-limited implementations may require an icon-only Toggle button. While the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" is required for accessibility purposes, it can be visually hidden with the \", _jsx(_components.code, {\n        children: \"hiddenLabel\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [flagIsPressed, setFlagIsPressed] = React.useState(false);\\n\\tconst [starIsPressed, setStarIsPressed] = React.useState(false);\\n\\n\\treturn (\\n\\t\\t<Stack alignItems=\\\"flex-start\\\" gap={1}>\\n\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\ticonType=\\\"flag\\\"\\n\\t\\t\\t\\tlabel=\\\"Flag message\\\"\\n\\t\\t\\t\\tpressedLabel=\\\"Unflag message\\\"\\n\\t\\t\\t\\tonClick={setFlagIsPressed}\\n\\t\\t\\t\\tpressed={flagIsPressed}\\n\\t\\t\\t\\thiddenLabel\\n\\t\\t\\t/>\\n\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\ticonType=\\\"star\\\"\\n\\t\\t\\t\\tlabel=\\\"Add to dashboard\\\"\\n\\t\\t\\t\\tpressedLabel=\\\"Remove from dashboard\\\"\\n\\t\\t\\t\\tonClick={setStarIsPressed}\\n\\t\\t\\t\\tpressed={starIsPressed}\\n\\t\\t\\t\\thiddenLabel\\n\\t\\t\\t/>\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Size\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Size is a property that allows you to adjust the visual weight of a button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The medium button should be used in most cases to provide a larger icon.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [mediumIsPressed, setMediumIsPressed] = React.useState(false);\\n\\tconst [smallIsPressed, setSmallIsPressed] = React.useState(false);\\n\\n\\treturn (\\n\\t\\t<Stack alignItems=\\\"flex-start\\\" gap={1}>\\n\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\tlabel=\\\"Flag message\\\"\\n\\t\\t\\t\\tpressedLabel=\\\"Unflag message\\\"\\n\\t\\t\\t\\tpressed={mediumIsPressed}\\n\\t\\t\\t\\tonClick={setMediumIsPressed}\\n\\t\\t\\t\\ticonType=\\\"flag\\\"\\n\\t\\t\\t\\tsize=\\\"md\\\"\\n\\t\\t\\t/>\\n\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\tlabel=\\\"Flag message\\\"\\n\\t\\t\\t\\tpressedLabel=\\\"Unflag message\\\"\\n\\t\\t\\t\\tpressed={smallIsPressed}\\n\\t\\t\\t\\tonClick={setSmallIsPressed}\\n\\t\\t\\t\\ticonType=\\\"flag\\\"\\n\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t/>\\n\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\ticonType=\\\"flag\\\"\\n\\t\\t\\t\\tlabel=\\\"Flag message\\\"\\n\\t\\t\\t\\tpressedLabel=\\\"Unflag message\\\"\\n\\t\\t\\t\\tonClick={setMediumIsPressed}\\n\\t\\t\\t\\tpressed={mediumIsPressed}\\n\\t\\t\\t\\thiddenLabel\\n\\t\\t\\t\\tsize=\\\"md\\\"\\n\\t\\t\\t/>\\n\\t\\t\\t<ToggleButton\\n\\t\\t\\t\\ticonType=\\\"star\\\"\\n\\t\\t\\t\\tlabel=\\\"Add to dashboard\\\"\\n\\t\\t\\t\\tpressedLabel=\\\"Remove from dashboard\\\"\\n\\t\\t\\t\\tonClick={setSmallIsPressed}\\n\\t\\t\\t\\tpressed={smallIsPressed}\\n\\t\\t\\t\\thiddenLabel\\n\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t/>\\n\\t\\t</Stack>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Toggle button","description":"Toggle button is a two-state button that represents and performs an on/off state.","group":"Forms","storybookPath":"/story/Forms-ToggleButton--basic","figmaGalleryNodeId":"24997%3A25139","relatedComponents":["button","switch"]}},"relatedPatterns":null,"relatedComponents":[{"slug":"button","name":"button","title":"Button","description":"A button communicates an action to a user and indicates what will happen next.","storybookPath":"/story/forms-button--primary","figmaGalleryNodeId":"12444%3A100219","subNavItems":[{"label":"Overview","href":"/components/button","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/overview.mdx"},{"label":"Rationale","href":"/components/button/rationale","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/rationale.mdx"},{"label":"Content","href":"/components/button/content","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/content.mdx"},{"label":"Code","href":"/components/button/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/code.mdx"},{"label":"Accessibility","href":"/components/button/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/button/docs/accessibility.mdx"}],"relatedComponents":null,"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"switch","name":"switch","title":"Switch","description":"A Switch allows a user to immediately toggle interface settings.","storybookPath":"/story/forms-switch--basic","figmaGalleryNodeId":"12444%3A100583","subNavItems":[{"label":"Overview","href":"/components/switch","path":"/home/runner/work/agds-next/agds-next/packages/react/src/switch/docs/overview.mdx"},{"label":"Code","href":"/components/switch/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/switch/docs/code.mdx"}],"relatedComponents":["checkbox"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}