{"pageProps":{"pkg":{"slug":"checkbox","name":"checkbox","title":"Checkbox","description":"Checkboxes allow users to select one or more options from a list.","storybookPath":"/story/forms-checkbox--basic","figmaGalleryNodeId":"18834%3A97097","subNavItems":[{"label":"Overview","href":"/components/checkbox","path":"/home/runner/work/agds-next/agds-next/packages/react/src/checkbox/docs/overview.mdx"},{"label":"Code","href":"/components/checkbox/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/checkbox/docs/code.mdx"}],"relatedComponents":["control-group","radio","switch"],"relatedPatterns":["conditional-reveal","selecting-multiple-options"],"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Checkbox"}],"toc":[{"id":"grouping-checkboxes","title":"Grouping checkboxes","level":2,"slug":"grouping-checkboxes","items":[]},{"id":"hint","title":"Hint","level":2,"slug":"hint","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"required","title":"Required","level":2,"slug":"required","items":[{"id":"hide-optional-label","title":"Hide optional label","level":3,"slug":"hide-optional-label","items":[]}]},{"id":"disabled","title":"Disabled","level":2,"slug":"disabled","items":[]},{"id":"indeterminate","title":"Indeterminate","level":2,"slug":"indeterminate","items":[]},{"id":"small","title":"Small","level":2,"slug":"small","items":[]},{"title":"Related patterns","slug":"related-patterns","id":"related-patterns","level":2,"items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Checkbox value=\\\"basic-checkbox\\\">Basic checkbox</Checkbox>\\n\"\n      })\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to help users to select one or more options\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use for a short list of options\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"use the \", _jsx(_components.a, {\n          href: \"/components/control-group\",\n          children: \"Control group component\"\n        }), \" to group multiple related checkboxes\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ensure users can select multiple related checkboxes at a time\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use a vertical list of options when grouping multiple related checkboxes\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"provide disabled options unless unavoidable\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use a horizontal list of options when grouping multiple related checkboxes unless unavoidable.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Grouping checkboxes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.a, {\n        href: \"/components/control-group\",\n        children: \"Control group component\"\n      }), \" to group multiple related checkboxes.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hint\"\n      }), \" prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\" hint=\\\"Hint text\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup\\n\\tlabel=\\\"Invalid example\\\"\\n\\tmessage=\\\"Please choose an option\\\"\\n\\tinvalid\\n\\tblock\\n>\\n\\t<Checkbox>Phone</Checkbox>\\n\\t<Checkbox>Tablet</Checkbox>\\n\\t<Checkbox>Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Required fields do not append ‘(optional)’ to the label and also use \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen readers that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indicate to screen reader users that a field is optional but don’t want to show the ‘(optional)’ label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<ControlGroup label=\\\"Required\\\" required block>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n\\t<ControlGroup label=\\\"Optional\\\" required={false} block>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n\\t<ControlGroup\\n\\t\\tlabel=\\\"Optional with hideOptionalLabel\\\"\\n\\t\\trequired={false}\\n\\t\\thideOptionalLabel={true}\\n\\t\\tblock\\n\\t>\\n\\t\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t</ControlGroup>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Disabled checkboxes can be used to indicate inputs that are no longer valid or expired.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<Checkbox value=\\\"phone\\\" disabled>\\n\\t\\tDisabled checkbox\\n\\t</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\" checked disabled>\\n\\t\\tDisabled and checked checkbox\\n\\t</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\" indeterminate disabled>\\n\\t\\tDisabled and indeterminate checkbox\\n\\t</Checkbox>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Indeterminate\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes\",\n        children: \"indeterminate checkbox\"\n      }), \" is used to represent a group of checkboxes that has a mix of selected and unselected values.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a checkbox is indeterminate, it overrides the checked state.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Checkbox indeterminate>Indeterminate</Checkbox>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Small\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"size\"\n      }), \" prop to change the size of the checkbox.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<Checkbox size=\\\"sm\\\" value=\\\"small\\\">\\n\\t\\tSmall checkbox\\n\\t</Checkbox>\\n\\t<Checkbox size=\\\"md\\\" value=\\\"phone\\\">\\n\\t\\tMedium checkbox (default)\\n\\t</Checkbox>\\n</Stack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Checkbox","description":"Checkboxes allow users to select one or more options from a list.","group":"Forms","storybookPath":"/story/forms-checkbox--basic","figmaGalleryNodeId":"18834%3A97097","relatedComponents":["control-group","radio","switch"],"relatedPatterns":["conditional-reveal","selecting-multiple-options"]}},"relatedPatterns":[{"slug":"conditional-reveal","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"limit what is revealed to 1 related question or piece of information\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal the related question or information directly under the initial question\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use another page if there are multiple related questions\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"only use with vertically stacked checkboxes or radios\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"reveal more than 1 related question or piece of information\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use with horizontally stacked checkboxes or radios\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reveal anything that is not a question or piece of information relating directly to a specific radio or checkbox option.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Radio\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can reveal a related question or information specific to that option when users select a particular \", _jsx(_components.a, {\n        href: \"/components/radio\",\n        children: \"Radio\"\n      }), \", so they only see that content when it is relevant to them.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\tEmail\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Radio\\n\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t>\\n\\t\\t\\t\\tText message\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Mobile phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can reveal a related question or information related to that option when a user selects a particular \", _jsx(_components.a, {\n        href: \"/components/checkbox\",\n        children: \"Checkbox\"\n      }), \", so they only see that content when it is relevant to them.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState([]);\\n\\tconst handlerForKey = React.useCallback(\\n\\t\\t(key) => () =>\\n\\t\\t\\tsetValue((value) =>\\n\\t\\t\\t\\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\\n\\t\\t\\t),\\n\\t\\t[]\\n\\t);\\n\\tconst isChecked = (key) => value.includes(key);\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t<Checkbox checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\tEmail\\n\\t\\t\\t</Checkbox>\\n\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput type=\\\"email\\\" label=\\\"Email address\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Checkbox checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Checkbox>\\n\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Checkbox\\n\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t>\\n\\t\\t\\t\\tText message\\n\\t\\t\\t</Checkbox>\\n\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput label=\\\"Mobile phone number\\\" inputMode=\\\"numeric\\\" required />\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState('email');\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Preferred contact method\\\" required block>\\n\\t\\t\\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\\n\\t\\t\\t\\tEmail\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('email') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\ttype=\\\"email\\\"\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Email address\\\"\\n\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\t\\tmessage=\\\"Enter a email address\\\"\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('phone') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Phone number\\\"\\n\\t\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\t\\tmessage=\\\"Enter a phone number\\\"\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t\\t<Radio\\n\\t\\t\\t\\tchecked={isChecked('textMessage')}\\n\\t\\t\\t\\tonChange={handlerForKey('textMessage')}\\n\\t\\t\\t>\\n\\t\\t\\t\\tText message\\n\\t\\t\\t</Radio>\\n\\t\\t\\t{isChecked('textMessage') && (\\n\\t\\t\\t\\t<ConditionalFieldContainer>\\n\\t\\t\\t\\t\\t<TextInput\\n\\t\\t\\t\\t\\t\\tlabel=\\\"Mobile phone number\\\"\\n\\t\\t\\t\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\tinvalid\\n\\t\\t\\t\\t\\t\\tmessage=\\\"Enter a mobile phone number\\\"\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</ConditionalFieldContainer>\\n\\t\\t\\t)}\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Conditionally revealed content","description":"Conditionally reveal a question or information related to a specific radio or checkbox option when a user selects it. This ensures that users only encounter conditionally revealed content when it is applicable to their selection.","relatedComponents":["radio","checkbox"]}},"content":"\n<DoHeading />\n\n- limit what is revealed to 1 related question or piece of information\n- reveal the related question or information directly under the initial question\n- use another page if there are multiple related questions\n- only use with vertically stacked checkboxes or radios\n\n<DontHeading />\n\n- reveal more than 1 related question or piece of information\n- use with horizontally stacked checkboxes or radios\n- reveal anything that is not a question or piece of information relating directly to a specific radio or checkbox option.\n\n## Radio\n\nYou can reveal a related question or information specific to that option when users select a particular [Radio](/components/radio), so they only see that content when it is relevant to them.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState();\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\treturn (\n\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\tEmail\n\t\t\t</Radio>\n\t\t\t{isChecked('email') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\tPhone\n\t\t\t</Radio>\n\t\t\t{isChecked('phone') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput label=\"Phone number\" inputMode=\"numeric\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Radio\n\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t>\n\t\t\t\tText message\n\t\t\t</Radio>\n\t\t\t{isChecked('textMessage') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput label=\"Mobile phone number\" inputMode=\"numeric\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t</ControlGroup>\n\t);\n};\n```\n\n## Checkbox\n\nYou can reveal a related question or information related to that option when a user selects a particular [Checkbox](/components/checkbox), so they only see that content when it is relevant to them.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState([]);\n\tconst handlerForKey = React.useCallback(\n\t\t(key) => () =>\n\t\t\tsetValue((value) =>\n\t\t\t\tvalue.includes(key) ? value.filter((v) => v !== key) : [...value, key]\n\t\t\t),\n\t\t[]\n\t);\n\tconst isChecked = (key) => value.includes(key);\n\treturn (\n\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t<Checkbox checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\tEmail\n\t\t\t</Checkbox>\n\t\t\t{isChecked('email') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput type=\"email\" label=\"Email address\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Checkbox checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\tPhone\n\t\t\t</Checkbox>\n\t\t\t{isChecked('phone') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput label=\"Phone number\" inputMode=\"numeric\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Checkbox\n\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t>\n\t\t\t\tText message\n\t\t\t</Checkbox>\n\t\t\t{isChecked('textMessage') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput label=\"Mobile phone number\" inputMode=\"numeric\" required />\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t</ControlGroup>\n\t);\n};\n```\n\n## Invalid\n\nWhen a conditionally revealed question is invalid, include an error message on the invalid field that is clearly related to the initial question.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState('email');\n\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\n\tconst isChecked = (key) => key === value;\n\treturn (\n\t\t<ControlGroup label=\"Preferred contact method\" required block>\n\t\t\t<Radio checked={isChecked('email')} onChange={handlerForKey('email')}>\n\t\t\t\tEmail\n\t\t\t</Radio>\n\t\t\t{isChecked('email') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tinvalid\n\t\t\t\t\t\tmessage=\"Enter a email address\"\n\t\t\t\t\t/>\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n\t\t\t\tPhone\n\t\t\t</Radio>\n\t\t\t{isChecked('phone') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tlabel=\"Phone number\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tinvalid\n\t\t\t\t\t\tmessage=\"Enter a phone number\"\n\t\t\t\t\t/>\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t\t<Radio\n\t\t\t\tchecked={isChecked('textMessage')}\n\t\t\t\tonChange={handlerForKey('textMessage')}\n\t\t\t>\n\t\t\t\tText message\n\t\t\t</Radio>\n\t\t\t{isChecked('textMessage') && (\n\t\t\t\t<ConditionalFieldContainer>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tlabel=\"Mobile phone number\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tinvalid\n\t\t\t\t\t\tmessage=\"Enter a mobile phone number\"\n\t\t\t\t\t/>\n\t\t\t\t</ConditionalFieldContainer>\n\t\t\t)}\n\t\t</ControlGroup>\n\t);\n};\n```\n","data":{"title":"Conditionally revealed content","description":"Conditionally reveal a question or information related to a specific radio or checkbox option when a user selects it. This ensures that users only encounter conditionally revealed content when it is applicable to their selection.","relatedComponents":["radio","checkbox"]},"title":"Conditionally revealed content","description":"Conditionally reveal a question or information related to a specific radio or checkbox option when a user selects it. This ensures that users only encounter conditionally revealed content when it is applicable to their selection.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["radio","checkbox"]},{"slug":"selecting-multiple-options","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Small list\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A simple list of \", _jsx(_components.a, {\n        href: \"/components/checkbox\",\n        children: \"Checkboxes\"\n      }), \" should always be preferred. This is the most accessible solution as it provides users with a clear understanding of all the available options. It also eliminates the need for additional interactions such as opening a dropdown menu.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\" block>\\n\\t<Checkbox value=\\\"a\\\">Option A</Checkbox>\\n\\t<Checkbox value=\\\"b\\\">Option B</Checkbox>\\n\\t<Checkbox value=\\\"c\\\">Option C</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Large list\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/components/combobox\",\n        children: \"ComboboxMulti\"\n      }), \" component can be used when there are a large number of options or vertical space is limited. It allows users to search and select options from a dropdown menu. However, this approach requires additional interaction and may not be as clear as a simple list of checkboxes.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState([]);\\n\\treturn (\\n\\t\\t<ComboboxMulti\\n\\t\\t\\tlabel=\\\"Select country\\\"\\n\\t\\t\\thint=\\\"Start typing to see results\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\toptions={COUNTRY_OPTIONS}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Selecting multiple options","description":"Multi-select is a commonly used design pattern that allows users to select multiple options from a list. This pattern is used in various contexts such as search filters, form fields, and more.","relatedComponents":["checkbox","combobox"]}},"content":"\n## Small list\n\nA simple list of [Checkboxes](/components/checkbox) should always be preferred. This is the most accessible solution as it provides users with a clear understanding of all the available options. It also eliminates the need for additional interactions such as opening a dropdown menu.\n\n```jsx live\n<ControlGroup label=\"Example\" block>\n\t<Checkbox value=\"a\">Option A</Checkbox>\n\t<Checkbox value=\"b\">Option B</Checkbox>\n\t<Checkbox value=\"c\">Option C</Checkbox>\n</ControlGroup>\n```\n\n## Large list\n\nThe [ComboboxMulti](/components/combobox) component can be used when there are a large number of options or vertical space is limited. It allows users to search and select options from a dropdown menu. However, this approach requires additional interaction and may not be as clear as a simple list of checkboxes.\n\n```jsx live\n() => {\n\tconst [value, setValue] = React.useState([]);\n\treturn (\n\t\t<ComboboxMulti\n\t\t\tlabel=\"Select country\"\n\t\t\thint=\"Start typing to see results\"\n\t\t\tvalue={value}\n\t\t\tonChange={setValue}\n\t\t\toptions={COUNTRY_OPTIONS}\n\t\t/>\n\t);\n};\n```\n","data":{"title":"Selecting multiple options","description":"Multi-select is a commonly used design pattern that allows users to select multiple options from a list. This pattern is used in various contexts such as search filters, form fields, and more.","relatedComponents":["checkbox","combobox"]},"title":"Selecting multiple options","description":"Multi-select is a commonly used design pattern that allows users to select multiple options from a list. This pattern is used in various contexts such as search filters, form fields, and more.","figmaTemplateNodeId":null,"githubTemplatePath":null,"storybookPath":null,"relatedComponents":["checkbox","combobox"]}],"relatedComponents":[{"slug":"control-group","name":"control-group","title":"Control group","description":"Control groups allow related checkboxes and radios to be grouped together.","storybookPath":"/story/forms-controlgroup--checkbox-group","figmaGalleryNodeId":"12926%3A104981","subNavItems":[{"label":"Overview","href":"/components/control-group","path":"/home/runner/work/agds-next/agds-next/packages/react/src/control-group/docs/overview.mdx"},{"label":"Code","href":"/components/control-group/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/control-group/docs/code.mdx"}],"relatedComponents":["checkbox","radio"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"radio","name":"radio","title":"Radio","description":"Radios allow users to select one option from a list.","storybookPath":"/story/forms-radio--basic","figmaGalleryNodeId":"12926%3A104981","subNavItems":[{"label":"Overview","href":"/components/radio","path":"/home/runner/work/agds-next/agds-next/packages/react/src/radio/docs/overview.mdx"},{"label":"Code","href":"/components/radio/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/radio/docs/code.mdx"}],"relatedComponents":["checkbox","control-group"],"relatedPatterns":["conditional-reveal"],"deprecated":false,"unreleased":false},{"slug":"switch","name":"switch","title":"Switch","description":"A Switch allows a user to immediately toggle interface settings.","storybookPath":"/story/forms-switch--basic","figmaGalleryNodeId":"12444%3A100583","subNavItems":[{"label":"Overview","href":"/components/switch","path":"/home/runner/work/agds-next/agds-next/packages/react/src/switch/docs/overview.mdx"},{"label":"Code","href":"/components/switch/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/switch/docs/code.mdx"}],"relatedComponents":["checkbox"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}