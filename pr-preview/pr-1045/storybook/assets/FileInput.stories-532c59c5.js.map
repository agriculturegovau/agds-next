{"version":3,"file":"FileInput.stories-532c59c5.js","sources":["../../../../packages/react/src/file-input/FileInput.tsx"],"sourcesContent":["import { forwardRef, InputHTMLAttributes } from 'react';\nimport { Field } from '../field';\nimport { packs, boxPalette, fontGrid, mapSpacing, tokens } from '../core';\nimport { buttonStyles } from '../button';\n\ntype NativeInputProps = InputHTMLAttributes<HTMLInputElement>;\n\ntype BaseFileInputProps = {\n\taccept?: NativeInputProps['accept'];\n\tautoFocus?: NativeInputProps['autoFocus'];\n\tcapture?: NativeInputProps['capture'];\n\tdisabled?: NativeInputProps['disabled'];\n\tid?: NativeInputProps['id'];\n\tmultiple?: NativeInputProps['multiple'];\n\tname?: NativeInputProps['name'];\n\tonBlur?: NativeInputProps['onBlur'];\n\tonChange?: NativeInputProps['onChange'];\n\tonFocus?: NativeInputProps['onFocus'];\n\tvalue?: NativeInputProps['value'];\n};\n\nexport type FileInputProps = BaseFileInputProps & {\n\t/** Describes the purpose of the field. */\n\tlabel: string;\n\t/** If true, \"(optional)\" will never be appended to the label. */\n\thideOptionalLabel?: boolean;\n\t/** If false, \"(optional)\" will be appended to the label. */\n\trequired?: boolean;\n\t/** Provides extra information about the field. */\n\thint?: string;\n\t/** Message to show when the field is invalid. */\n\tmessage?: string;\n\t/** If true, the invalid state will be rendered. */\n\tinvalid?: boolean;\n};\n\nexport const FileInput = forwardRef<HTMLInputElement, FileInputProps>(\n\tfunction FileInput(\n\t\t{\n\t\t\tlabel,\n\t\t\thideOptionalLabel,\n\t\t\trequired,\n\t\t\thint,\n\t\t\tmessage,\n\t\t\tinvalid,\n\t\t\tid,\n\t\t\t...props\n\t\t},\n\t\tref\n\t) {\n\t\tconst styles = fileInputStyles({ invalid });\n\t\treturn (\n\t\t\t<Field\n\t\t\t\tlabel={label}\n\t\t\t\thideOptionalLabel={hideOptionalLabel}\n\t\t\t\trequired={Boolean(required)}\n\t\t\t\thint={hint}\n\t\t\t\tmessage={message}\n\t\t\t\tinvalid={invalid}\n\t\t\t\tid={id}\n\t\t\t>\n\t\t\t\t{(a11yProps) => (\n\t\t\t\t\t<input ref={ref} css={styles} {...a11yProps} type=\"file\" {...props} />\n\t\t\t\t)}\n\t\t\t</Field>\n\t\t);\n\t}\n);\n\nexport const fileInputStyles = ({ invalid }: { invalid?: boolean }) =>\n\t({\n\t\t...fontGrid('sm', 'default'),\n\t\tfontFamily: tokens.font.body,\n\t\tcolor: boxPalette.foregroundText,\n\n\t\t'::file-selector-button': {\n\t\t\t...buttonStyles({ size: 'md', variant: 'secondary', block: false }),\n\t\t\tmargin: `0 ${mapSpacing(1)} 0 0`,\n\t\t},\n\n\t\t...(invalid && {\n\t\t\tbackgroundColor: boxPalette.systemErrorMuted,\n\t\t\tcolor: boxPalette.systemError,\n\t\t}),\n\n\t\t'&:disabled': {\n\t\t\tcursor: 'not-allowed',\n\t\t\topacity: 0.3,\n\t\t},\n\n\t\t'&:focus': packs.outline,\n\t} as const);\n"],"names":["FileInput","forwardRef","label","hideOptionalLabel","required","hint","message","invalid","id","props","ref","styles","fileInputStyles","jsx","Field","a11yProps","fontGrid","tokens","boxPalette","buttonStyles","mapSpacing","packs"],"mappings":"gwBAoCO,MAAAA,EAAAC,EAAA,WAAkB,SAAA,CAEvB,MAAAC,EACC,kBAAAC,EACA,SAAAC,EACA,KAAAC,EACA,QAAAC,EACA,QAAAC,EACA,GAAAC,EACA,GAAAC,CACG,EAAAC,EAAA,CAIJ,MAAAC,EAAAC,EAAA,CAAA,QAAAL,CAAA,CAAA,EACA,OAAAM,EACCC,GAAC,CAAA,MAAAZ,EACA,kBAAAC,EACA,SAAA,EAAAC,EAC0B,KAAAC,EAC1B,QAAAC,EACA,QAAAC,EACA,GAAAC,EACA,SAAAO,GAAAF,EAAA,QAAA,CAAA,IAAAH,EAAA,IAAAC,EAAA,GAAAI,EAAA,KAAA,OAAA,GAAAN,CAAA,CAAA,CAGqE,CAAA,CAEtE,CAGH,EAEOG,EAAA,CAAA,CAAA,QAAAL,MAAA,CACL,GAAAS,EAAA,KAAA,SAAA,EAC2B,WAAAC,EAAA,KAAA,KACH,MAAAC,EAAA,eACN,yBAAA,CAEQ,GAAAC,GAAA,CAAA,KAAA,KAAA,QAAA,YAAA,MAAA,GAAA,EACyC,OAAA,KAAAC,EAAA,CAAA,OACzC,EAC1B,GAAAb,GAAA,CAEe,gBAAAW,EAAA,iBACc,MAAAA,EAAA,WACV,EACnB,aAAA,CAEc,OAAA,cACL,QAAA,EACC,EACV,UAAAG,EAAA,OAGD"}