{"version":3,"file":"DateRangePicker.stories-9c5b5ad6.js","sources":["../../../../packages/react/src/date-picker/DateRangePicker.tsx"],"sourcesContent":["import {\n\tChangeEvent,\n\tuseCallback,\n\tRef,\n\tuseRef,\n\tuseState,\n\tuseEffect,\n\tuseMemo,\n} from 'react';\nimport { usePopper } from 'react-popper';\nimport { SelectRangeEventHandler } from 'react-day-picker';\nimport { Flex, Stack } from '../box';\nimport {\n\tmapSpacing,\n\ttokens,\n\tuseClickOutside,\n\tuseTernaryState,\n\tuseWindowSize,\n\tuseId,\n} from '../core';\nimport { FieldContainer, FieldHint, FieldLabel, FieldMessage } from '../field';\nimport { visuallyHiddenStyles } from '../a11y';\nimport { CalendarRange } from './Calendar';\nimport { DateInput } from './DatePickerInput';\nimport {\n\tgetValidDateRange,\n\tparseDate,\n\tformatDate,\n\tconstrainDate,\n\ttransformValuePropToInputValue,\n} from './utils';\n\nexport type DateRange = {\n\tfrom: Date | undefined;\n\tto: Date | undefined;\n};\n\nexport type DateRangeWithString = {\n\tfrom: Date | string | undefined;\n\tto: Date | string | undefined;\n};\n\ntype DateRangePickerCalendarProps = {\n\t/** If set, any days before this date will not be selectable. */\n\tminDate?: Date;\n\t/** If set, any days after this date will not be selectable. */\n\tmaxDate?: Date;\n};\n\nexport type DateRangePickerProps = DateRangePickerCalendarProps & {\n\t/** Describes the purpose of the group of fields. */\n\tlegend?: string;\n\t/** Provides extra information about the group of fields. */\n\thint?: string;\n\t/** Defines an identifier (ID) which must be unique. */\n\tid?: string;\n\t/** Message to show when the field is invalid. */\n\tmessage?: string;\n\t/** If true, the invalid state will be rendered for the start date. */\n\tfromInvalid?: boolean;\n\t/** If true, the invalid state will be rendered for the end date. */\n\ttoInvalid?: boolean;\n\t/** If true, \"(optional)\" will never be appended to the legend even when `required` is `false`. */\n\thideOptionalLabel?: boolean;\n\t/** If true, the field will not be interactive. */\n\tdisabled?: boolean;\n\t/** If false, \"(optional)\" will not be appended to the legend. */\n\trequired?: boolean;\n\t/** The value of the field. */\n\tvalue: DateRangeWithString;\n\t/** Function to be fired following a change event. */\n\tonChange: (day: DateRange) => void;\n\t/** Function to be fired when the input value is updated. */\n\tonFromInputChange?: (inputValue: string | undefined) => void;\n\t/** Function to be fired when the input value is updated. */\n\tonToInputChange?: (inputValue: string | undefined) => void;\n\t/** The label above the start date. */\n\tfromLabel?: string;\n\t/** The label above the end date. */\n\ttoLabel?: string;\n\t/** Ref to the start input element. */\n\tfromInputRef?: Ref<HTMLInputElement>;\n\t/** Ref to the end input element. */\n\ttoInputRef?: Ref<HTMLInputElement>;\n\t/** The range of options to display in calendar year select. */\n\tyearRange?: { from: number; to: number };\n};\n\nexport const DateRangePicker = ({\n\tlegend,\n\thint,\n\tid,\n\tfromInvalid = false,\n\ttoInvalid = false,\n\tmessage,\n\thideOptionalLabel,\n\tvalue,\n\tonChange,\n\tonFromInputChange: onFromInputChangeProp,\n\tonToInputChange: onToInputChangeProp,\n\tdisabled,\n\tfromLabel = 'Start date',\n\ttoLabel = 'End date',\n\trequired = false,\n\tminDate,\n\tmaxDate,\n\tfromInputRef,\n\ttoInputRef,\n\tyearRange,\n}: DateRangePickerProps) => {\n\tconst [isCalendarOpen, openCalendar, closeCalendar] = useTernaryState(false);\n\tconst [inputMode, setInputMode] = useState<'from' | 'to'>();\n\n\tconst fromTriggerRef = useRef<HTMLButtonElement>(null);\n\tconst toTriggerRef = useRef<HTMLButtonElement>(null);\n\n\tconst onFromTriggerClick = useCallback(() => {\n\t\tsetInputMode('from');\n\t\topenCalendar();\n\t}, [openCalendar]);\n\n\tconst onToTriggerClick = useCallback(() => {\n\t\tsetInputMode('to');\n\t\topenCalendar();\n\t}, [openCalendar]);\n\n\t// Popper state\n\tconst [refEl, setRefEl] = useState<HTMLDivElement | null>(null);\n\tconst [popperEl, setPopperEl] = useState<HTMLDivElement | null>(null);\n\tconst { styles, attributes } = usePopper(refEl, popperEl, {\n\t\tplacement: 'bottom-start',\n\t\tmodifiers: [{ name: 'offset', options: { offset: [0, 8] } }],\n\t});\n\n\tconst valueAsDateOrUndefined = useMemo(\n\t\t() => ({\n\t\t\tfrom: typeof value.from === 'string' ? undefined : value.from,\n\t\t\tto: typeof value.to === 'string' ? undefined : value.to,\n\t\t}),\n\t\t[value]\n\t);\n\n\tconst onSelect = useCallback<SelectRangeEventHandler>(\n\t\t(_, selectedDay, activeModifiers) => {\n\t\t\tif (!inputMode || activeModifiers.disabled) return;\n\t\t\tconst range = getValidDateRange(\n\t\t\t\tinputMode,\n\t\t\t\tselectedDay,\n\t\t\t\tvalueAsDateOrUndefined\n\t\t\t);\n\t\t\tonChange(range);\n\t\t\tsetFromInputValue(range.from ? formatDate(range.from) : '');\n\t\t\tsetToInputValue(range.to ? formatDate(range.to) : '');\n\n\t\t\tif (range.from && range.to) {\n\t\t\t\tcloseCalendar();\n\t\t\t\tsetInputMode(undefined);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (inputMode === 'from') {\n\t\t\t\tsetInputMode('to');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (inputMode === 'to' && !range.from) {\n\t\t\t\tsetInputMode('from');\n\t\t\t\treturn;\n\t\t\t}\n\t\t},\n\t\t[closeCalendar, inputMode, onChange, valueAsDateOrUndefined]\n\t);\n\n\t// From input state\n\tconst [fromInputValue, setFromInputValue] = useState(\n\t\ttransformValuePropToInputValue(value.from)\n\t);\n\tconst onFromInputChange = useCallback(\n\t\t(e: ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst inputValue = e.target.value;\n\t\t\t// Immediately update the input field\n\t\t\tsetFromInputValue(inputValue);\n\t\t\t// Ensure the text entered is a valid date\n\t\t\tconst parsedDate = parseDate(inputValue);\n\t\t\tconst containedDate = constrainDate(parsedDate, minDate, maxDate);\n\n\t\t\tconst nextValue = {\n\t\t\t\tfrom: containedDate,\n\t\t\t\tto: valueAsDateOrUndefined.to,\n\t\t\t};\n\n\t\t\t// When there is no value OR there is a valid date, only trigger the `onChange` callback\n\t\t\t// `onInputChange` will not be called\n\t\t\tif (!inputValue || containedDate) {\n\t\t\t\tonChange(nextValue);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonChange(nextValue);\n\t\t\tonFromInputChangeProp?.(inputValue);\n\t\t},\n\t\t[maxDate, minDate, onChange, valueAsDateOrUndefined, onFromInputChangeProp]\n\t);\n\n\t// To input state\n\tconst [toInputValue, setToInputValue] = useState(\n\t\ttransformValuePropToInputValue(value.to)\n\t);\n\tconst onToInputChange = useCallback(\n\t\t(e: ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst inputValue = e.target.value;\n\t\t\t// Immediately update the input field\n\t\t\tsetToInputValue(inputValue);\n\t\t\t// Ensure the text entered is a valid date\n\t\t\tconst parsedDate = parseDate(inputValue);\n\t\t\tconst containedDate = constrainDate(parsedDate, minDate, maxDate);\n\n\t\t\tconst nextValue = {\n\t\t\t\tfrom: valueAsDateOrUndefined.from,\n\t\t\t\tto: containedDate,\n\t\t\t};\n\n\t\t\t// When there is no value OR there is a valid date, only trigger the `onChange` callback\n\t\t\t// `onInputChange` will not be called\n\t\t\tif (!inputValue || containedDate) {\n\t\t\t\tonChange(nextValue);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonChange(nextValue);\n\t\t\tonToInputChangeProp?.(inputValue);\n\t\t},\n\t\t[maxDate, minDate, onChange, onToInputChangeProp, valueAsDateOrUndefined]\n\t);\n\n\t// Update the text inputs when the value updates\n\tuseEffect(() => {\n\t\tsetFromInputValue(transformValuePropToInputValue(value.from));\n\t\tsetToInputValue(transformValuePropToInputValue(value.to));\n\t}, [value]);\n\n\t// Close the calendar when the user clicks outside\n\tconst clickOutsideRef = useRef(popperEl);\n\tclickOutsideRef.current = popperEl;\n\n\tuseClickOutside(clickOutsideRef, closeCalendar);\n\n\t// Close the calendar when the user presses the escape key\n\tuseEffect(() => {\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\t\tif (isCalendarOpen && e.code === 'Escape') {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\t// Close the calendar and focus the calendar icon\n\t\t\t\tcloseCalendar();\n\t\t\t\tsetInputMode(undefined);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('keydown', handleKeyDown);\n\t\treturn () => window.removeEventListener('keydown', handleKeyDown);\n\t}, [isCalendarOpen, closeCalendar]);\n\n\tconst disabledCalendarDays = useMemo(() => {\n\t\tif (!(minDate || maxDate)) return;\n\t\treturn [\n\t\t\tminDate ? { before: minDate } : undefined,\n\t\t\tmaxDate ? { after: maxDate } : undefined,\n\t\t].filter((x): x is NonNullable<typeof x> => Boolean(x));\n\t}, [minDate, maxDate]);\n\n\t// 2 months visible on desktop, 1 on mobile\n\tconst { windowWidth = 0 } = useWindowSize();\n\tconst numberOfMonths = windowWidth > tokens.breakpoint.md ? 2 : 1;\n\n\tconst invalid = fromInvalid || toInvalid;\n\n\tconst { fieldsetId, hintId, messageId } = useDateRangePickerIds(id);\n\tconst describedByIds = [\n\t\tinvalid && message ? messageId : null,\n\t\thint ? hintId : null,\n\t].filter(Boolean);\n\tconst describedBy = describedByIds.length\n\t\t? describedByIds.join(' ')\n\t\t: undefined;\n\n\treturn (\n\t\t<FieldContainer invalid={invalid} id={fieldsetId}>\n\t\t\t<fieldset\n\t\t\t\taria-describedby={describedBy}\n\t\t\t\tcss={{ padding: 0, margin: 0, border: 'none' }}\n\t\t\t>\n\t\t\t\t{/* Legend needs to be the first element, so if none is supplied render a visually hidden element. */}\n\t\t\t\t<FieldLabel\n\t\t\t\t\tas=\"legend\"\n\t\t\t\t\trequired={required}\n\t\t\t\t\thideOptionalLabel={hideOptionalLabel}\n\t\t\t\t\tcss={legend ? undefined : visuallyHiddenStyles}\n\t\t\t\t>\n\t\t\t\t\t{legend ?? 'Date range'}\n\t\t\t\t</FieldLabel>\n\t\t\t\t<Stack\n\t\t\t\t\tgap={0.5}\n\t\t\t\t\tcss={{ marginTop: legend ? mapSpacing(0.5) : undefined }}\n\t\t\t\t>\n\t\t\t\t\t{hint ? <FieldHint id={hintId}>{hint}</FieldHint> : null}\n\t\t\t\t\t{message && invalid ? (\n\t\t\t\t\t\t<FieldMessage id={messageId}>{message}</FieldMessage>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<Flex\n\t\t\t\t\t\tref={setRefEl}\n\t\t\t\t\t\tflexDirection={{ xs: 'column', sm: 'row' }}\n\t\t\t\t\t\tinline\n\t\t\t\t\t\tgap={1}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DateInput\n\t\t\t\t\t\t\tref={fromInputRef}\n\t\t\t\t\t\t\tlabel={fromLabel}\n\t\t\t\t\t\t\thideOptionalLabel={hideOptionalLabel || Boolean(legend)}\n\t\t\t\t\t\t\tvalue={fromInputValue}\n\t\t\t\t\t\t\tonChange={onFromInputChange}\n\t\t\t\t\t\t\tbuttonRef={fromTriggerRef}\n\t\t\t\t\t\t\tbuttonOnClick={onFromTriggerClick}\n\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\trequired={required}\n\t\t\t\t\t\t\tinvalid={{ field: false, input: fromInvalid }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<DateInput\n\t\t\t\t\t\t\tref={toInputRef}\n\t\t\t\t\t\t\tlabel={toLabel}\n\t\t\t\t\t\t\thideOptionalLabel={hideOptionalLabel || Boolean(legend)}\n\t\t\t\t\t\t\tvalue={toInputValue}\n\t\t\t\t\t\t\tonChange={onToInputChange}\n\t\t\t\t\t\t\tbuttonRef={toTriggerRef}\n\t\t\t\t\t\t\tbuttonOnClick={onToTriggerClick}\n\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\trequired={required}\n\t\t\t\t\t\t\tinvalid={{ field: false, input: toInvalid }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Flex>\n\t\t\t\t</Stack>\n\t\t\t\t{isCalendarOpen ? (\n\t\t\t\t\t<div\n\t\t\t\t\t\tref={setPopperEl}\n\t\t\t\t\t\tstyle={styles.popper}\n\t\t\t\t\t\t{...attributes.popper}\n\t\t\t\t\t\tcss={{ zIndex: 1 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<CalendarRange\n\t\t\t\t\t\t\tinitialFocus\n\t\t\t\t\t\t\tdefaultMonth={valueAsDateOrUndefined.from}\n\t\t\t\t\t\t\tselected={valueAsDateOrUndefined}\n\t\t\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\t\t\tnumberOfMonths={numberOfMonths}\n\t\t\t\t\t\t\tdisabled={disabledCalendarDays}\n\t\t\t\t\t\t\treturnFocusRef={\n\t\t\t\t\t\t\t\tinputMode === 'from' ? fromTriggerRef : toTriggerRef\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tyearRange={yearRange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t</fieldset>\n\t\t</FieldContainer>\n\t);\n};\n\nexport const useDateRangePickerIds = (idProp?: string) => {\n\tconst autoId = useId(idProp);\n\tconst fieldsetId = idProp ? idProp : `date-range-picker-${autoId}`;\n\tconst hintId = `date-range-picker-${autoId}-hint`;\n\tconst messageId = `date-range-picker-${autoId}-message`;\n\treturn { fieldsetId, hintId, messageId };\n};\n"],"names":["DateRangePicker","legend","hint","id","fromInvalid","toInvalid","message","hideOptionalLabel","value","onChange","onFromInputChangeProp","onToInputChangeProp","disabled","fromLabel","toLabel","required","minDate","maxDate","fromInputRef","toInputRef","yearRange","isCalendarOpen","openCalendar","closeCalendar","useTernaryState","inputMode","setInputMode","useState","fromTriggerRef","useRef","toTriggerRef","onFromTriggerClick","useCallback","onToTriggerClick","refEl","setRefEl","popperEl","setPopperEl","styles","attributes","usePopper","valueAsDateOrUndefined","useMemo","onSelect","_","selectedDay","activeModifiers","range","getValidDateRange","setFromInputValue","formatDate","setToInputValue","fromInputValue","transformValuePropToInputValue","onFromInputChange","e","inputValue","parsedDate","parseDate","containedDate","constrainDate","nextValue","toInputValue","onToInputChange","useEffect","clickOutsideRef","useClickOutside","handleKeyDown","disabledCalendarDays","x","windowWidth","useWindowSize","numberOfMonths","tokens","invalid","fieldsetId","hintId","messageId","useDateRangePickerIds","describedByIds","describedBy","jsx","FieldContainer","jsxs","FieldLabel","visuallyHiddenStyles","Stack","mapSpacing","FieldHint","FieldMessage","Flex","DateInput","CalendarRange","idProp","autoId","useId"],"mappings":"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"}