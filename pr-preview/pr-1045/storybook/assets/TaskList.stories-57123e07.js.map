{"version":3,"file":"TaskList.stories-57123e07.js","sources":["../../../../packages/react/src/task-list/TaskListContainer.tsx","../../../../packages/react/src/task-list/TaskListHeading.tsx","../../../../packages/react/src/task-list/TaskListItemsContainer.tsx","../../../../packages/react/src/task-list/TaskListItem.tsx","../../../../packages/react/src/task-list/TaskList.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\nimport { Stack } from '../box';\n\nexport type TaskListContainerProps = {\n\tchildren: ReactNode;\n};\n\nexport const TaskListContainer = ({ children }: TaskListContainerProps) => (\n\t<Stack gap={1.5}>{children}</Stack>\n);\n","import { Stack } from '../box';\nimport { H2 } from '../heading';\nimport { Text } from '../text';\n\nexport const TaskListHeading = ({\n\tstepsCompleted,\n\ttotalSteps,\n}: {\n\tstepsCompleted: number;\n\ttotalSteps: number;\n}) => {\n\treturn (\n\t\t<Stack gap={1}>\n\t\t\t<H2>Task list</H2>\n\t\t\t<Text fontSize=\"sm\" color=\"muted\">\n\t\t\t\t{stepsCompleted} of {totalSteps} steps completed\n\t\t\t</Text>\n\t\t</Stack>\n\t);\n};\n","import type { ElementType, ReactNode } from 'react';\nimport { Stack } from '../box';\n\nexport type TaskListItemsContainerProps = {\n\tas?: ElementType;\n\tchildren: ReactNode;\n};\n\nexport const TaskListItemsContainer = ({\n\tchildren,\n\tas = 'ul',\n}: TaskListItemsContainerProps) => (\n\t<Stack as={as} borderTop css={{ counterReset: 'task-count' }}>\n\t\t{children}\n\t</Stack>\n);\n","import { ButtonHTMLAttributes, ElementType, PropsWithChildren } from 'react';\nimport { Flex } from '../box';\nimport { Text } from '../text';\nimport { TextLink } from '../text-link';\nimport {\n\tProgressDoingIcon,\n\tSuccessFilledIcon,\n\tProgressTodoIcon,\n\tProgressBlockedIcon,\n\tArrowRightIcon,\n} from '../icon';\nimport { boxPalette, LinkProps, mq, packs, tokens } from '../core';\nimport { BaseButton } from '../button';\nimport { VisuallyHidden } from '../a11y';\n\nexport type TaskListItemStatus = keyof typeof statusMap;\n\nexport type TaskListItemLinkProps = LinkProps & {\n\tstatus: TaskListItemStatus;\n\tmessage?: string;\n\tordered?: boolean;\n};\n\nexport const TaskListItemLink = ({\n\tchildren,\n\tmessage,\n\tstatus,\n\tordered,\n\t...props\n}: TaskListItemLinkProps) => (\n\t<TaskListItem\n\t\tas={TextLink}\n\t\tstatus={status}\n\t\tmessage={message}\n\t\tordered={ordered}\n\t\t{...props}\n\t>\n\t\t{children}\n\t</TaskListItem>\n);\n\nexport type TaskListItemButtonProps =\n\tButtonHTMLAttributes<HTMLButtonElement> & {\n\t\tstatus: TaskListItemStatus;\n\t\tmessage?: string;\n\t\tordered?: boolean;\n\t};\n\nexport const TaskListItemButton = ({\n\tchildren,\n\t...props\n}: TaskListItemButtonProps) => (\n\t<TaskListItem as={BaseButton} {...props}>\n\t\t{children}\n\t</TaskListItem>\n);\n\ntype TaskListItemProps = PropsWithChildren<{\n\tas: ElementType;\n\tclassName?: string;\n\tstatus: TaskListItemStatus;\n\tmessage?: string;\n\tordered?: boolean;\n}>;\n\nconst taskListItemTextDataAttr = 'data-agds-task-list-item-text';\n\nconst TaskListItem = ({\n\tas,\n\tchildren,\n\tstatus,\n\tmessage,\n\tordered,\n\tclassName,\n\t...props\n}: TaskListItemProps) => {\n\tconst { icon: Icon, iconColor, label } = statusMap[status];\n\treturn (\n\t\t<li css={{ counterIncrement: 'task-count' }}>\n\t\t\t<Flex\n\t\t\t\tas={as}\n\t\t\t\tflexDirection={['column', 'row']}\n\t\t\t\tjustifyContent=\"space-between\"\n\t\t\t\talignItems={['flex-start', 'center']}\n\t\t\t\tclassName={className}\n\t\t\t\tgap={1}\n\t\t\t\tpaddingY={1}\n\t\t\t\tpaddingX={[0.75, 1]}\n\t\t\t\tfontFamily=\"body\"\n\t\t\t\tcolor=\"text\"\n\t\t\t\tborderBottom\n\t\t\t\twidth=\"100%\"\n\t\t\t\tfocus\n\t\t\t\tcss={{\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\ttextDecoration: 'none',\n\n\t\t\t\t\t...(status === 'doneRecently' && {\n\t\t\t\t\t\tbackgroundColor: boxPalette.systemSuccessMuted,\n\t\t\t\t\t}),\n\n\t\t\t\t\t...(status === 'doing' && {\n\t\t\t\t\t\t'&:before': {\n\t\t\t\t\t\t\tcontent: '\"\"',\n\t\t\t\t\t\t\tbackground: boxPalette.foregroundAction,\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\t\twidth: tokens.borderWidth.xl,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\n\t\t\t\t\t[`[${taskListItemTextDataAttr}]`]: {\n\t\t\t\t\t\t...packs.underline,\n\t\t\t\t\t\tcolor: boxPalette.foregroundAction,\n\t\t\t\t\t},\n\n\t\t\t\t\t'&:hover': {\n\t\t\t\t\t\tbackgroundColor: boxPalette.backgroundShade,\n\t\t\t\t\t\t[`[${taskListItemTextDataAttr}]`]: {\n\t\t\t\t\t\t\ttextDecoration: 'none',\n\t\t\t\t\t\t\tcolor: boxPalette.foregroundText,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<Flex as=\"span\" gap={[0, 1]}>\n\t\t\t\t\t<Flex as=\"span\" alignItems=\"center\">\n\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\tsize=\"xl\"\n\t\t\t\t\t\t\tcolor={iconColor}\n\t\t\t\t\t\t\tcss={mq({\n\t\t\t\t\t\t\t\tdisplay: ['none', 'block'],\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Flex>\n\t\t\t\t\t<Flex as=\"span\" flexDirection=\"column\" gap={0.5}>\n\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t{...{ [taskListItemTextDataAttr]: '' }}\n\t\t\t\t\t\t\tfontSize={['md', 'lg']}\n\t\t\t\t\t\t\tlineHeight=\"heading\"\n\t\t\t\t\t\t\tfontWeight=\"bold\"\n\t\t\t\t\t\t\tcolor=\"action\"\n\t\t\t\t\t\t\tcss={{\n\t\t\t\t\t\t\t\torder: 2,\n\t\t\t\t\t\t\t\t...(ordered && {\n\t\t\t\t\t\t\t\t\t'&:before': {\n\t\t\t\t\t\t\t\t\t\tcontent: 'counter(task-count)',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ordered && <span aria-hidden=\"true\">. </span>}\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t\t<VisuallyHidden>.</VisuallyHidden>\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Flex as=\"span\" gap={0.25} alignItems=\"center\" css={{ order: 1 }}>\n\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\t\t\tcolor={iconColor}\n\t\t\t\t\t\t\t\tcss={mq({\n\t\t\t\t\t\t\t\t\tdisplay: ['block', 'none'],\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Text as=\"span\" fontSize={['xs', 'sm']} lineHeight=\"nospace\">\n\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t\t<VisuallyHidden>.</VisuallyHidden>\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t<Text color=\"muted\" fontSize=\"sm\" css={{ order: 3 }}>\n\t\t\t\t\t\t\t{message}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Flex>\n\t\t\t\t</Flex>\n\t\t\t\t<ArrowRightIcon color=\"action\" size={['sm', 'lg']} />\n\t\t\t</Flex>\n\t\t</li>\n\t);\n};\n\nconst statusMap = {\n\tblocked: {\n\t\tlabel: 'Cannot start yet',\n\t\ticon: ProgressBlockedIcon,\n\t\ticonColor: 'border',\n\t},\n\tdoing: {\n\t\tlabel: 'In progress',\n\t\ticon: ProgressDoingIcon,\n\t\ticonColor: 'action',\n\t},\n\ttodo: {\n\t\tlabel: 'Not started',\n\t\ticon: ProgressTodoIcon,\n\t\ticonColor: 'action',\n\t},\n\tdone: {\n\t\tlabel: 'Completed',\n\t\ticon: SuccessFilledIcon,\n\t\ticonColor: 'success',\n\t},\n\tdoneRecently: {\n\t\tlabel: 'Completed',\n\t\ticon: SuccessFilledIcon,\n\t\ticonColor: 'success',\n\t},\n} as const;\n","import { TaskListContainer } from './TaskListContainer';\nimport { TaskListHeading } from './TaskListHeading';\nimport { TaskListItemsContainer } from './TaskListItemsContainer';\nimport {\n\tTaskListItemButton,\n\tTaskListItemButtonProps,\n\tTaskListItemLink,\n\tTaskListItemLinkProps,\n} from './TaskListItem';\n\ntype TaskListItem = (TaskListItemButtonProps | TaskListItemLinkProps) & {\n\tlabel: string;\n\tmessage?: string;\n};\n\nexport type TaskListProps = {\n\titems: TaskListItem[];\n\tordered?: boolean;\n};\n\nexport const TaskList = ({ items, ordered }: TaskListProps) => {\n\tconst stepsCompleted = items.filter((item) => item.status === 'done').length;\n\tconst totalSteps = items.length;\n\treturn (\n\t\t<TaskListContainer>\n\t\t\t<TaskListHeading\n\t\t\t\tstepsCompleted={stepsCompleted}\n\t\t\t\ttotalSteps={totalSteps}\n\t\t\t/>\n\t\t\t<TaskListItemsContainer as={ordered ? 'ol' : 'ul'}>\n\t\t\t\t{items.map(({ label, ...props }, index) => {\n\t\t\t\t\tif (isItemLink(props)) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TaskListItemLink key={index} ordered={ordered} {...props}>\n\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t</TaskListItemLink>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<TaskListItemButton key={index} ordered={ordered} {...props}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</TaskListItemButton>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</TaskListItemsContainer>\n\t\t</TaskListContainer>\n\t);\n};\nconst isItemLink = (\n\titem: Omit<TaskListItem, 'label'>\n): item is TaskListItemLinkProps => 'href' in item;\n"],"names":["TaskListContainer","children","jsx","Stack","TaskListHeading","stepsCompleted","totalSteps","jsxs","H2","Text","TaskListItemsContainer","as","TaskListItemLink","message","status","ordered","props","TaskListItem","TextLink","TaskListItemButton","BaseButton","taskListItemTextDataAttr","className","Icon","iconColor","label","statusMap","Flex","boxPalette","tokens","packs","mq","VisuallyHidden","ArrowRightIcon","ProgressBlockedIcon","ProgressDoingIcon","ProgressTodoIcon","SuccessFilledIcon","TaskList","items","item","index","isItemLink"],"mappings":"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"}