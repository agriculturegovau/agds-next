{"version":3,"file":"ProgressIndicator.stories-62404f78.js","sources":["../../../../packages/react/src/progress-indicator/ProgressIndicatorHeading.tsx","../../../../packages/react/src/progress-indicator/utils.tsx","../../../../packages/react/src/progress-indicator/ProgressIndicatorCollapseButton.tsx","../../../../packages/react/src/progress-indicator/ProgressIndicatorItem.tsx","../../../../packages/react/src/progress-indicator/ProgressIndicatorList.tsx","../../../../packages/react/src/progress-indicator/ProgressIndicator.tsx"],"sourcesContent":["import { Stack } from '../box';\nimport { Text } from '../text';\nimport { tokens } from '../core';\n\nexport const ProgressIndicatorHeading = ({\n\theading,\n\tsubHeading,\n}: {\n\theading: string;\n\tsubHeading: string;\n}) => {\n\treturn (\n\t\t<Stack\n\t\t\tgap={0.5}\n\t\t\tpaddingBottom={1.5}\n\t\t\tcss={{\n\t\t\t\tdisplay: 'none',\n\t\t\t\t[tokens.mediaQuery.min.md]: { display: 'flex' },\n\t\t\t}}\n\t\t>\n\t\t\t<Text as=\"h2\" fontSize=\"md\" fontWeight=\"bold\" lineHeight=\"heading\">\n\t\t\t\t{heading}\n\t\t\t</Text>\n\t\t\t<Text color=\"muted\" fontSize=\"xs\">\n\t\t\t\t{subHeading}\n\t\t\t</Text>\n\t\t</Stack>\n\t);\n};\n","import { boxPalette } from '../core';\n\nexport const hoverColorMap = {\n\tbody: boxPalette.backgroundShade,\n\tbodyAlt: boxPalette.backgroundShadeAlt,\n};\n\nexport type ProgressIndicatorBackground = keyof typeof hoverColorMap;\n","import { useSpring, animated } from '@react-spring/web';\nimport { Flex } from '../box';\nimport { ChevronDownIcon } from '../icon';\nimport { tokens, usePrefersReducedMotion } from '../core';\nimport { BaseButton } from '../button';\nimport { hoverColorMap, ProgressIndicatorBackground } from './utils';\n\ntype ProgressIndicatorCollapseButtonProps = {\n\tariaControls: string;\n\tbackground?: ProgressIndicatorBackground;\n\tid: string;\n\tisOpen: boolean;\n\tlabel: string;\n\tonClick: () => void;\n};\n\nconst AnimatedIcon = animated(ChevronDownIcon);\n\nexport const ProgressIndicatorCollapseButton = ({\n\tariaControls,\n\tbackground = 'body',\n\tid,\n\tisOpen,\n\tlabel,\n\tonClick,\n}: ProgressIndicatorCollapseButtonProps) => {\n\tconst prefersReducedMotion = usePrefersReducedMotion();\n\n\tconst iconStyle = useSpring({\n\t\tfrom: { transform: `rotate(0deg)` },\n\t\tto: { transform: `rotate(${isOpen ? 180 : 0}deg)` },\n\t\timmediate: prefersReducedMotion,\n\t});\n\n\treturn (\n\t\t<Flex\n\t\t\tas={BaseButton}\n\t\t\taria-controls={ariaControls}\n\t\t\taria-expanded={isOpen}\n\t\t\tonClick={onClick}\n\t\t\tid={id}\n\t\t\tcolor=\"action\"\n\t\t\tfontSize=\"md\"\n\t\t\tlineHeight=\"heading\"\n\t\t\tbackground={background}\n\t\t\tfontWeight=\"bold\"\n\t\t\tpadding={1}\n\t\t\tjustifyContent=\"space-between\"\n\t\t\talignItems=\"center\"\n\t\t\twidth=\"100%\"\n\t\t\tlink\n\t\t\tfocus\n\t\t\tcss={{\n\t\t\t\t'&:hover': {\n\t\t\t\t\tbackground: hoverColorMap[background],\n\t\t\t\t},\n\n\t\t\t\t[tokens.mediaQuery.min.md]: {\n\t\t\t\t\tdisplay: 'none',\n\t\t\t\t},\n\t\t\t}}\n\t\t>\n\t\t\t{label}\n\t\t\t<AnimatedIcon size=\"sm\" weight=\"bold\" style={iconStyle} />\n\t\t</Flex>\n\t);\n};\n","import { ButtonHTMLAttributes, ElementType, PropsWithChildren } from 'react';\nimport { Box, Flex, Stack, backgroundColorMap } from '../box';\nimport { Text } from '../text';\nimport { TextLink } from '../text-link';\nimport {\n\tProgressBlockedIcon,\n\tProgressDoingIcon,\n\tSuccessFilledIcon,\n\tProgressTodoIcon,\n} from '../icon';\nimport { boxPalette, LinkProps, packs, tokens } from '../core';\nimport { BaseButton } from '../button';\nimport { hoverColorMap, ProgressIndicatorBackground } from './utils';\n\nexport type ProgressIndicatorItem = (\n\t| ProgressIndicatorItemButtonProps\n\t| ProgressIndicatorItemLinkProps\n) & {\n\tlabel: string;\n};\n\nexport type ProgressIndicatorItemStatus = keyof typeof statusMap;\n\nexport type ProgressIndicatorItemLinkProps = LinkProps & {\n\tbackground?: ProgressIndicatorBackground;\n\tstatus: ProgressIndicatorItemStatus;\n};\n\nexport const ProgressIndicatorItemLink = ({\n\tchildren,\n\t...props\n}: ProgressIndicatorItemLinkProps) => (\n\t<ProgressIndicatorItem as={TextLink} {...props}>\n\t\t{children}\n\t</ProgressIndicatorItem>\n);\n\nexport type ProgressIndicatorItemButtonProps =\n\tButtonHTMLAttributes<HTMLButtonElement> & {\n\t\tbackground?: ProgressIndicatorBackground;\n\t\tstatus: ProgressIndicatorItemStatus;\n\t};\n\nexport const ProgressIndicatorItemButton = ({\n\tchildren,\n\t...props\n}: ProgressIndicatorItemButtonProps) => (\n\t<ProgressIndicatorItem as={BaseButton} {...props}>\n\t\t{children}\n\t</ProgressIndicatorItem>\n);\n\ntype ProgressIndicatorItemProps = PropsWithChildren<{\n\tas: ElementType;\n\tbackground?: ProgressIndicatorBackground;\n\tstatus: ProgressIndicatorItemStatus;\n}>;\n\nconst ProgressIndicatorItem = ({\n\tas,\n\tbackground = 'body',\n\tchildren,\n\tstatus,\n\t...props\n}: ProgressIndicatorItemProps) => {\n\tconst active = status === 'doing';\n\tconst { label } = statusMap[status];\n\n\tconst listItemLinkTextSelector = '> span:last-of-type > span:first-of-type';\n\n\treturn (\n\t\t<Box\n\t\t\tas=\"li\"\n\t\t\tbackground={background}\n\t\t\tcss={{\n\t\t\t\t'&:first-of-type': {\n\t\t\t\t\t[`[${progressIndicatorItemTimelineDataAttr}]:first-of-type`]: {\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t'&:last-of-type': {\n\t\t\t\t\t[`[${progressIndicatorItemTimelineDataAttr}]:last-of-type`]: {\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t},\n\t\t\t\t\t[`[${progressIndicatorItemTextContainerDataAttr}]`]: {\n\t\t\t\t\t\tborderBottomWidth: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}}\n\t\t>\n\t\t\t<Flex\n\t\t\t\tas={as}\n\t\t\t\tgap={1}\n\t\t\t\tcss={{\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\ttextDecoration: 'none',\n\t\t\t\t\t[`[${progressIndicatorItemRingDataAttr}]:before`]: {\n\t\t\t\t\t\tbackgroundColor: backgroundColorMap[background],\n\t\t\t\t\t},\n\t\t\t\t\t[listItemLinkTextSelector]: {\n\t\t\t\t\t\tfontWeight: active ? 'bold' : 'normal',\n\t\t\t\t\t},\n\t\t\t\t\t'&:hover': {\n\t\t\t\t\t\tbackgroundColor: hoverColorMap[background],\n\t\t\t\t\t\t[`[${progressIndicatorItemRingDataAttr}]:before`]: {\n\t\t\t\t\t\t\tbackgroundColor: hoverColorMap[background],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[listItemLinkTextSelector]: packs.underline,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\tfocus\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<ProgressIndicatorItemIcon status={status} />\n\t\t\t\t<Stack\n\t\t\t\t\t{...{ [progressIndicatorItemTextContainerDataAttr]: '' }}\n\t\t\t\t\tas=\"span\"\n\t\t\t\t\tflexDirection=\"column-reverse\"\n\t\t\t\t\tflexGrow={1}\n\t\t\t\t\tgap={0}\n\t\t\t\t\tjustifyContent=\"center\"\n\t\t\t\t\tpaddingY={0.75}\n\t\t\t\t\tfontFamily=\"body\"\n\t\t\t\t\tfontWeight={active ? 'bold' : 'normal'}\n\t\t\t\t\tborderBottom\n\t\t\t\t\tborderColor=\"muted\"\n\t\t\t\t>\n\t\t\t\t\t<Text {...{ [progressIndicatorItemTextDataAttr]: '' }}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Text\n\t\t\t\t\t\tcolor=\"muted\"\n\t\t\t\t\t\tfontSize=\"xs\"\n\t\t\t\t\t\tlineHeight=\"nospace\"\n\t\t\t\t\t\tcss={{ textDecoration: 'none' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{label}\n\t\t\t\t\t</Text>\n\t\t\t\t</Stack>\n\t\t\t</Flex>\n\t\t</Box>\n\t);\n};\n\nconst ProgressIndicatorItemTimeline = () => (\n\t<span\n\t\t{...{ [progressIndicatorItemTimelineDataAttr]: '' }}\n\t\tcss={{\n\t\t\twidth: tokens.borderWidth.md,\n\t\t\tbackgroundColor: boxPalette.border,\n\t\t\tflex: 1,\n\t\t}}\n\t/>\n);\n\nconst ProgressIndicatorItemIcon = ({\n\tstatus,\n}: {\n\tstatus: ProgressIndicatorItemStatus;\n}) => {\n\tconst { icon: Icon, iconColor } = statusMap[status];\n\tconst ringWidth = tokens.borderWidth.md;\n\tconst ringGap = 3;\n\tconst ringInset = ringWidth + ringGap;\n\treturn (\n\t\t<Flex as=\"span\" flexDirection=\"column\" alignItems=\"center\">\n\t\t\t<ProgressIndicatorItemTimeline />\n\t\t\t<span\n\t\t\t\t{...{ [progressIndicatorItemRingDataAttr]: '' }}\n\t\t\t\tcss={{\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\tpaddingLeft: ringInset,\n\t\t\t\t\tpaddingRight: ringInset,\n\t\t\t\t\t...(status === 'doing' && {\n\t\t\t\t\t\t':before': {\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\ttop: -ringInset,\n\t\t\t\t\t\t\tbottom: -ringInset,\n\t\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\t\tborderRadius: '100%',\n\t\t\t\t\t\t\tcontent: '\"\"',\n\t\t\t\t\t\t\tborder: `${ringWidth}px solid ${boxPalette.foregroundAction}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Icon\n\t\t\t\t\tsize=\"md\"\n\t\t\t\t\tcolor={iconColor}\n\t\t\t\t\tcss={{\n\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t\tmargin: -1,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t\t<ProgressIndicatorItemTimeline />\n\t\t</Flex>\n\t);\n};\n\nconst progressIndicatorItemTimelineDataAttr =\n\t'data-agds-progress-indicator-item-timeline-action';\nconst progressIndicatorItemRingDataAttr =\n\t'data-agds-progress-indicator-item-ring';\nconst progressIndicatorItemTextContainerDataAttr =\n\t'data-agds-progress-indicator-item-text-container';\nconst progressIndicatorItemTextDataAttr =\n\t'data-agds-progress-indicator-item-text';\n\nconst statusMap = {\n\tblocked: {\n\t\tlabel: 'Cannot start yet',\n\t\ticon: ProgressBlockedIcon,\n\t\ticonColor: 'border',\n\t},\n\tdoing: {\n\t\tlabel: 'In progress',\n\t\ticon: ProgressDoingIcon,\n\t\ticonColor: 'action',\n\t},\n\ttodo: {\n\t\tlabel: 'Not started',\n\t\ticon: ProgressTodoIcon,\n\t\ticonColor: 'border',\n\t},\n\tdone: {\n\t\tlabel: 'Completed',\n\t\ticon: SuccessFilledIcon,\n\t\ticonColor: 'success',\n\t},\n} as const;\n","import { forwardRef, ReactNode } from 'react';\nimport { Box } from '../box';\n\nexport type ProgressIndicatorListProps = {\n\tchildren: ReactNode;\n};\n\nexport const ProgressIndicatorList = forwardRef<\n\tHTMLUListElement,\n\tProgressIndicatorListProps\n>(function ProgressIndicatorList({ children }, ref) {\n\treturn (\n\t\t<Box ref={ref} as=\"ul\" borderTop>\n\t\t\t{children}\n\t\t</Box>\n\t);\n});\n","import { useRef } from 'react';\nimport { useSpring, animated } from '@react-spring/web';\nimport {\n\tpacks,\n\ttokens,\n\tuseId,\n\tusePrefersReducedMotion,\n\tuseToggleState,\n\tuseWindowSize,\n} from '../core';\nimport { Box } from '../box';\nimport { ProgressIndicatorHeading } from './ProgressIndicatorHeading';\nimport { ProgressIndicatorCollapseButton } from './ProgressIndicatorCollapseButton';\nimport {\n\tProgressIndicatorItem,\n\tProgressIndicatorItemButton,\n\tProgressIndicatorItemLink,\n\tProgressIndicatorItemLinkProps,\n} from './ProgressIndicatorItem';\nimport { ProgressIndicatorList } from './ProgressIndicatorList';\n\nexport type ProgressIndicatorProps = {\n\t/** If the ProgressIndicator is placed on a page with 'bodyAlt' background, please set this to \"bodyAlt\". */\n\tbackground?: 'body' | 'bodyAlt';\n\titems: ProgressIndicatorItem[];\n};\n\nexport const ProgressIndicator = ({\n\tbackground,\n\titems,\n}: ProgressIndicatorProps) => {\n\tconst { buttonId, bodyId } = useProgressIndicatorIds();\n\tconst ref = useRef<HTMLUListElement>(null);\n\tconst [isOpen, onToggle] = useToggleState(false, true);\n\n\tconst prefersReducedMotion = usePrefersReducedMotion();\n\tconst animatedHeight = useSpring({\n\t\tfrom: { display: 'none', height: 0 },\n\t\tto: async (next) => {\n\t\t\t// Show the element so it's height can be animated\n\t\t\tif (isOpen) await next({ display: 'block', overflow: 'hidden' });\n\t\t\t// Animate the elements height\n\t\t\tawait next({\n\t\t\t\toverflow: 'hidden',\n\t\t\t\theight: isOpen ? ref.current?.offsetHeight : 0,\n\t\t\t\timmediate: prefersReducedMotion,\n\t\t\t});\n\t\t\t// Animation end state\n\t\t\tawait next(\n\t\t\t\tisOpen\n\t\t\t\t\t? { height: 'auto', overflow: 'initial' }\n\t\t\t\t\t: { display: 'none', overflow: 'initial' }\n\t\t\t);\n\t\t},\n\t});\n\n\tconst { windowWidth } = useWindowSize();\n\tconst isMobile = (windowWidth || 0) <= tokens.breakpoint.lg - 1;\n\tconst stepsCompleted = items.filter((item) => item.status === 'done').length;\n\tconst totalSteps = items.length;\n\tconst subHeading = `${stepsCompleted} of ${totalSteps} steps completed`;\n\n\treturn (\n\t\t<Box as=\"section\" borderBottom>\n\t\t\t<ProgressIndicatorHeading heading=\"Progress\" subHeading={subHeading} />\n\t\t\t<ProgressIndicatorCollapseButton\n\t\t\t\tbackground={background}\n\t\t\t\tisOpen={isOpen}\n\t\t\t\tonClick={onToggle}\n\t\t\t\tariaControls={bodyId}\n\t\t\t\tid={buttonId}\n\t\t\t\tlabel={subHeading}\n\t\t\t/>\n\t\t\t<animated.div\n\t\t\t\tid={bodyId}\n\t\t\t\t// As this component looks similar to an accordion in smaller screen sizes, we need to conditionally add some aria attributes\n\t\t\t\t{...(isMobile && { role: 'region', 'aria-labelledby': buttonId })}\n\t\t\t\tstyle={animatedHeight}\n\t\t\t\tcss={{\n\t\t\t\t\t// Overwrite the animated height for tablet/desktop sizes.\n\t\t\t\t\t[tokens.mediaQuery.min.md]: {\n\t\t\t\t\t\toverflow: 'unset',\n\t\t\t\t\t\tdisplay: 'block !important',\n\t\t\t\t\t\theight: 'auto !important',\n\t\t\t\t\t},\n\t\t\t\t\t...packs.print.visible,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<ProgressIndicatorList ref={ref}>\n\t\t\t\t\t{items.map(({ label, ...props }, index) => {\n\t\t\t\t\t\tif (isItemLink(props)) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ProgressIndicatorItemLink\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tbackground={background}\n\t\t\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t\t</ProgressIndicatorItemLink>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ProgressIndicatorItemButton\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tbackground={background}\n\t\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t</ProgressIndicatorItemButton>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ProgressIndicatorList>\n\t\t\t</animated.div>\n\t\t</Box>\n\t);\n};\n\nexport const useProgressIndicatorIds = () => {\n\tconst autoId = useId();\n\treturn {\n\t\tbuttonId: `progress-indicator-${autoId}-button`,\n\t\tbodyId: `progress-indicator-${autoId}-body`,\n\t};\n};\n\nexport const isItemLink = (\n\titem: Omit<ProgressIndicatorItem, 'label'>\n): item is ProgressIndicatorItemLinkProps => 'href' in item;\n"],"names":["ProgressIndicatorHeading","heading","subHeading","jsxs","Stack","tokens","jsx","Text","hoverColorMap","boxPalette","AnimatedIcon","animated","ChevronDownIcon","ProgressIndicatorCollapseButton","ariaControls","background","id","isOpen","label","onClick","prefersReducedMotion","usePrefersReducedMotion","iconStyle","useSpring","Flex","BaseButton","ProgressIndicatorItemLink","children","props","ProgressIndicatorItem","TextLink","ProgressIndicatorItemButton","as","status","active","statusMap","listItemLinkTextSelector","Box","progressIndicatorItemTimelineDataAttr","progressIndicatorItemTextContainerDataAttr","progressIndicatorItemRingDataAttr","backgroundColorMap","packs","ProgressIndicatorItemIcon","progressIndicatorItemTextDataAttr","ProgressIndicatorItemTimeline","Icon","iconColor","ringWidth","ringInset","ProgressBlockedIcon","ProgressDoingIcon","ProgressTodoIcon","SuccessFilledIcon","ProgressIndicatorList","forwardRef","ref","ProgressIndicator","items","buttonId","bodyId","useProgressIndicatorIds","useRef","onToggle","useToggleState","animatedHeight","next","_a","windowWidth","useWindowSize","isMobile","stepsCompleted","item","totalSteps","index","isItemLink","autoId","useId"],"mappings":"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"}