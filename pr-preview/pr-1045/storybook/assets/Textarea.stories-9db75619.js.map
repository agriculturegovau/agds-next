{"version":3,"file":"Textarea.stories-9db75619.js","sources":["../../../../packages/react/src/textarea/Textarea.tsx"],"sourcesContent":["import { forwardRef, TextareaHTMLAttributes } from 'react';\nimport { FieldMaxWidth } from '../core';\nimport { Field } from '../field';\nimport { textInputStyles } from '../text-input';\n\ntype NativeTextareaProps = TextareaHTMLAttributes<HTMLTextAreaElement>;\n\ntype BaseTextareaProps = {\n\tautoFocus?: NativeTextareaProps['autoFocus'];\n\tdisabled?: NativeTextareaProps['disabled'];\n\tid?: NativeTextareaProps['id'];\n\tinputMode?: NativeTextareaProps['inputMode'];\n\tname?: NativeTextareaProps['name'];\n\tonBlur?: NativeTextareaProps['onBlur'];\n\tonChange?: NativeTextareaProps['onChange'];\n\tonFocus?: NativeTextareaProps['onFocus'];\n\tplaceholder?: NativeTextareaProps['placeholder'];\n\trows?: NativeTextareaProps['rows'];\n\tvalue?: NativeTextareaProps['value'];\n};\n\nexport type TextareaProps = BaseTextareaProps & {\n\t/** Describes the purpose of the field. */\n\tlabel: string;\n\t/** If true, \"(optional)\" will never be appended to the label. */\n\thideOptionalLabel?: boolean;\n\t/** If false, \"(optional)\" will be appended to the label. */\n\trequired?: boolean;\n\t/** Provides extra information about the field. */\n\thint?: string;\n\t/** Message to show when the field is invalid. */\n\tmessage?: string;\n\t/** If true, the invalid state will be rendered. */\n\tinvalid?: boolean;\n\t/** If true, the field will stretch to the fill the width of its container. */\n\tblock?: boolean;\n\t/** The maximum width of the field. */\n\tmaxWidth?: Extract<FieldMaxWidth, 'md' | 'lg' | 'xl'>;\n};\n\nexport const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(\n\tfunction Textarea(\n\t\t{\n\t\t\tlabel,\n\t\t\thideOptionalLabel,\n\t\t\trequired,\n\t\t\thint,\n\t\t\tmessage,\n\t\t\tinvalid,\n\t\t\tblock,\n\t\t\tmaxWidth = 'md',\n\t\t\tid,\n\t\t\t...props\n\t\t},\n\t\tref\n\t) {\n\t\tconst styles = textInputStyles({\n\t\t\tblock,\n\t\t\tmaxWidth,\n\t\t\tinvalid,\n\t\t\tmultiline: true,\n\t\t});\n\t\treturn (\n\t\t\t<Field\n\t\t\t\tlabel={label}\n\t\t\t\thideOptionalLabel={hideOptionalLabel}\n\t\t\t\trequired={Boolean(required)}\n\t\t\t\thint={hint}\n\t\t\t\tmessage={message}\n\t\t\t\tinvalid={invalid}\n\t\t\t\tid={id}\n\t\t\t>\n\t\t\t\t{(a11yProps) => (\n\t\t\t\t\t<textarea ref={ref} css={styles} {...a11yProps} {...props} />\n\t\t\t\t)}\n\t\t\t</Field>\n\t\t);\n\t}\n);\n"],"names":["Textarea","forwardRef","label","hideOptionalLabel","required","hint","message","invalid","block","maxWidth","id","props","ref","styles","textInputStyles","jsx","Field","a11yProps"],"mappings":"6WAwCO,MAAAA,EAAAC,EAAA,WAAiB,SAAA,CAEtB,MAAAC,EACC,kBAAAC,EACA,SAAAC,EACA,KAAAC,EACA,QAAAC,EACA,QAAAC,EACA,MAAAC,EACA,SAAAC,EAAA,KACW,GAAAC,EACX,GAAAC,CACG,EAAAC,EAAA,CAIJ,MAAAC,EAAAC,EAAA,CAA+B,MAAAN,EAC9B,SAAAC,EACA,QAAAF,EACA,UAAA,EACW,CAAA,EAEZ,OAAAQ,EACCC,EAAC,CAAA,MAAAd,EACA,kBAAAC,EACA,SAAA,EAAAC,EAC0B,KAAAC,EAC1B,QAAAC,EACA,QAAAC,EACA,GAAAG,EACA,SAAAO,GAAAF,EAAA,WAAA,CAAA,IAAAH,EAAA,IAAAC,EAAA,GAAAI,EAAA,GAAAN,CAAA,CAAA,CAG4D,CAAA,CAE7D,CAGH;;"}