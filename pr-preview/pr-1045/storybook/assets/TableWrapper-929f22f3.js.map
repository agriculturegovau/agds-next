{"version":3,"file":"TableWrapper-929f22f3.js","sources":["../../../../packages/react/src/table/Table.tsx","../../../../packages/react/src/table/TableHeader.tsx","../../../../packages/react/src/table/TableCaption.tsx","../../../../packages/react/src/table/TableHead.tsx","../../../../packages/react/src/table/TableBody.tsx","../../../../packages/react/src/table/TableCell.tsx","../../../../packages/react/src/table/TableWrapper.tsx"],"sourcesContent":["import { PropsWithChildren, forwardRef } from 'react';\nimport { Box } from '../box';\nimport { boxPalette } from '../core';\n\nexport type TableProps = PropsWithChildren<{\n\t/** If true, alternating rows will have a different background colour. */\n\tstriped?: boolean;\n\t/** Setting this to -1 allows the table to be focusable */\n\ttabIndex?: number;\n\t/** The table-layout CSS property sets the algorithm used to lay out cells, rows, and columns. */\n\ttableLayout?: 'auto' | 'fixed';\n\t/** The id of the element that labels the table */\n\t'aria-labelledby'?: string;\n\t/** The id of the element that describes the table */\n\t'aria-describedby'?: string;\n\t/** The id of the table */\n\tid?: string;\n}>;\n\nexport const Table = forwardRef<HTMLTableElement, TableProps>(function Table(\n\t{\n\t\tchildren,\n\t\tstriped,\n\t\ttabIndex,\n\t\ttableLayout = 'auto',\n\t\t'aria-labelledby': ariaLabelledby,\n\t\t'aria-describedby': ariaDescribedby,\n\t\tid,\n\t},\n\tref\n) {\n\treturn (\n\t\t<Box\n\t\t\tas=\"table\"\n\t\t\tref={ref}\n\t\t\ttabIndex={tabIndex}\n\t\t\tfontSize=\"sm\"\n\t\t\tfocus\n\t\t\twidth=\"100%\"\n\t\t\tdisplay=\"table\"\n\t\t\tid={id}\n\t\t\tcss={{\n\t\t\t\tborderCollapse: 'collapse',\n\t\t\t\tborderSpacing: 0,\n\t\t\t\ttableLayout,\n\n\t\t\t\t'tbody tr:nth-last-of-type( odd )': {\n\t\t\t\t\tbackgroundColor: striped ? boxPalette.backgroundShade : 'transparent',\n\t\t\t\t},\n\t\t\t}}\n\t\t\taria-labelledby={ariaLabelledby}\n\t\t\taria-describedby={ariaDescribedby}\n\t\t>\n\t\t\t{children}\n\t\t</Box>\n\t);\n});\n","import { PropsWithChildren } from 'react';\nimport { Box } from '../box';\nimport { ResponsiveProp } from '../core';\n\nexport type TableHeaderProps = PropsWithChildren<{\n\t/** Can be used to conditionally hide or show table cells at different breakpoints. */\n\tdisplay?: ResponsiveProp<'none' | 'table-cell'>;\n\t/** Defines the cells that the header (defined in the <th>) element relates to. */\n\tscope?: 'col' | 'row' | 'colgroup' | 'rowgroup';\n\t/** Sets the horizontal alignment of the content. */\n\ttextAlign?: 'left' | 'center' | 'right';\n\t/** Sets the width of the column. */\n\twidth?: ResponsiveProp<string | number>;\n}>;\n\nexport const TableHeader = ({\n\tchildren,\n\ttextAlign = 'left',\n\twidth,\n\t...props\n}: TableHeaderProps) => {\n\treturn (\n\t\t<Box\n\t\t\tas=\"th\"\n\t\t\tcolor=\"text\"\n\t\t\tpadding={0.75}\n\t\t\tfontWeight=\"bold\"\n\t\t\tfocus\n\t\t\twidth={width}\n\t\t\tcss={{\n\t\t\t\ttextAlign,\n\t\t\t}}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</Box>\n\t);\n};\n","import { ReactNode } from 'react';\nimport { Text } from '../text';\n\nexport type TableCaptionProps = {\n\tchildren: ReactNode;\n};\n\nexport const TableCaption = ({ children }: TableCaptionProps) => {\n\treturn (\n\t\t<Text\n\t\t\tas=\"caption\"\n\t\t\tfontSize=\"md\"\n\t\t\tfontWeight=\"bold\"\n\t\t\tpaddingBottom={0.5}\n\t\t\tdisplay=\"table-caption\"\n\t\t\tcss={{\n\t\t\t\ttextAlign: 'left',\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</Text>\n\t);\n};\n","import { ReactNode } from 'react';\nimport { Box } from '../box';\n\nexport type TableHeadProps = { children: ReactNode };\n\nexport const TableHead = ({ children }: TableHeadProps) => {\n\treturn (\n\t\t<Box\n\t\t\tas=\"thead\"\n\t\t\tborderBottom\n\t\t\tborderBottomWidth=\"xl\"\n\t\t\tborderColor=\"muted\"\n\t\t\tdisplay=\"table-header-group\"\n\t\t>\n\t\t\t{children}\n\t\t</Box>\n\t);\n};\n","import { ReactNode } from 'react';\nimport { Box } from '../box';\n\nexport type TableBodyProps = { children: ReactNode };\n\nexport const TableBody = ({ children }: TableBodyProps) => {\n\treturn (\n\t\t<Box as=\"tbody\" display=\"table-row-group\">\n\t\t\t{children}\n\t\t</Box>\n\t);\n};\n","import { PropsWithChildren } from 'react';\nimport { Box } from '../box';\nimport { ResponsiveProp } from '../core';\n\nexport type TableCellProps = PropsWithChildren<{\n\t/** The HTML element to render. */\n\tas?: 'td' | 'th';\n\t/** Can be used to conditionally hide or show table cells at different breakpoints. */\n\tdisplay?: ResponsiveProp<'none' | 'table-cell'>;\n\t/** Essential if you are using TableCell as a row header (as=\"th\"). This defines the cells that the header (defined in the <th>) element relates to. */\n\tscope?: 'row' | 'rowgroup';\n\t/** Sets the horizontal alignment of the content. */\n\ttextAlign?: 'center' | 'left' | 'right';\n\t/** Sets the vertical alignment of the content. */\n\tverticalAlign?: 'top' | 'middle' | 'bottom';\n}>;\n\nexport const TableCell = ({\n\tas = 'td',\n\tchildren,\n\tdisplay,\n\tverticalAlign = 'top',\n\ttextAlign = 'left',\n\tscope,\n}: TableCellProps) => {\n\treturn (\n\t\t<Box\n\t\t\tas={as}\n\t\t\tpadding={0.75}\n\t\t\tborderBottom\n\t\t\tborderColor=\"muted\"\n\t\t\tcolor=\"text\"\n\t\t\tfontWeight=\"normal\"\n\t\t\tfocus\n\t\t\tdisplay={display}\n\t\t\tcss={{ verticalAlign, textAlign }}\n\t\t\tscope={scope}\n\t\t>\n\t\t\t{children}\n\t\t</Box>\n\t);\n};\n","import { ReactNode } from 'react';\n\nexport const TableWrapper = ({ children }: { children: ReactNode }) => {\n\treturn <div css={{ overflowX: 'auto' }}>{children}</div>;\n};\n"],"names":["Table","forwardRef","children","striped","tabIndex","tableLayout","ariaLabelledby","ariaDescribedby","id","ref","jsx","Box","boxPalette","TableHeader","textAlign","width","props","TableCaption","Text","TableHead","TableBody","TableCell","as","display","verticalAlign","scope","TableWrapper"],"mappings":"+JAmBO,MAAAA,EAAAC,EAAAA,WAAA,SAAA,CACN,SAAAC,EACC,QAAAC,EACA,SAAAC,EACA,YAAAC,EAAA,OACc,kBAAAC,EACK,mBAAAC,EACC,GAAAC,CAErB,EAAAC,EAAA,CAGA,OAAAC,EACCC,EAAC,CAAA,GAAA,QACG,IAAAF,EACH,SAAAL,EACA,SAAA,KACS,MAAA,GACJ,MAAA,OACC,QAAA,QACE,GAAAI,EACR,IAAA,CACK,eAAA,WACY,cAAA,EACD,YAAAH,EACf,mCAAA,CAEoC,gBAAAF,EAAAS,EAAA,gBAAA,aACqB,CACzD,EACD,kBAAAN,EACiB,mBAAAC,EACC,SAAAL,CAEjB,CAAA,CAGJ,CAAA,shCCzCO,MAAAW,EAAA,CAAA,CAAqB,SAAAX,EAC3B,UAAAY,EAAA,OACY,MAAAC,EACZ,GAAAC,CAED,IACCN,EACCC,EAAC,CAAA,GAAA,KACG,MAAA,OACG,QAAA,IACG,WAAA,OACE,MAAA,GACN,MAAAI,EACL,IAAA,CACK,UAAAD,CACJ,EACD,GAAAE,EACI,SAAAd,CAEH,CAAA,q4BC3BG,MAAAe,EAAA,CAAA,CAAA,SAAAf,KACNQ,EACCQ,EAAC,CAAA,GAAA,UACG,SAAA,KACM,WAAA,OACE,cAAA,GACI,QAAA,gBACP,IAAA,CACH,UAAA,MACO,EACZ,SAAAhB,CAEC,CAAA,8GCdG,MAAAiB,EAAA,CAAA,CAAA,SAAAjB,KACNQ,EACCC,EAAC,CAAA,GAAA,QACG,aAAA,GACS,kBAAA,KACM,YAAA,QACN,QAAA,qBACJ,SAAAT,CAEP,CAAA,wGCTG,MAAAkB,EAAA,CAAA,CAAA,SAAAlB,KACNQ,EAAAC,EAAA,CAAA,GAAA,QAAA,QAAA,kBAAA,SAAAT,CAAA,CAAA,wGCWM,MAAAmB,EAAA,CAAA,CAAmB,GAAAC,EAAA,KACpB,SAAApB,EACL,QAAAqB,EACA,cAAAC,EAAA,MACgB,UAAAV,EAAA,OACJ,MAAAW,CAEb,IACCf,EACCC,EAAC,CAAA,GAAAW,EACA,QAAA,IACS,aAAA,GACG,YAAA,QACA,MAAA,OACN,WAAA,SACK,MAAA,GACN,QAAAC,EACL,IAAA,CAAA,cAAAC,EAAA,UAAAV,CAAA,EACgC,MAAAW,EAChC,SAAAvB,CAEC,CAAA,moCCpCG,MAAAwB,EAAA,CAAA,CAAA,SAAAxB,KACNQ,EAAA,MAAA,CAAA,IAAA,CAAA,UAAA,MAAA,EAAA,SAAAR,CAAA,CAAA"}