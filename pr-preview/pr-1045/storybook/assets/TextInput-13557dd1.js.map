{"version":3,"file":"TextInput-13557dd1.js","sources":["../../../../packages/react/src/text-input/TextInput.tsx"],"sourcesContent":["import { forwardRef, InputHTMLAttributes } from 'react';\nimport { Field } from '../field';\nimport { packs, boxPalette, mapSpacing, tokens, FieldMaxWidth } from '../core';\n\ntype NativeInputProps = InputHTMLAttributes<HTMLInputElement>;\n\ntype BaseTextInputProps = {\n\tautoComplete?: NativeInputProps['autoComplete'];\n\tautoFocus?: NativeInputProps['autoFocus'];\n\tdisabled?: NativeInputProps['disabled'];\n\tid?: NativeInputProps['id'];\n\tinputMode?: NativeInputProps['inputMode'];\n\tname?: NativeInputProps['name'];\n\tonBlur?: NativeInputProps['onBlur'];\n\tonChange?: NativeInputProps['onChange'];\n\tonFocus?: NativeInputProps['onFocus'];\n\tpattern?: NativeInputProps['pattern'];\n\tplaceholder?: NativeInputProps['placeholder'];\n\tvalue?: NativeInputProps['value'];\n\ttype?: NativeInputProps['type'];\n};\n\nexport type TextInputProps = BaseTextInputProps & {\n\t/** Describes the purpose of the field. */\n\tlabel: string;\n\t/** If true, \"(optional)\" will never be appended to the label. */\n\thideOptionalLabel?: boolean;\n\t/** If false, \"(optional)\" will be appended to the label. */\n\trequired?: boolean;\n\t/** Provides extra information about the field. */\n\thint?: string;\n\t/** Message to show when the field is invalid. */\n\tmessage?: string;\n\t/** If true, the invalid state will be rendered. */\n\tinvalid?: boolean;\n\t/** If true, the field will stretch to the fill the width of its container. */\n\tblock?: boolean;\n\t/** The maximum width of the field. */\n\tmaxWidth?: FieldMaxWidth;\n};\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputProps>(\n\tfunction TextInput(\n\t\t{\n\t\t\tlabel,\n\t\t\thideOptionalLabel,\n\t\t\trequired,\n\t\t\thint,\n\t\t\tmessage,\n\t\t\tinvalid,\n\t\t\tblock,\n\t\t\tmaxWidth = 'md',\n\t\t\tid,\n\t\t\ttype = 'text',\n\t\t\t...props\n\t\t},\n\t\tref\n\t) {\n\t\tconst styles = textInputStyles({ block, maxWidth, invalid });\n\t\treturn (\n\t\t\t<Field\n\t\t\t\tlabel={label}\n\t\t\t\thideOptionalLabel={hideOptionalLabel}\n\t\t\t\trequired={Boolean(required)}\n\t\t\t\thint={hint}\n\t\t\t\tmessage={message}\n\t\t\t\tinvalid={invalid}\n\t\t\t\tid={id}\n\t\t\t>\n\t\t\t\t{(a11yProps) => (\n\t\t\t\t\t<input ref={ref} css={styles} {...a11yProps} type={type} {...props} />\n\t\t\t\t)}\n\t\t\t</Field>\n\t\t);\n\t}\n);\n\nexport const textInputStyles = ({\n\tblock,\n\tmaxWidth,\n\tinvalid,\n\tmultiline,\n}: {\n\tblock?: boolean;\n\tmaxWidth?: FieldMaxWidth;\n\tinvalid?: boolean;\n\tmultiline?: boolean;\n}) =>\n\t({\n\t\tappearance: 'none',\n\t\tboxSizing: 'border-box',\n\t\tpaddingLeft: mapSpacing(1),\n\t\tpaddingRight: mapSpacing(1),\n\t\tmargin: 0,\n\t\tbackground: boxPalette.backgroundBody,\n\t\tborderWidth: tokens.borderWidth.lg,\n\t\tborderStyle: 'solid',\n\t\tborderColor: boxPalette.border,\n\t\tborderRadius: tokens.borderRadius,\n\t\tcolor: boxPalette.foregroundText,\n\t\tfontFamily: tokens.font.body,\n\t\t...packs.input.md,\n\n\t\t...(maxWidth && {\n\t\t\tmaxWidth: tokens.maxWidth.field[maxWidth],\n\t\t}),\n\n\t\t...(block && {\n\t\t\tmaxWidth: 'none',\n\t\t\tdisplay: 'block',\n\t\t\twidth: '100%',\n\t\t}),\n\n\t\t...(invalid && {\n\t\t\tbackgroundColor: boxPalette.systemErrorMuted,\n\t\t\tborderColor: boxPalette.systemError,\n\t\t}),\n\n\t\t...(multiline && {\n\t\t\tpaddingTop: mapSpacing(0.5),\n\t\t\tpaddingBottom: mapSpacing(0.5),\n\t\t\theight: 'auto',\n\t\t\tminHeight: '6rem',\n\t\t}),\n\n\t\t'&:disabled': {\n\t\t\tcursor: 'not-allowed',\n\t\t\tborderColor: boxPalette.borderMuted,\n\t\t\tbackgroundColor: boxPalette.backgroundShade,\n\t\t\tcolor: boxPalette.foregroundMuted,\n\t\t},\n\n\t\t'&:focus': packs.outline,\n\t} as const);\n"],"names":["TextInput","forwardRef","label","hideOptionalLabel","required","hint","message","invalid","block","maxWidth","id","type","props","ref","styles","textInputStyles","jsx","Field","a11yProps","multiline","mapSpacing","boxPalette","tokens","packs"],"mappings":"kJAyCO,MAAAA,EAAAC,EAAA,WAAkB,SAAA,CAEvB,MAAAC,EACC,kBAAAC,EACA,SAAAC,EACA,KAAAC,EACA,QAAAC,EACA,QAAAC,EACA,MAAAC,EACA,SAAAC,EAAA,KACW,GAAAC,EACX,KAAAC,EAAA,OACO,GAAAC,CACJ,EAAAC,EAAA,CAIJ,MAAAC,EAAAC,EAAA,CAAA,MAAAP,EAAA,SAAAC,EAAA,QAAAF,CAAA,CAAA,EACA,OAAAS,EACCC,EAAC,CAAA,MAAAf,EACA,kBAAAC,EACA,SAAA,EAAAC,EAC0B,KAAAC,EAC1B,QAAAC,EACA,QAAAC,EACA,GAAAG,EACA,SAAAQ,GAAAF,EAAA,QAAA,CAAA,IAAAH,EAAA,IAAAC,EAAA,GAAAI,EAAA,KAAAP,EAAA,GAAAC,CAAA,CAAA,CAGqE,CAAA,CAEtE,CAGH,EAEOG,EAAA,CAAA,CAAyB,MAAAP,EAC/B,SAAAC,EACA,QAAAF,EACA,UAAAY,CAED,KAAA,CAME,WAAA,OACY,UAAA,aACD,YAAAC,EAAA,CAAA,EACc,aAAAA,EAAA,CAAA,EACC,OAAA,EAClB,WAAAC,EAAA,eACe,YAAAC,EAAA,YAAA,GACS,YAAA,QACnB,YAAAD,EAAA,OACW,aAAAC,EAAA,aACH,MAAAD,EAAA,eACH,WAAAC,EAAA,KAAA,KACM,GAAAC,EAAA,MAAA,GACT,GAAAd,GAAA,CAEC,SAAAa,EAAA,SAAA,MAAAb,CAAA,CACyB,EACzC,GAAAD,GAAA,CAEa,SAAA,OACF,QAAA,QACD,MAAA,MACF,EACR,GAAAD,GAAA,CAEe,gBAAAc,EAAA,iBACc,YAAAA,EAAA,WACJ,EACzB,GAAAF,GAAA,CAEiB,WAAAC,EAAA,EAAA,EACU,cAAAA,EAAA,EAAA,EACG,OAAA,OACrB,UAAA,MACG,EACZ,aAAA,CAEc,OAAA,cACL,YAAAC,EAAA,YACgB,gBAAAA,EAAA,gBACI,MAAAA,EAAA,eACV,EACnB,UAAAE,EAAA,OAGD"}