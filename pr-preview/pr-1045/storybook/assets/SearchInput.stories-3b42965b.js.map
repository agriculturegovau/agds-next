{"version":3,"file":"SearchInput.stories-3b42965b.js","sources":["../../../../packages/react/src/search-input/SearchInputContainer.tsx","../../../../packages/react/src/search-input/SearchInputClearButton.tsx","../../../../packages/react/src/search-input/SearchInputIcon.tsx","../../../../packages/react/src/search-input/SearchInput.tsx"],"sourcesContent":["import { PropsWithChildren } from 'react';\n\nexport type SearchInputContainerProps = PropsWithChildren<{\n\tmaxWidth?: string;\n}>;\n\nexport function SearchInputContainer({\n\tchildren,\n\tmaxWidth,\n}: SearchInputContainerProps) {\n\treturn <div css={{ position: 'relative', maxWidth }}>{children}</div>;\n}\n","import { MouseEventHandler } from 'react';\nimport { CloseIcon } from '../icon';\nimport { Flex } from '../box';\nimport { boxPalette, mapSpacing, tokens } from '../core';\n\nexport type SearchInputClearButtonProps = {\n\tdisabled?: boolean;\n\tonClick: MouseEventHandler<HTMLDivElement>;\n};\n\n// This component renders a `div` element and not a `button`\n// because it should not be focusable by keyboard users\n// See https://react-spectrum.adobe.com/react-spectrum/SearchField.html\n\nexport function SearchInputClearButton({\n\tdisabled,\n\tonClick,\n}: SearchInputClearButtonProps) {\n\treturn (\n\t\t<Flex\n\t\t\trole=\"button\"\n\t\t\talignItems=\"center\"\n\t\t\tjustifyContent=\"center\"\n\t\t\taria-label=\"Clear search\"\n\t\t\twidth=\"2rem\"\n\t\t\theight=\"2rem\"\n\t\t\tonClick={onClick}\n\t\t\tcss={{\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttop: '50%',\n\t\t\t\tright: `calc(${mapSpacing(0.5)} + ${tokens.borderWidth.lg}px)`, // Align from the inner border\n\t\t\t\ttransform: 'translateY(-50%)',\n\t\t\t\topacity: disabled ? 0.3 : undefined,\n\t\t\t\tcursor: 'pointer',\n\t\t\t\tcolor: boxPalette.foregroundAction,\n\t\t\t\t'&:hover': { color: boxPalette.foregroundText },\n\t\t\t}}\n\t\t>\n\t\t\t<CloseIcon size=\"sm\" weight=\"bold\" color=\"inherit\" />\n\t\t</Flex>\n\t);\n}\n","import { SearchIcon } from '../icon';\nimport { mapSpacing, tokens } from '../core';\n\nexport type SearchIconProps = { disabled?: boolean };\n\nexport function SearchInputIcon({ disabled }: SearchIconProps) {\n\treturn (\n\t\t<SearchIcon\n\t\t\tsize=\"md\"\n\t\t\tweight=\"regular\"\n\t\t\tcolor=\"muted\"\n\t\t\tcss={{\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttop: '50%',\n\t\t\t\tleft: `calc(${mapSpacing(1)} + ${tokens.borderWidth.lg}px)`, // Align from the inner border\n\t\t\t\ttransform: 'translateY(-50%)',\n\t\t\t\tpointerEvents: 'none',\n\t\t\t\topacity: disabled ? 0.3 : undefined,\n\t\t\t}}\n\t\t/>\n\t);\n}\n","import {\n\tforwardRef,\n\tInputHTMLAttributes,\n\tKeyboardEvent,\n\tuseRef,\n\tuseState,\n} from 'react';\nimport { Field } from '../field';\nimport { FieldMaxWidth, mergeRefs } from '../core';\nimport { textInputStyles } from '../text-input';\nimport { SearchInputContainer } from './SearchInputContainer';\nimport { SearchInputClearButton } from './SearchInputClearButton';\nimport { SearchInputIcon } from './SearchInputIcon';\n\ntype NativeInputProps = InputHTMLAttributes<HTMLInputElement>;\n\ntype BaseSearchInputProps = {\n\tautoFocus?: NativeInputProps['autoFocus'];\n\tdisabled?: NativeInputProps['disabled'];\n\tid?: NativeInputProps['id'];\n\tname?: NativeInputProps['name'];\n\tonBlur?: NativeInputProps['onBlur'];\n\tonFocus?: NativeInputProps['onFocus'];\n\tonChange?: (value: string) => void;\n\tvalue?: NativeInputProps['value'];\n};\n\nexport type SearchInputMaxWidth = Extract<FieldMaxWidth, 'md' | 'lg' | 'xl'>;\n\nexport type SearchInputProps = BaseSearchInputProps & {\n\t/** Describes the purpose of the field. */\n\tlabel: string;\n\t/** If true, \"(optional)\" will never be appended to the label. */\n\thideOptionalLabel?: boolean;\n\t/** If false, \"(optional)\" will be appended to the label. */\n\trequired?: boolean;\n\t/** Provides extra information about the field. */\n\thint?: string;\n\t/** Message to show when the field is invalid. */\n\tmessage?: string;\n\t/** If true, the invalid state will be rendered. */\n\tinvalid?: boolean;\n\t/** If true, the field will stretch to the fill the width of its container. */\n\tblock?: boolean;\n\t/** The maximum width of the field. */\n\tmaxWidth?: SearchInputMaxWidth;\n\t/** Function to be called when the input is cleared. */\n\tonClear?: () => void;\n};\n\nexport const SearchInput = forwardRef<HTMLInputElement, SearchInputProps>(\n\tfunction SearchInput(\n\t\t{\n\t\t\tlabel,\n\t\t\thideOptionalLabel,\n\t\t\trequired,\n\t\t\thint,\n\t\t\tmessage,\n\t\t\tinvalid,\n\t\t\tblock,\n\t\t\tmaxWidth: maxWidthProp = 'md',\n\t\t\tid,\n\t\t\tdisabled,\n\t\t\tvalue: valueProp,\n\t\t\tonChange: onChangeProp,\n\t\t\tonClear,\n\t\t\t...props\n\t\t},\n\t\tforwardedRef\n\t) {\n\t\tconst internalRef = useRef<HTMLInputElement>(null);\n\t\tconst [internalValue, setInternalValue] = useState(valueProp || '');\n\n\t\tconst value = typeof valueProp === 'string' ? valueProp : internalValue;\n\n\t\tconst onChange = (value: string) => {\n\t\t\tonChangeProp?.(value);\n\t\t\tsetInternalValue(value);\n\t\t};\n\n\t\t// Clears the input while also triggering the `onChange` event to consumers\n\t\tconst clearInput = () => {\n\t\t\tif (!value) return;\n\t\t\tonChange('');\n\t\t\tonClear?.();\n\t\t\tinternalRef.current?.focus();\n\t\t};\n\n\t\t// Clear the input if the user presses the escape key\n\t\tconst onKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n\t\t\tif (e.code !== 'Escape') return;\n\t\t\tclearInput();\n\t\t};\n\n\t\tconst showClearButton = Boolean(value);\n\n\t\tconst [maxWidth, styles] = searchInputStyles({\n\t\t\tblock,\n\t\t\tmaxWidth: maxWidthProp,\n\t\t\tinvalid,\n\t\t\tshowClearButton,\n\t\t});\n\n\t\treturn (\n\t\t\t<Field\n\t\t\t\tlabel={label}\n\t\t\t\thideOptionalLabel={hideOptionalLabel}\n\t\t\t\trequired={Boolean(required)}\n\t\t\t\thint={hint}\n\t\t\t\tmessage={message}\n\t\t\t\tinvalid={invalid}\n\t\t\t\tid={id}\n\t\t\t>\n\t\t\t\t{(a11yProps) => (\n\t\t\t\t\t<SearchInputContainer maxWidth={maxWidth}>\n\t\t\t\t\t\t<SearchInputIcon disabled={disabled} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tref={mergeRefs([internalRef, forwardedRef])}\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\tonChange={(e) => onChange(e.target.value)}\n\t\t\t\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t\t\t\t\tcss={styles}\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t{...a11yProps}\n\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{showClearButton ? (\n\t\t\t\t\t\t\t<SearchInputClearButton\n\t\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\t\tonClick={clearInput}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</SearchInputContainer>\n\t\t\t\t)}\n\t\t\t</Field>\n\t\t);\n\t}\n);\n\nfunction searchInputStyles({\n\tblock,\n\tmaxWidth: maxWidthProp,\n\tinvalid,\n\tshowClearButton,\n}: {\n\tblock?: boolean;\n\tmaxWidth: NonNullable<SearchInputMaxWidth>;\n\tinvalid?: boolean;\n\tshowClearButton: boolean;\n}) {\n\tconst { maxWidth, ...baseStyles } = textInputStyles({\n\t\tblock,\n\t\tmaxWidth: maxWidthProp,\n\t\tinvalid,\n\t});\n\treturn [\n\t\tmaxWidth,\n\t\t{\n\t\t\t...baseStyles,\n\t\t\twidth: '100%',\n\t\t\tmaxWidth: undefined,\n\n\t\t\tpaddingLeft: '3rem',\n\t\t\t...(showClearButton && { paddingRight: '3rem' }),\n\n\t\t\t'&::-webkit-search-decoration, &::-webkit-search-cancel-button, &::-webkit-search-results-button, &::-webkit-search-results-decoration':\n\t\t\t\t{ display: 'none' },\n\t\t},\n\t] as const;\n}\n"],"names":["SearchInputContainer","children","maxWidth","jsx","SearchInputClearButton","disabled","onClick","Flex","mapSpacing","tokens","boxPalette","CloseIcon","SearchInputIcon","SearchIcon","SearchInput","forwardRef","label","hideOptionalLabel","required","hint","message","invalid","block","maxWidthProp","id","valueProp","onChangeProp","onClear","props","forwardedRef","internalRef","useRef","internalValue","setInternalValue","useState","value","onChange","value2","clearInput","_a","onKeyDown","e","showClearButton","styles","searchInputStyles","Field","a11yProps","jsxs","mergeRefs","baseStyles","textInputStyles"],"mappings":"ydAMO,SAAAA,EAAA,CAA8B,SAAAC,EACpC,SAAAC,CAED,EAAA,CACC,OAAAC,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,WAAA,SAAAD,CAAA,EAAA,SAAAD,CAAA,CAAA,CACD,yNCGO,SAAAG,EAAA,CAAgC,SAAAC,EACtC,QAAAC,CAED,EAAA,CACC,OAAAH,EACCI,GAAC,CAAA,KAAA,SACK,WAAA,SACM,eAAA,SACI,aAAA,eACJ,MAAA,OACL,OAAA,OACC,QAAAD,EACP,IAAA,CACK,SAAA,WACM,IAAA,MACL,MAAA,QAAAE,GAAA,EAAA,OAAAC,GAAA,YAAA,QACkD,UAAA,mBAC5C,QAAAJ,EAAA,GAAA,OACe,OAAA,UAClB,MAAAK,EAAA,iBACU,UAAA,CAAA,MAAAA,EAAA,cAAA,CAC4B,EAC/C,SAAAP,EAAAQ,GAAA,CAAA,KAAA,KAAA,OAAA,OAAA,MAAA,UAAA,CAEmD,CAAA,CAGtD,oVCpCO,SAAAC,EAAA,CAAA,SAAAP,GAAA,CACN,OAAAF,EACCU,GAAC,CAAA,KAAA,KACK,OAAA,UACE,MAAA,QACD,IAAA,CACD,SAAA,WACM,IAAA,MACL,KAAA,QAAAL,GAAA,CAAA,OAAAC,GAAA,YAAA,QAC+C,UAAA,mBACzC,cAAA,OACI,QAAAJ,EAAA,GAAA,MACW,CAC3B,CAAA,CAGH,gNC6BO,MAAAS,EAAAC,EAAA,WAAoB,SAAA,CAEzB,MAAAC,EACC,kBAAAC,EACA,SAAAC,EACA,KAAAC,EACA,QAAAC,EACA,QAAAC,EACA,MAAAC,GACA,SAAAC,GAAA,KACyB,GAAAC,GACzB,SAAAnB,EACA,MAAAoB,EACO,SAAAC,EACG,QAAAC,EACV,GAAAC,EACG,EAAAC,GAAA,CAIJ,MAAAC,EAAAC,SAAA,IAAA,EACA,CAAAC,GAAAC,EAAA,EAAAC,EAAAA,SAAAT,GAAA,EAAA,EAEAU,EAAA,OAAAV,GAAA,SAAAA,EAAAO,GAEAI,EAAAC,GAAA,CACCX,GAAA,MAAAA,EAAAW,GACAJ,GAAAI,CAAA,CAAsB,EAIvBC,EAAA,IAAA,OACCH,IACAC,EAAA,EAAA,EACAT,GAAA,MAAAA,KACAY,EAAAT,EAAA,UAAA,MAAAS,EAAA,QAA2B,EAI5BC,GAAAC,GAAA,CACCA,EAAA,OAAA,UACAH,GAAW,EAGZI,EAAA,EAAAP,EAEA,CAAAjC,GAAAyC,EAAA,EAAAC,GAAA,CAA6C,MAAAtB,GAC5C,SAAAC,GACU,QAAAF,EACV,gBAAAqB,CACA,CAAA,EAGD,OAAAvC,EACC0C,GAAC,CAAA,MAAA7B,EACA,kBAAAC,EACA,SAAA,EAAAC,EAC0B,KAAAC,EAC1B,QAAAC,EACA,QAAAC,EACA,GAAAG,GACA,SAAAsB,GAAAC,GAAA/C,EAAA,CAAA,SAAAE,GAAA,SAAA,CAIEC,EAAAS,EAAA,CAAA,SAAAP,EAAA,EAAqCF,EACrC,QAAC,CAAA,IAAA6C,GAAA,CAAAlB,EAAAD,EAAA,CAAA,EAC0C,KAAA,SACrC,SAAAxB,EACL,MAAA8B,EACA,SAAAM,IAAAL,EAAAK,GAAA,OAAA,KAAA,EACwC,UAAAD,GACxC,IAAAG,GACK,aAAA,MACQ,GAAAG,EACT,GAAAlB,EACA,CAAA,EACLc,EAAAvC,EAECC,EAAC,CAAA,SAAAC,EACA,QAAAiC,CACS,CAAA,EAAA,IAEP,EAAA,CACL,CAAA,CAEF,CAGH,EAEA,SAAAM,GAAA,CAA2B,MAAAtB,EAC1B,SAAAC,EACU,QAAAF,EACV,gBAAAqB,CAED,EAAA,CAMC,KAAA,CAAA,SAAAxC,EAAA,GAAA+C,CAAA,EAAAC,GAAA,CAAoD,MAAA5B,EACnD,SAAAC,EACU,QAAAF,CACV,CAAA,EAED,MAAA,CAAOnB,EACN,CACA,GAAA+C,EACI,MAAA,OACI,SAAA,OACG,YAAA,OAEG,GAAAP,GAAA,CAAA,aAAA,MAAA,EACiC,wIAAA,CAAA,QAAA,MAAA,CAG3B,CACpB,CAEF;;;;;;;;;;;;;;;;;"}