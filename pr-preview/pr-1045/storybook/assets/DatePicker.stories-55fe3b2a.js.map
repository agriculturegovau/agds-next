{"version":3,"file":"DatePicker.stories-55fe3b2a.js","sources":["../../../../packages/react/src/date-picker/DatePicker.tsx"],"sourcesContent":["import {\n\tChangeEvent,\n\tInputHTMLAttributes,\n\tRef,\n\tuseCallback,\n\tuseEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n} from 'react';\nimport { usePopper } from 'react-popper';\nimport { SelectSingleEventHandler } from 'react-day-picker';\nimport { FieldMaxWidth, useClickOutside, useTernaryState } from '../core';\nimport { CalendarSingle } from './Calendar';\nimport { DateInput } from './DatePickerInput';\nimport {\n\tparseDate,\n\tformatDate,\n\tconstrainDate,\n\ttransformValuePropToInputValue,\n} from './utils';\n\ntype NativeInputProps = InputHTMLAttributes<HTMLInputElement>;\n\ntype BaseTextInputProps = {\n\tautoComplete?: NativeInputProps['autoComplete'];\n\tautoFocus?: NativeInputProps['autoFocus'];\n\tdisabled?: NativeInputProps['disabled'];\n\tid?: NativeInputProps['id'];\n\tname?: NativeInputProps['name'];\n\tonBlur?: NativeInputProps['onBlur'];\n\tonFocus?: NativeInputProps['onFocus'];\n};\n\nexport type DatePickerInputProps = BaseTextInputProps & {\n\t/** Describes the purpose of the field. */\n\tlabel: string;\n\t/** If true, \"(optional)\" will never be appended to the label. */\n\thideOptionalLabel?: boolean;\n\t/** If false, \"(optional)\" will be appended to the label. */\n\trequired?: boolean;\n\t/** Provides extra information about the field. */\n\thint?: string;\n\t/** Message to show when the field is invalid. */\n\tmessage?: string;\n\t/** If true, the invalid state will be rendered. */\n\tinvalid?: boolean;\n\t/** If true, the field will stretch to the fill the width of its container. */\n\tblock?: boolean;\n\t/** The maximum width of the field. */\n\tmaxWidth?: Extract<FieldMaxWidth, 'md' | 'lg' | 'xl'>;\n};\n\ntype DatePickerCalendarProps = {\n\t/** If set, any days before this date will not be selectable. */\n\tminDate?: Date;\n\t/** If set, any days after this date will not be selectable. */\n\tmaxDate?: Date;\n\t/** The calendar month to initially show if no value is set. */\n\tinitialMonth?: Date;\n\t/** The range of options to display in calendar year select. */\n\tyearRange?: { from: number; to: number };\n};\n\ntype DatePickerBaseProps = {\n\t/** The value of the field. */\n\tvalue: Date | string | undefined;\n\t/** Function to be fired following a change event. */\n\tonChange: (day: Date | undefined) => void;\n\t/** Function to be fired when the input value is updated. */\n\tonInputChange?: (inputValue: string) => void;\n\t/** Ref to the input element. */\n\tinputRef?: Ref<HTMLInputElement>;\n};\n\nexport type DatePickerProps = DatePickerInputProps &\n\tDatePickerCalendarProps &\n\tDatePickerBaseProps;\n\nexport const DatePicker = ({\n\tvalue,\n\tonChange,\n\tonInputChange: onInputChangeProp,\n\tminDate,\n\tmaxDate,\n\tinitialMonth,\n\tyearRange,\n\tinputRef,\n\tinvalid = false,\n\tmaxWidth = 'md',\n\t...props\n}: DatePickerProps) => {\n\tconst [isCalendarOpen, openCalendar, closeCalendar] = useTernaryState(false);\n\n\t// Popper state\n\tconst triggerRef = useRef<HTMLButtonElement>(null);\n\tconst [refEl, setRefEl] = useState<HTMLDivElement | null>(null);\n\tconst [popperEl, setPopperEl] = useState<HTMLDivElement | null>(null);\n\tconst { styles, attributes } = usePopper(refEl, popperEl, {\n\t\tplacement: 'bottom-start',\n\t\tmodifiers: [{ name: 'offset', options: { offset: [0, 8] } }],\n\t});\n\n\tconst onSelect = useCallback<SelectSingleEventHandler>(\n\t\t(_, selectedDay, modifiers) => {\n\t\t\t// If the day is disabled, do nothing\n\t\t\tif (modifiers.disabled) return;\n\t\t\t// Update the input field with the selected day\n\t\t\tsetInputValue(formatDate(selectedDay));\n\t\t\t// Trigger the callback\n\t\t\tonChange(selectedDay);\n\t\t\t// Close the calendar and focus the calendar icon\n\t\t\tcloseCalendar();\n\t\t},\n\t\t[onChange, closeCalendar]\n\t);\n\n\tconst [inputValue, setInputValue] = useState(\n\t\ttransformValuePropToInputValue(value)\n\t);\n\n\tconst onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t// Update the UI immediately\n\t\tconst inputValue = e.target.value;\n\t\tsetInputValue(inputValue);\n\n\t\t// Attempt to parse the date using the text input value\n\t\tconst parsedDate = parseDate(inputValue);\n\t\tconst constrainedDate = constrainDate(parsedDate, minDate, maxDate);\n\n\t\t// When there is no value OR there is a valid date, only trigger the `onChange` callback\n\t\t// `onInputChange` will not be called\n\t\tif (!inputValue || constrainedDate) {\n\t\t\tonChange(constrainedDate);\n\t\t\treturn;\n\t\t}\n\n\t\tonChange(constrainedDate);\n\t\tonInputChangeProp?.(inputValue);\n\t};\n\n\t// Update the text input when the value updates\n\tuseEffect(() => {\n\t\tsetInputValue(transformValuePropToInputValue(value));\n\t}, [value]);\n\n\t// Close the calendar when the user clicks outside\n\tconst clickOutsideRef = useRef(popperEl);\n\tclickOutsideRef.current = popperEl;\n\n\tconst handleClickOutside = useCallback(() => {\n\t\tif (isCalendarOpen) closeCalendar();\n\t}, [isCalendarOpen, closeCalendar]);\n\n\tuseClickOutside(clickOutsideRef, handleClickOutside);\n\n\t// Close the calendar when the user presses the escape key\n\tuseEffect(() => {\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\t\tif (isCalendarOpen && e.code === 'Escape') {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\t// Close the calendar and focus the calendar icon\n\t\t\t\tcloseCalendar();\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('keydown', handleKeyDown);\n\t\treturn () => window.removeEventListener('keydown', handleKeyDown);\n\t}, [isCalendarOpen, closeCalendar]);\n\n\tconst disabledCalendarDays = useMemo(() => {\n\t\tif (!(minDate || maxDate)) return;\n\t\treturn [\n\t\t\tminDate ? { before: minDate } : undefined,\n\t\t\tmaxDate ? { after: maxDate } : undefined,\n\t\t].filter((x): x is NonNullable<typeof x> => Boolean(x));\n\t}, [minDate, maxDate]);\n\n\tconst valueAsDateOrUndefined = typeof value === 'string' ? undefined : value;\n\n\treturn (\n\t\t<div ref={setRefEl}>\n\t\t\t<DateInput\n\t\t\t\t{...props}\n\t\t\t\tmaxWidth={maxWidth}\n\t\t\t\tinvalid={{ field: invalid, input: invalid }}\n\t\t\t\tref={inputRef}\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={onInputChange}\n\t\t\t\tbuttonRef={triggerRef}\n\t\t\t\tbuttonOnClick={openCalendar}\n\t\t\t/>\n\t\t\t{isCalendarOpen ? (\n\t\t\t\t<div\n\t\t\t\t\tref={setPopperEl}\n\t\t\t\t\tstyle={styles.popper}\n\t\t\t\t\t{...attributes.popper}\n\t\t\t\t\tcss={{ zIndex: 1 }}\n\t\t\t\t>\n\t\t\t\t\t<CalendarSingle\n\t\t\t\t\t\tinitialFocus\n\t\t\t\t\t\tselected={valueAsDateOrUndefined}\n\t\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\t\tdefaultMonth={valueAsDateOrUndefined || initialMonth}\n\t\t\t\t\t\tyearRange={yearRange}\n\t\t\t\t\t\tnumberOfMonths={1}\n\t\t\t\t\t\tdisabled={disabledCalendarDays}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n"],"names":["DatePicker","value","onChange","onInputChangeProp","minDate","maxDate","initialMonth","yearRange","inputRef","invalid","maxWidth","props","isCalendarOpen","openCalendar","closeCalendar","useTernaryState","triggerRef","useRef","refEl","setRefEl","useState","popperEl","setPopperEl","styles","attributes","usePopper","onSelect","useCallback","_","selectedDay","modifiers","setInputValue","formatDate","inputValue","transformValuePropToInputValue","onInputChange","e","inputValue2","parsedDate","parseDate","constrainedDate","constrainDate","useEffect","clickOutsideRef","handleClickOutside","useClickOutside","handleKeyDown","disabledCalendarDays","useMemo","x","valueAsDateOrUndefined","jsxs","jsx","DateInput","CalendarSingle"],"mappings":"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"}