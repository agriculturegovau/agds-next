{"version":3,"file":"useId-9773510a.js","sources":["../../../../packages/react/src/core/utils/useId/canUseDom.ts","../../../../packages/react/src/core/utils/useId/useIsomorphicLayoutEffect.ts","../../../../packages/react/src/core/utils/useId/useId.ts"],"sourcesContent":["// The contents of this file has been copied from https://github.com/reach/reach-ui/blob/dev/packages/utils/src/can-use-dom.ts\n\nexport function canUseDOM() {\n\treturn !!(\n\t\ttypeof window !== 'undefined' &&\n\t\twindow.document &&\n\t\twindow.document.createElement\n\t);\n}\n","// The contents of this file has been copied from https://github.com/reach/reach-ui/blob/dev/packages/utils/src/use-isomorphic-layout-effect.ts\n\nimport { useEffect, useLayoutEffect } from 'react';\nimport { canUseDOM } from './canUseDom';\n\n/**\n * React currently throws a warning when using useLayoutEffect on the server. To\n * get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect in the browser. We occasionally need useLayoutEffect to\n * ensure we don't get a render flash for certain operations, but we may also\n * need affected components to render on the server. One example is when setting\n * a component's descendants to retrieve their index values.\n *\n * Important to note that using this hook as an escape hatch will break the\n * eslint dependency warnings unless you rename the import to `useLayoutEffect`.\n * Use sparingly only when the effect won't effect the rendered HTML to avoid\n * any server/client mismatch.\n *\n * If a useLayoutEffect is needed and the result would create a mismatch, it's\n * likely that the component in question shouldn't be rendered on the server at\n * all, so a better approach would be to lazily render those in a parent\n * component after client-side hydration.\n *\n * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js\n *\n * @param effect\n * @param deps\n */\nexport const useIsomorphicLayoutEffect = canUseDOM()\n\t? useLayoutEffect\n\t: useEffect;\n","/**\n * This file use to just be a simple re-export of `useId` from @reach/auto-id\n * We can not just use `useId` from React as we need to provide support for React 16, 17 and 18\n *\n * As Reach is no longer being maintained and does not support React 18, the contents of this file have been copied from:\n * https://github.com/reach/reach-ui/blob/dev/packages/auto-id/src/reach-auto-id.ts\n *\n * See Github issue: https://github.com/reach/reach-ui/issues/972\n */\n\n/**\n * Welcome to @reach/auto-id!\n * Let's see if we can make sense of why this hook exists and its\n * implementation.\n *\n * Some background:\n *   1. Accessibility APIs rely heavily on element IDs\n *   2. Requiring developers to put IDs on every element in Reach UI is both\n *      cumbersome and error-prone\n *   3. With a component model, we can generate IDs for them!\n *\n * Solution 1: Generate random IDs.\n *\n * This works great as long as you don't server render your app. When React (in\n * the client) tries to reuse the markup from the server, the IDs won't match\n * and React will then recreate the entire DOM tree.\n *\n * Solution 2: Increment an integer\n *\n * This sounds great. Since we're rendering the exact same tree on the server\n * and client, we can increment a counter and get a deterministic result between\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\n * pretty sure the tab will be closed before an app never needs\n * 10 quadrillion IDs!\n *\n * Problem solved, right?\n *\n * Ah, but there's a catch! React's concurrent rendering makes this approach\n * non-deterministic. While the client and server will end up with the same\n * elements in the end, depending on suspense boundaries (and possibly some user\n * input during the initial render) the incrementing integers won't always match\n * up.\n *\n * Solution 3: Don't use IDs at all on the server; patch after first render.\n *\n * What we've done here is solution 2 with some tricks. With this approach, the\n * ID returned is an empty string on the first render. This way the server and\n * client have the same markup no matter how wild the concurrent rendering may\n * have gotten.\n *\n * After the render, we patch up the components with an incremented ID. This\n * causes a double render on any components with `useId`. Shouldn't be a problem\n * since the components using this hook should be small, and we're only updating\n * the ID attribute on the DOM, nothing big is happening.\n *\n * It doesn't have to be an incremented number, though--we could do generate\n * random strings instead, but incrementing a number is probably the cheapest\n * thing we can do.\n *\n * Additionally, we only do this patchup on the very first client render ever.\n * Any calls to `useId` that happen dynamically in the client will be\n * populated immediately with a value. So, we only get the double render after\n * server hydration and never again, SO BACK OFF ALRIGHT?\n */\n\n/* eslint-disable react-hooks/rules-of-hooks */\n\nimport * as React from 'react';\nimport { useIsomorphicLayoutEffect as useLayoutEffect } from './useIsomorphicLayoutEffect';\n\nlet serverHandoffComplete = false;\nlet id = 0;\nfunction genId() {\n\treturn ++id;\n}\n\n// Workaround for https://github.com/webpack/webpack/issues/14814\n// https://github.com/eps1lon/material-ui/blob/8d5f135b4d7a58253a99ab56dce4ac8de61f5dc1/packages/mui-utils/src/useId.ts#L21\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst maybeReactUseId: undefined | (() => string) = (React as any)[\n\t'useId'.toString()\n];\n\n/**\n * useId\n *\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\n *\n * Note: The returned ID will initially be `null` and will update after a\n * component mounts. Users may need to supply their own ID if they need\n * consistent values for SSR.\n *\n * @see Docs https://reach.tech/auto-id\n */\nfunction useId(idFromProps: string): string;\nfunction useId(idFromProps: number): number;\nfunction useId(idFromProps: string | number): string | number;\nfunction useId(idFromProps: string | undefined | null): string | undefined;\nfunction useId(idFromProps: number | undefined | null): number | undefined;\nfunction useId(\n\tidFromProps: string | number | undefined | null\n): string | number | undefined;\nfunction useId(): string | undefined;\n\nfunction useId(providedId?: number | string | undefined | null) {\n\tif (maybeReactUseId !== undefined) {\n\t\tconst generatedId = maybeReactUseId();\n\t\treturn providedId ?? generatedId;\n\t}\n\n\t// If this instance isn't part of the initial render, we don't have to do the\n\t// double render/patch-up dance. We can just generate the ID and return it.\n\tconst initialId = providedId ?? (serverHandoffComplete ? genId() : null);\n\tconst [id, setId] = React.useState(initialId);\n\n\tuseLayoutEffect(() => {\n\t\tif (id === null) {\n\t\t\t// Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n\t\t\t// rendering flicker, though it'll make the first render slower (unlikely\n\t\t\t// to matter, but you're welcome to measure your app and let us know if\n\t\t\t// it's a problem).\n\t\t\tsetId(genId());\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tReact.useEffect(() => {\n\t\tif (serverHandoffComplete === false) {\n\t\t\t// Flag all future uses of `useId` to skip the update dance. This is in\n\t\t\t// `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n\t\t\t// accidentally bail out of the patch-up dance prematurely.\n\t\t\tserverHandoffComplete = true;\n\t\t}\n\t}, []);\n\n\treturn providedId ?? id ?? undefined;\n}\n\nexport { useId };\n"],"names":["canUseDOM","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","serverHandoffComplete","id","genId","maybeReactUseId","React","useId","providedId","generatedId","initialId","setId","React.useState","React.useEffect"],"mappings":"0CAEO,SAASA,GAAY,CACpB,MAAA,CAAC,EACP,OAAO,OAAW,KAClB,OAAO,UACP,OAAO,SAAS,cAElB,CCqBa,MAAAC,EAA4BD,IACtCE,EAAAA,gBACAC,EAAA,UCuCH,IAAIC,EAAwB,GACxBC,EAAK,EACT,SAASC,GAAQ,CAChB,MAAO,EAAED,CACV,CAKA,MAAME,EAA+CC,EACpD,QAAQ,SACT,CAAA,EAuBA,SAASC,EAAMC,EAAiD,CAC/D,GAAIH,IAAoB,OAAW,CAClC,MAAMI,EAAcJ,IACpB,OAAOG,GAAcC,EAKtB,MAAMC,EAAYF,IAAeN,EAAwBE,EAAU,EAAA,MAC7D,CAACD,EAAIQ,CAAK,EAAIC,WAAeF,CAAS,EAE5CV,OAAAA,EAAgB,IAAM,CACjBG,IAAO,MAKVQ,EAAMP,GAAO,CAGf,EAAG,CAAE,CAAA,EAELS,EAAAA,UAAgB,IAAM,CACjBX,IAA0B,KAILA,EAAA,GAE1B,EAAG,CAAE,CAAA,EAEEM,GAAcL,GAAM,MAC5B"}