import{j as N}from"./Box-3d8e40b9.js";import{C as P}from"./ComboboxAsync-8de82c85.js";import"./index-42611d8b.js";import"./_commonjsHelpers-042e6b4d.js";import"./index-4d501b15.js";import"./tslib.es6-84d3bb3f.js";import"./usePopper-f1eff677.js";import"./mergeRefs-868b543a.js";import"./TextInput-13557dd1.js";import"./Field-e0f2f949.js";import"./useId-9773510a.js";import"./Stack-88a94cf9.js";import"./Text-76115ace.js";import"./WebsiteIcon-80d17c8d.js";import"./CalendarIcon-ece56b40.js";import"./LoadingBlanket-4dd64634.js";import"./Content-29d7ac08.js";import"./BaseContent-ae52486a.js";import"./PageContent-3c0ee326.js";import"./SectionContent-ef29e939.js";import"./ContentBleed-5d827cf1.js";import"./react-spring-web.esm-92c11c75.js";import"./index-7a46b491.js";import"./VisuallyHidden-9a073e6e.js";import"./Button-5675b78b.js";import"./ButtonGroup-d4eeb7ce.js";function p(t){return N(P,{...t,showDropdownTrigger:!1,clearable:!0,emptyResultsMessage:"No results found."})}try{p.displayName="Autocomplete",p.__docgenInfo={description:"",displayName:"Autocomplete",props:{label:{defaultValue:null,description:"Describes the purpose of the field.",name:"label",required:!0,type:{name:"string"}},hideOptionalLabel:{defaultValue:null,description:'If true, "(optional)" will never be appended to the label.',name:"hideOptionalLabel",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:'If false, "(optional)" will be appended to the label.',name:"required",required:!1,type:{name:"boolean"}},hint:{defaultValue:null,description:"Provides extra information about the field.",name:"hint",required:!1,type:{name:"string"}},message:{defaultValue:null,description:"Message to show when the field is invalid.",name:"message",required:!1,type:{name:"string"}},invalid:{defaultValue:null,description:"If true, the invalid state will be rendered.",name:"invalid",required:!1,type:{name:"boolean"}},block:{defaultValue:null,description:"If true, the field will stretch to the fill the width of its container.",name:"block",required:!1,type:{name:"boolean"}},maxWidth:{defaultValue:null,description:"The maximum width of the field.",name:"maxWidth",required:!1,type:{name:"enum",value:[{value:'"md"'},{value:'"lg"'},{value:'"xl"'}]}},disabled:{defaultValue:null,description:"If true, the field will not be interactive.",name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Defines an identifier (ID) which must be unique.",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"A string specifying a name for the input control.",name:"name",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Function to be fired following a change event.",name:"onChange",required:!1,type:{name:"((value: Option | null) => void)"}},value:{defaultValue:null,description:"The value of the field.",name:"value",required:!1,type:{name:"DefaultComboboxOption | null"}},renderItem:{defaultValue:null,description:"Used to override the default item rendering.",name:"renderItem",required:!1,type:{name:"((item: Option, inputValue: string) => ReactNode)"}},loadOptions:{defaultValue:null,description:"Function to be used when options need to be loaded over the network.",name:"loadOptions",required:!0,type:{name:"(inputValue: string) => Promise<Option[]>"}}}}}catch{}const ue={title:"forms/Autocomplete",component:p},e={label:"Find your state",hint:"Start typing to see results",loadOptions:async function(){return await new Promise(m=>setTimeout(m,1e3)),[{label:"Australian Capital Territory",value:"act"},{label:"New South Wales",value:"nsw"},{label:"Northern Territory",value:"nt"},{label:"Queensland",value:"qld"},{label:"South Australia",value:"sa"},{label:"Tasmania",value:"tas"},{label:"Victoria",value:"vic"},{label:"Western Australia",value:"wa"}]}},a=t=>N(p,{...t}),r=a.bind({});r.args={...e};const o=a.bind({});o.args={...e,required:!0};const l=a.bind({});l.args={...e,hideOptionalLabel:!0};const i=a.bind({});i.args={...e,disabled:!0};const s=a.bind({});s.args={...e,invalid:!0,message:"City is required"};const n=a.bind({});n.args={...e,block:!0};const u=a.bind({});u.args={...e,hideOptionalLabel:!0,label:"Pick a Star Wars character",loadOptions:async function(m){return(await fetch(`https://swapi.dev/api/people/?search=${m}`).then(d=>d.json())).results.map(d=>({label:d.name,value:d.name}))}};var c,f,b;r.parameters={...r.parameters,docs:{...(c=r.parameters)==null?void 0:c.docs,source:{originalSource:"args => <Autocomplete {...args} />",...(b=(f=r.parameters)==null?void 0:f.docs)==null?void 0:b.source}}};var g,h,v;o.parameters={...o.parameters,docs:{...(g=o.parameters)==null?void 0:g.docs,source:{originalSource:"args => <Autocomplete {...args} />",...(v=(h=o.parameters)==null?void 0:h.docs)==null?void 0:v.source}}};var y,q,w;l.parameters={...l.parameters,docs:{...(y=l.parameters)==null?void 0:y.docs,source:{originalSource:"args => <Autocomplete {...args} />",...(w=(q=l.parameters)==null?void 0:q.docs)==null?void 0:w.source}}};var A,V,O;i.parameters={...i.parameters,docs:{...(A=i.parameters)==null?void 0:A.docs,source:{originalSource:"args => <Autocomplete {...args} />",...(O=(V=i.parameters)==null?void 0:V.docs)==null?void 0:O.source}}};var I,x,S;s.parameters={...s.parameters,docs:{...(I=s.parameters)==null?void 0:I.docs,source:{originalSource:"args => <Autocomplete {...args} />",...(S=(x=s.parameters)==null?void 0:x.docs)==null?void 0:S.source}}};var _,T,k;n.parameters={...n.parameters,docs:{...(_=n.parameters)==null?void 0:_.docs,source:{originalSource:"args => <Autocomplete {...args} />",...(k=(T=n.parameters)==null?void 0:T.docs)==null?void 0:k.source}}};var C,D,L;u.parameters={...u.parameters,docs:{...(C=u.parameters)==null?void 0:C.docs,source:{originalSource:"args => <Autocomplete {...args} />",...(L=(D=u.parameters)==null?void 0:D.docs)==null?void 0:L.source}}};const de=["Basic","Required","HideOptionalLabel","Disabled","Invalid","Block","ExternalAPI"];export{r as Basic,n as Block,i as Disabled,u as ExternalAPI,l as HideOptionalLabel,s as Invalid,o as Required,de as __namedExportsOrder,ue as default};
//# sourceMappingURL=Autocomplete.stories-400d1888.js.map
