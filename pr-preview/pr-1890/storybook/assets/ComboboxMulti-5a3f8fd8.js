import{j as M}from"./responsive-123a9343.js";import{r as o}from"./index-3b9dd0eb.js";import{a as l,u as a}from"./ComboboxBase-68405d13.js";import{C as E}from"./ComboboxMultiBase-55ecdd36.js";import{u as S,f as O}from"./ComboboxListItem-50db01ca.js";function H({block:b=!0,id:I,value:m,onChange:u,options:f,...T}){const[d,h]=o.useState(""),g=S(I),[w,v]=o.useState([]),r=typeof m>"u"?w:m,p=o.useCallback(t=>{v(t),u==null||u(t)},[u]),y=o.useMemo(()=>O(f,d,r),[f,d,r]),n=o.useRef([]),q=l({selectedItems:r,getA11yStatusMessage:t=>{const{selectedItems:e}=t;if(e.length===n.current.length)return n.current=e,"";if(e.length>n.current.length){const i=e.find(c=>n.current.findIndex(C=>C.value===c.value)<0);return n.current=e,`${(i==null?void 0:i.label)||"An item"} has been added.`}if(e.length===0&&n.current.length>0)return n.current=e,"All items have been removed.";const s=n.current.find(i=>e.findIndex(c=>c.value===i.value)<0);return n.current=e,`${(s==null?void 0:s.label)||"An item"} has been removed.`},onStateChange({selectedItems:t,type:e}){switch(e){case l.stateChangeTypes.SelectedItemKeyDownBackspace:case l.stateChangeTypes.SelectedItemKeyDownDelete:case l.stateChangeTypes.DropdownKeyDownBackspace:case l.stateChangeTypes.FunctionRemoveSelectedItem:p(t??[]);break}}}),x=a({inputValue:d,inputId:g,items:y??[],itemToString:t=>(t==null?void 0:t.label)??"",defaultHighlightedIndex:0,selectedItem:null,stateReducer(t,e){const{changes:s,type:i}=e;switch(i){case a.stateChangeTypes.InputKeyDownEnter:case a.stateChangeTypes.ItemClick:return{...s,isOpen:!0,highlightedIndex:0};default:return s}},onStateChange({inputValue:t="",type:e,selectedItem:s}){switch(e){case a.stateChangeTypes.InputKeyDownEnter:case a.stateChangeTypes.ItemClick:s&&(p([...r,s]),h(""));break;case a.stateChangeTypes.InputChange:h(t);break}}});return M(E,{block:b,combobox:x,multiSelection:q,inputItems:y,inputId:g,selectedItems:r,setSelectedItems:p,...T})}H.__docgenInfo={description:"",methods:[],displayName:"ComboboxMulti",props:{label:{required:!0,tsType:{name:"string"},description:"Describes the purpose of the field."},hideOptionalLabel:{required:!1,tsType:{name:"boolean"},description:'If true, "(optional)" will never be appended to the label.'},required:{required:!1,tsType:{name:"boolean"},description:'If false, "(optional)" will be appended to the label.'},hint:{required:!1,tsType:{name:"string"},description:"Provides extra information about the field."},message:{required:!1,tsType:{name:"string"},description:"Message to show when the field is invalid."},invalid:{required:!1,tsType:{name:"boolean"},description:"If true, the invalid state will be rendered."},block:{required:!1,tsType:{name:"boolean"},description:"If true, the field will stretch to the fill the width of its container and ignore maxWidth.",defaultValue:{value:"true",computed:!1}},maxWidth:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof comboboxMaxWidthValues)[number]"},description:"The maximum width of the field."},disabled:{required:!1,tsType:{name:"boolean"},description:"If true, the field will not be interactive."},id:{required:!1,tsType:{name:"string"},description:"Defines an identifier (ID) which must be unique."},name:{required:!1,tsType:{name:"string"},description:"A string specifying a name for the input control."},value:{required:!1,tsType:{name:"Array",elements:[{name:"Option"}],raw:"Option[]"},description:"The value of the field."},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: Option[]) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"Option"}],raw:"Option[]"},name:"value"}],return:{name:"void"}}},description:"Function to be fired following a change event."},onFocus:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"HTMLInputElement"}],raw:"FocusEventHandler<HTMLInputElement>"},description:"Function to be fired following a focus event."},onBlur:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"HTMLInputElement"}],raw:"FocusEventHandler<HTMLInputElement>"},description:"Function to be fired following a blur event."},options:{required:!0,tsType:{name:"Array",elements:[{name:"Option"}],raw:"Option[]"},description:"The list of options to show in the dropdown."},renderItem:{required:!1,tsType:{name:"signature",type:"function",raw:"(item: Option, inputValue?: string) => ReactNode",signature:{arguments:[{type:{name:"Option"},name:"item"},{type:{name:"string"},name:"inputValue"}],return:{name:"ReactNode"}}},description:"Used to override the default item rendering. inputValue is now unused."},emptyResultsMessage:{required:!1,tsType:{name:"string"},description:"Message to display when no options match the users search term."},inputRef:{required:!1,tsType:{name:"Ref",elements:[{name:"HTMLInputElement"}],raw:"Ref<HTMLInputElement>"},description:"Ref to the input element."}}};export{H as C};
