import{j as y}from"./responsive-22d1c539.js";import{r as u}from"./index-f0f3a68d.js";import{u as d,C as T}from"./ComboboxBase-4263de0d.js";import"./ComboboxMultiBase-44af51ab.js";import{u as w,f as g}from"./ComboboxListItem-78231edd.js";function I({id:p,value:m,onChange:n,options:t,inputRef:f,...c}){const s=w(p),[o,i]=u.useState(t);u.useEffect(()=>{i(t)},[t]);const b=d({items:o,selectedItem:m,inputId:s,itemToString:e=>(e==null?void 0:e.label)??"",onSelectedItemChange:({selectedItem:e=null})=>{n==null||n(e)},onInputValueChange:({inputValue:e,isOpen:r})=>{e=(e==null?void 0:e.toLowerCase())??"",i(r?g(t,e):t)},stateReducer:(e,r)=>{var l;const{type:h,changes:a}=r;switch(h){case d.stateChangeTypes.InputBlur:return{...a,inputValue:((l=e.selectedItem)==null?void 0:l.label)??""};default:return a}}});return y(T,{combobox:b,inputId:s,inputItems:o,inputRef:f,isAutocomplete:!1,...c})}I.__docgenInfo={description:"",methods:[],displayName:"Combobox",props:{label:{required:!0,tsType:{name:"string"},description:"Describes the purpose of the field."},hideOptionalLabel:{required:!1,tsType:{name:"boolean"},description:'If true, "(optional)" will never be appended to the label.'},required:{required:!1,tsType:{name:"boolean"},description:'If false, "(optional)" will be appended to the label.'},hint:{required:!1,tsType:{name:"string"},description:"Provides extra information about the field."},message:{required:!1,tsType:{name:"string"},description:"Message to show when the field is invalid."},invalid:{required:!1,tsType:{name:"boolean"},description:"If true, the invalid state will be rendered."},block:{required:!1,tsType:{name:"boolean"},description:"If true, the field will stretch to the fill the width of its container."},maxWidth:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof comboboxMaxWidthValues)[number]"},description:"The maximum width of the field."},disabled:{required:!1,tsType:{name:"boolean"},description:"If true, the field will not be interactive."},id:{required:!1,tsType:{name:"string"},description:"Defines an identifier (ID) which must be unique."},name:{required:!1,tsType:{name:"string"},description:"A string specifying a name for the input control."},value:{required:!1,tsType:{name:"union",raw:"Option | null",elements:[{name:"Option"},{name:"null"}]},description:"The value of the field."},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: Option | null) => void",signature:{arguments:[{type:{name:"union",raw:"Option | null",elements:[{name:"Option"},{name:"null"}]},name:"value"}],return:{name:"void"}}},description:"Function to be fired following a change event."},onFocus:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"HTMLInputElement"}],raw:"FocusEventHandler<HTMLInputElement>"},description:"Function to be fired following a focus event."},onBlur:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"HTMLInputElement"}],raw:"FocusEventHandler<HTMLInputElement>"},description:"Function to be fired following a blur event."},options:{required:!0,tsType:{name:"Array",elements:[{name:"Option"}],raw:"Option[]"},description:"The list of options to show in the dropdown."},emptyResultsMessage:{required:!1,tsType:{name:"string"},description:"Message to display when no options match the users search term."},inputRef:{required:!1,tsType:{name:"Ref",elements:[{name:"HTMLInputElement"}],raw:"Ref<HTMLInputElement>"},description:"Ref to the input element."},renderItem:{required:!1,tsType:{name:"signature",type:"function",raw:"(item: Option, inputValue?: string) => ReactNode",signature:{arguments:[{type:{name:"Option"},name:"item"},{type:{name:"string"},name:"inputValue"}],return:{name:"ReactNode"}}},description:"Used to override the default item rendering. inputValue is now unused."},clearable:{required:!1,tsType:{name:"boolean"},description:"If true, the clear button will be rendered when there is a selected option."}}};export{I as C};
