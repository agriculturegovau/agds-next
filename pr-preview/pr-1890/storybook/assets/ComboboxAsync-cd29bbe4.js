import{j as O}from"./responsive-22d1c539.js";import{u as t,C as x}from"./ComboboxBase-4263de0d.js";import"./ComboboxMultiBase-44af51ab.js";import{u as C}from"./ComboboxListItem-78231edd.js";import{u as E}from"./useAsync-987bb331.js";function H({id:p,value:d,onChange:i,loadOptions:m,clearable:c=!1,showDropdownTrigger:o=!0,inputRef:f,...h}){const s=C(p),r=!o,{loading:b,networkError:g,inputItems:a,onInputValueChange:y,onIsOpenChange:w}=E(m),T=t({selectedItem:d,inputId:s,items:a,defaultHighlightedIndex:0,itemToString:e=>(e==null?void 0:e.label)??"",onInputValueChange:y,onIsOpenChange:w,onSelectedItemChange:({selectedItem:e=null})=>{i==null||i(e)},stateReducer:(e,I)=>{var l,u;const{type:q,changes:n}=I,v=(((l=n.inputValue)==null?void 0:l.length)??0)>0;switch(q){case t.stateChangeTypes.InputBlur:return{...n,inputValue:((u=e.selectedItem)==null?void 0:u.label)??""};case t.stateChangeTypes.InputClick:return r?{...n,isOpen:!1}:n;case t.stateChangeTypes.InputChange:return r?{...n,isOpen:v}:n;default:return n}}});return O(x,{combobox:T,inputId:s,loading:b,networkError:g,inputItems:a,showDropdownTrigger:o,clearable:c,inputRef:f,isAutocomplete:r,...h})}H.__docgenInfo={description:"",methods:[],displayName:"ComboboxAsync",props:{label:{required:!0,tsType:{name:"string"},description:"Describes the purpose of the field."},hideOptionalLabel:{required:!1,tsType:{name:"boolean"},description:'If true, "(optional)" will never be appended to the label.'},required:{required:!1,tsType:{name:"boolean"},description:'If false, "(optional)" will be appended to the label.'},hint:{required:!1,tsType:{name:"string"},description:"Provides extra information about the field."},message:{required:!1,tsType:{name:"string"},description:"Message to show when the field is invalid."},invalid:{required:!1,tsType:{name:"boolean"},description:"If true, the invalid state will be rendered."},block:{required:!1,tsType:{name:"boolean"},description:"If true, the field will stretch to the fill the width of its container."},maxWidth:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof comboboxMaxWidthValues)[number]"},description:"The maximum width of the field."},disabled:{required:!1,tsType:{name:"boolean"},description:"If true, the field will not be interactive."},id:{required:!1,tsType:{name:"string"},description:"Defines an identifier (ID) which must be unique."},name:{required:!1,tsType:{name:"string"},description:"A string specifying a name for the input control."},value:{required:!1,tsType:{name:"union",raw:"Option | null",elements:[{name:"Option"},{name:"null"}]},description:"The value of the field."},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: Option | null) => void",signature:{arguments:[{type:{name:"union",raw:"Option | null",elements:[{name:"Option"},{name:"null"}]},name:"value"}],return:{name:"void"}}},description:"Function to be fired following a change event."},onFocus:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"HTMLInputElement"}],raw:"FocusEventHandler<HTMLInputElement>"},description:"Function to be fired following a focus event."},onBlur:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"HTMLInputElement"}],raw:"FocusEventHandler<HTMLInputElement>"},description:"Function to be fired following a blur event."},loadOptions:{required:!0,tsType:{name:"signature",type:"function",raw:"(inputValue: string) => Promise<Option[]>",signature:{arguments:[{type:{name:"string"},name:"inputValue"}],return:{name:"Promise",elements:[{name:"Array",elements:[{name:"Option"}],raw:"Option[]"}],raw:"Promise<Option[]>"}}},description:"Function to be used when options need to be loaded over the network."},renderItem:{required:!1,tsType:{name:"signature",type:"function",raw:"(item: Option, inputValue?: string) => ReactNode",signature:{arguments:[{type:{name:"Option"},name:"item"},{type:{name:"string"},name:"inputValue"}],return:{name:"ReactNode"}}},description:"Used to override the default item rendering. inputValue is now unused."},emptyResultsMessage:{required:!1,tsType:{name:"string"},description:"Message to display when no options match the users search term."},clearable:{required:!1,tsType:{name:"boolean"},description:"If true, the clear button will be rendered when there is a selected option.",defaultValue:{value:"false",computed:!1}},openDropdownOnFocus:{required:!1,tsType:{name:"boolean"},description:"@deprecated This prop is no longer being used. When true, the dropdown will open when the user focuses on the element"},showDropdownTrigger:{required:!1,tsType:{name:"boolean"},description:"If true, the dropdown trigger will be rendered.",defaultValue:{value:"true",computed:!1}},inputRef:{required:!1,tsType:{name:"RefObject",elements:[{name:"HTMLInputElement"}],raw:"RefObject<HTMLInputElement>"},description:"Ref to the input element."}}};export{H as C};
