import{a as W,j as o}from"./responsive-22d1c539.js";import{r as n}from"./index-f0f3a68d.js";import{u as K}from"./useTernaryState-ed86673f.js";import{u as z}from"./useClickOutside-ca5d6845.js";import{u as G,P as A}from"./Popover-4e65a303.js";import{a as L,b as J,t as x,n as Q,g as X,c as Y,C as P,d as Z,p as $,e as ee}from"./Calendar-82a8aa21.js";import{D as te}from"./DatePickerInput-77442637.js";const ne=({allowedDateFormats:b=L,dateFormat:a="dd/MM/yyyy",initialMonth:V,inputRef:H,invalid:g=!1,maxDate:d,maxWidth:R="md",minDate:u,onBlur:p,onChange:y,onInputChange:f,value:i,yearRange:h,...E})=>{const v=n.useMemo(()=>Array.from(new Set([a,...b.filter(e=>L.includes(e))])),[a,b]),w=n.useRef(null),[O,N]=n.useState(!1),[r,S,s]=K(!1),j=r?s:S,l=G(),T=n.useCallback((e,t,M)=>{M.disabled||(c(J(t,a)),y(t),s())},[y,s,a]),[q,c]=n.useState(x(i,a)),B=e=>{const t=e.target.value,M=$(t,v),k=ee(M,u,d);!t||k?y(k):f==null||f(t),p==null||p(e)},_=e=>{const t=e.target.value;c(t)};n.useEffect(()=>{c(x(i,a))},[a,i]);const U=n.useCallback(()=>{r&&s()},[r,s]);z([l.popoverRef,w],U),n.useEffect(()=>{const e=t=>{r&&t.code==="Escape"&&(t.preventDefault(),t.stopPropagation(),s())};return window.addEventListener("keydown",e),()=>window.removeEventListener("keydown",e)},[r,s]);const I=n.useMemo(()=>{if(u||d)return[u?{before:u}:void 0,d?{after:d}:void 0].filter(e=>!!e)},[u,d]),m=typeof i=="string"?Q(i):i,D=X(m,V,h),F=n.useMemo(()=>l.getPopoverProps(),[l]),C=n.useMemo(()=>({defaultMonth:D,disabled:I,initialFocus:!0,numberOfMonths:1,onSelect:T,selected:m}),[D,I,T,m]);return W("div",{...l.getReferenceProps(),children:[o(te,{...E,dateFormat:a,maxWidth:R,invalid:{field:g,input:g},ref:H,value:q,onBlur:B,onChange:_,buttonRef:w,buttonOnClick:()=>{j(),N(!0)},buttonAriaLabel:Y({allowedDateFormats:v,value:q})}),o(Z,{yearRange:h,children:O?r&&o(A,{...F,children:o(P,{...C})}):o(A,{...F,visibility:r?"visible":"hidden",css:{minHeight:"200px"},children:r&&o(P,{...C})})})]})};ne.__docgenInfo={description:"",methods:[],displayName:"DatePicker",props:{autoComplete:{required:!1,tsType:{name:"InputHTMLAttributes['autoComplete']",raw:"NativeInputProps['autoComplete']"},description:""},autoFocus:{required:!1,tsType:{name:"InputHTMLAttributes['autoFocus']",raw:"NativeInputProps['autoFocus']"},description:""},disabled:{required:!1,tsType:{name:"InputHTMLAttributes['disabled']",raw:"NativeInputProps['disabled']"},description:""},id:{required:!1,tsType:{name:"InputHTMLAttributes['id']",raw:"NativeInputProps['id']"},description:""},name:{required:!1,tsType:{name:"InputHTMLAttributes['name']",raw:"NativeInputProps['name']"},description:""},onBlur:{required:!1,tsType:{name:"InputHTMLAttributes['onBlur']",raw:"NativeInputProps['onBlur']"},description:""},onFocus:{required:!1,tsType:{name:"InputHTMLAttributes['onFocus']",raw:"NativeInputProps['onFocus']"},description:""},label:{required:!0,tsType:{name:"string"},description:"Describes the purpose of the field."},hideOptionalLabel:{required:!1,tsType:{name:"boolean"},description:'If true, "(optional)" will never be appended to the label.'},required:{required:!1,tsType:{name:"boolean"},description:'If false, "(optional)" will be appended to the label.'},hint:{required:!1,tsType:{name:"string"},description:"Provides extra information about the field."},message:{required:!1,tsType:{name:"string"},description:"Message to show when the field is invalid."},invalid:{required:!1,tsType:{name:"boolean"},description:"If true, the invalid state will be rendered.",defaultValue:{value:"false",computed:!1}},block:{required:!1,tsType:{name:"boolean"},description:"If true, the field will stretch to the fill the width of its container."},maxWidth:{required:!1,tsType:{name:"Extract",elements:[{name:"unknown"},{name:"union",raw:"'md' | 'lg' | 'xl'",elements:[{name:"literal",value:"'md'"},{name:"literal",value:"'lg'"},{name:"literal",value:"'xl'"}]}],raw:"Extract<FieldMaxWidth, 'md' | 'lg' | 'xl'>"},description:"The maximum width of the field.",defaultValue:{value:"'md'",computed:!1}},minDate:{required:!1,tsType:{name:"Date"},description:"If set, any days before this date will not be selectable."},maxDate:{required:!1,tsType:{name:"Date"},description:"If set, any days after this date will not be selectable."},initialMonth:{required:!1,tsType:{name:"Date"},description:"The calendar month to initially show if no value is set."},yearRange:{required:!1,tsType:{name:"signature",type:"object",raw:"{ from: number; to: number }",signature:{properties:[{key:"from",value:{name:"number",required:!0}},{key:"to",value:{name:"number",required:!0}}]}},description:"The range of options to display in calendar year select."},allowedDateFormats:{required:!1,tsType:{name:"ReadonlyArray",elements:[{name:"unknown[number]",raw:"(typeof acceptedDateFormats)[number]"}],raw:"ReadonlyArray<AcceptedDateFormats>"},description:"Specifies the date formats that can be parsed.",defaultValue:{value:`[
	'dd/MM/yyyy', // e.g. 18/02/2023
	'dd-MM-yyyy', // e.g. 18-02-2023
	'dd MM yyyy', // e.g. 18 02 2023
	'MM/dd/yyyy', // e.g. 02/18/2023
	'MM-dd-yyyy', // e.g. 02-18-2023
	'MM dd yyyy', // e.g. 02 18 2023
	'do MMMM yyyy', // e.g. 8th February 2023
	'do MMM yyyy', // e.g. 8th Feb 2023
	'MMMM do yyyy', // e.g. February 8th 2023
	'MMM do yyyy', // e.g. Feb 8th 2023
	'd MMMM yyyy', // e.g. 8 February 2023
	'd MMM yyyy', // e.g. 8 Feb 2023
	'MMMM d yyyy', // e.g. February 8 2023
	'MMM d yyyy', // e.g. Feb 8 2023
	'dd MMMM yyyy', // e.g. 08 February 2023
	'dd MMM yyyy', // e.g. 08 Feb 2023
	'MMMM dd yyyy', // e.g. February 08 2023
	'MMM dd yyyy', // e.g. Feb 08 2023
]`,computed:!1}},value:{required:!0,tsType:{name:"union",raw:"Date | string | undefined",elements:[{name:"Date"},{name:"string"},{name:"undefined"}]},description:"The value of the field."},onChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(day: Date | undefined) => void",signature:{arguments:[{type:{name:"union",raw:"Date | undefined",elements:[{name:"Date"},{name:"undefined"}]},name:"day"}],return:{name:"void"}}},description:"Function to be fired following a change event."},onInputChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(inputValue: string) => void",signature:{arguments:[{type:{name:"string"},name:"inputValue"}],return:{name:"void"}}},description:"Function to be fired when the input value is updated."},inputRef:{required:!1,tsType:{name:"Ref",elements:[{name:"HTMLInputElement"}],raw:"Ref<HTMLInputElement>"},description:"Ref to the input element."},dateFormat:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof acceptedDateFormats)[number]"},description:"Used to adjust the date format displayed in the text input and secondary label.",defaultValue:{value:"'dd/MM/yyyy'",computed:!1}}}};export{ne as D};
