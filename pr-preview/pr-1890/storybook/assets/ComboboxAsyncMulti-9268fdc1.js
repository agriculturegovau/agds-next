import{j as E}from"./responsive-22d1c539.js";import{r}from"./index-f0f3a68d.js";import{a,u as t}from"./ComboboxBase-89095c8a.js";import{C as V}from"./ComboboxMultiBase-b56116a2.js";import{u as k,f as H}from"./ComboboxListItem-78231edd.js";import{u as S}from"./useAsync-987bb331.js";function D({block:h=!0,id:y,value:u,onChange:i,loadOptions:g,...b}){const l=k(y),[p,d]=r.useState(),[I,w]=r.useState([]),s=typeof u>"u"?I:u,o=r.useCallback(e=>{w(e),i==null||i(e)},[i]),T=a({selectedItems:s,onStateChange({selectedItems:e,type:n}){switch(n){case a.stateChangeTypes.SelectedItemKeyDownBackspace:case a.stateChangeTypes.SelectedItemKeyDownDelete:case a.stateChangeTypes.DropdownKeyDownBackspace:case a.stateChangeTypes.FunctionRemoveSelectedItem:o(e??[]);break}}}),{loading:v,networkError:q,inputItems:m,onInputValueChange:C,onIsOpenChange:O}=S(g),c=r.useMemo(()=>H(m??[],p,s),[m,p,s]),x=t({inputId:l,items:c,itemToString:e=>(e==null?void 0:e.label)??"",selectedItem:null,defaultHighlightedIndex:0,stateReducer(e,n){const{changes:f,type:M}=n;switch(M){case t.stateChangeTypes.InputKeyDownEnter:case t.stateChangeTypes.ItemClick:return{...f,inputValue:"",isOpen:!0};case t.stateChangeTypes.InputBlur:return{inputValue:""};default:return f}},onInputValueChange:e=>{d(e.inputValue??""),C(e)},onIsOpenChange:O,onStateChange({type:e,selectedItem:n}){switch(e){case t.stateChangeTypes.InputKeyDownEnter:case t.stateChangeTypes.ItemClick:case t.stateChangeTypes.InputBlur:n&&(o([...s,n]),d(""));break}}});return E(V,{block:h,combobox:x,multiSelection:T,inputId:l,inputItems:c,loading:v,networkError:q,selectedItems:s,setSelectedItems:o,clearable:!0,...b})}D.__docgenInfo={description:"",methods:[],displayName:"ComboboxAsyncMulti",props:{label:{required:!0,tsType:{name:"string"},description:"Describes the purpose of the field."},hideOptionalLabel:{required:!1,tsType:{name:"boolean"},description:'If true, "(optional)" will never be appended to the label.'},required:{required:!1,tsType:{name:"boolean"},description:'If false, "(optional)" will be appended to the label.'},hint:{required:!1,tsType:{name:"string"},description:"Provides extra information about the field."},message:{required:!1,tsType:{name:"string"},description:"Message to show when the field is invalid."},invalid:{required:!1,tsType:{name:"boolean"},description:"If true, the invalid state will be rendered."},block:{required:!1,tsType:{name:"boolean"},description:"If true, the field will stretch to the fill the width of its container and ignore maxWidth.",defaultValue:{value:"true",computed:!1}},maxWidth:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof comboboxMaxWidthValues)[number]"},description:"The maximum width of the field."},disabled:{required:!1,tsType:{name:"boolean"},description:"If true, the field will not be interactive."},id:{required:!1,tsType:{name:"string"},description:"Defines an identifier (ID) which must be unique."},name:{required:!1,tsType:{name:"string"},description:"A string specifying a name for the input control."},value:{required:!1,tsType:{name:"Array",elements:[{name:"Option"}],raw:"Option[]"},description:"The value of the field."},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: Option[]) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"Option"}],raw:"Option[]"},name:"value"}],return:{name:"void"}}},description:"Function to be fired following a change event."},onFocus:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"HTMLInputElement"}],raw:"FocusEventHandler<HTMLInputElement>"},description:"Function to be fired following a focus event."},onBlur:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"HTMLInputElement"}],raw:"FocusEventHandler<HTMLInputElement>"},description:"Function to be fired following a blur event."},loadOptions:{required:!0,tsType:{name:"signature",type:"function",raw:"(inputValue: string) => Promise<Option[]>",signature:{arguments:[{type:{name:"string"},name:"inputValue"}],return:{name:"Promise",elements:[{name:"Array",elements:[{name:"Option"}],raw:"Option[]"}],raw:"Promise<Option[]>"}}},description:"Function to be used when options need to be loaded over the network."},renderItem:{required:!1,tsType:{name:"signature",type:"function",raw:"(item: Option, inputValue?: string) => ReactNode",signature:{arguments:[{type:{name:"Option"},name:"item"},{type:{name:"string"},name:"inputValue"}],return:{name:"ReactNode"}}},description:"Used to override the default item rendering. inputValue is now unused."},emptyResultsMessage:{required:!1,tsType:{name:"string"},description:"Message to display when no options match the users search term."},inputRef:{required:!1,tsType:{name:"Ref",elements:[{name:"HTMLInputElement"}],raw:"Ref<HTMLInputElement>"},description:"Ref to the input element."}}};export{D as C};
