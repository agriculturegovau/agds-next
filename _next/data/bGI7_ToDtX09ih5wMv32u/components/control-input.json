{"pageProps":{"pkg":{"slug":"control-input","source":{"compiledSource":"var d=Object.defineProperty,p=Object.defineProperties;var _=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var c=(e,r,n)=>r in e?d(e,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[r]=n,t=(e,r)=>{for(var n in r||(r={}))l.call(r,n)&&c(e,n,r[n]);if(o)for(var n of o(r))i.call(r,n)&&c(e,n,r[n]);return e},u=(e,r)=>p(e,_(r));var s=(e,r)=>{var n={};for(var a in e)l.call(e,a)&&r.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&o)for(var a of o(e))r.indexOf(a)<0&&i.call(e,a)&&(n[a]=e[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,r=s(a,[\"components\"]);return mdx(MDXLayout,u(t(t({},layoutProps),r),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h3\",null,\"Checkbox\"),mdx(\"p\",null,\"Check boxes allow users to select one or more items.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n    label: \\\\\"Example\\\\\"\\\\n  }, /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"phone\\\\\"\\\\n  }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"tablet\\\\\"\\\\n  }, \\\\\"Tablet\\\\\"));\\\\n}\",\"globals\":[\"ControlGroup\",\"Checkbox\"],\"exampleType\":\"jsx\"}'}),`<ControlGroup label=\"Example\">\n    <Checkbox value=\"phone\">Phone</Checkbox>\n    <Checkbox value=\"tablet\">Tablet</Checkbox>\n</ControlGroup>\n`)),mdx(\"h3\",null,\"Radio\"),mdx(\"p\",null,\"Radio inputs allow users to select one item at a time.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var handlerForKey = React.useCallback(function (key) {\\\\n      return function () {\\\\n        return setValue(key);\\\\n      };\\\\n    }, []);\\\\n\\\\n    var isChecked = function isChecked(key) {\\\\n      return key === value;\\\\n    };\\\\n\\\\n    return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n      label: \\\\\"Example\\\\\"\\\\n    }, /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('phone'),\\\\n      onChange: handlerForKey('phone')\\\\n    }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('tablet'),\\\\n      onChange: handlerForKey('tablet')\\\\n    }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('laptop'),\\\\n      onChange: handlerForKey('laptop')\\\\n    }, \\\\\"Laptop\\\\\"));\\\\n  };\\\\n}\",\"globals\":[\"React\",\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState();\n    const handlerForKey = React.useCallback((key) => () => setValue(key), []);\n    const isChecked = (key) => key === value;\n\n    return (\n        <ControlGroup label=\"Example\">\n            <Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n                Phone\n            </Radio>\n            <Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\n                Tablet\n            </Radio>\n            <Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\n                Laptop\n            </Radio>\n        </ControlGroup>\n    );\n};\n`)),mdx(\"h3\",null,\"Checkbox block\"),mdx(\"p\",null,\"Inline checkbox options can sometimes be difficult to scan. Users may find it challenging to determine with which label the checkbox option corresponds: the one before the checkbox or the one after. Vertical positioning of checkbox, with one choice per line, eliminates this potential cause for confusion.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n    label: \\\\\"Block example\\\\\",\\\\n    block: true\\\\n  }, /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"phone\\\\\"\\\\n  }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"tablet\\\\\"\\\\n  }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"laptop\\\\\"\\\\n  }, \\\\\"Laptop\\\\\"));\\\\n}\",\"globals\":[\"ControlGroup\",\"Checkbox\"],\"exampleType\":\"jsx\"}'}),`<ControlGroup label=\"Block example\" block>\n    <Checkbox value=\"phone\">Phone</Checkbox>\n    <Checkbox value=\"tablet\">Tablet</Checkbox>\n    <Checkbox value=\"laptop\">Laptop</Checkbox>\n</ControlGroup>\n`)),mdx(\"h3\",null,\"Radio block\"),mdx(\"p\",null,\"Vertically stacked radio buttons.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var handlerForKey = React.useCallback(function (key) {\\\\n      return function () {\\\\n        return setValue(key);\\\\n      };\\\\n    }, []);\\\\n\\\\n    var isChecked = function isChecked(key) {\\\\n      return key === value;\\\\n    };\\\\n\\\\n    return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n      label: \\\\\"Block example\\\\\",\\\\n      block: true\\\\n    }, /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('phone'),\\\\n      onChange: handlerForKey('phone')\\\\n    }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('tablet'),\\\\n      onChange: handlerForKey('tablet')\\\\n    }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('laptop'),\\\\n      onChange: handlerForKey('laptop')\\\\n    }, \\\\\"Laptop\\\\\"));\\\\n  };\\\\n}\",\"globals\":[\"React\",\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState();\n    const handlerForKey = React.useCallback((key) => () => setValue(key), []);\n    const isChecked = (key) => key === value;\n\n    return (\n        <ControlGroup label=\"Block example\" block>\n            <Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n                Phone\n            </Radio>\n            <Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\n                Tablet\n            </Radio>\n            <Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\n                Laptop\n            </Radio>\n        </ControlGroup>\n    );\n};\n`)),mdx(\"h3\",null,\"Valid and invalid states\"),mdx(\"p\",null,\"Add a border around the control inputs to indicate valid or invalid selections.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var handlerForKey = React.useCallback(function (key) {\\\\n      return function () {\\\\n        return setValue(key);\\\\n      };\\\\n    }, []);\\\\n\\\\n    var isChecked = function isChecked(key) {\\\\n      return key === value;\\\\n    };\\\\n\\\\n    return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n      label: \\\\\"Invalid example\\\\\",\\\\n      message: \\\\\"Select an option\\\\\",\\\\n      invalid: true\\\\n    }, /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('phone'),\\\\n      onChange: handlerForKey('phone'),\\\\n      invalid: true\\\\n    }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('tablet'),\\\\n      onChange: handlerForKey('tablet'),\\\\n      invalid: true\\\\n    }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('laptop'),\\\\n      onChange: handlerForKey('laptop'),\\\\n      invalid: true\\\\n    }, \\\\\"Laptop\\\\\"));\\\\n  };\\\\n}\",\"globals\":[\"React\",\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState();\n    const handlerForKey = React.useCallback((key) => () => setValue(key), []);\n    const isChecked = (key) => key === value;\n\n    return (\n        <ControlGroup label=\"Invalid example\" message=\"Select an option\" invalid>\n            <Radio\n                checked={isChecked('phone')}\n                onChange={handlerForKey('phone')}\n                invalid\n            >\n                Phone\n            </Radio>\n            <Radio\n                checked={isChecked('tablet')}\n                onChange={handlerForKey('tablet')}\n                invalid\n            >\n                Tablet\n            </Radio>\n            <Radio\n                checked={isChecked('laptop')}\n                onChange={handlerForKey('laptop')}\n                invalid\n            >\n                Laptop\n            </Radio>\n        </ControlGroup>\n    );\n};\n`)),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var handlerForKey = React.useCallback(function (key) {\\\\n      return function () {\\\\n        return setValue(key);\\\\n      };\\\\n    }, []);\\\\n\\\\n    var isChecked = function isChecked(key) {\\\\n      return key === value;\\\\n    };\\\\n\\\\n    return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n      label: \\\\\"Valid example\\\\\",\\\\n      valid: true\\\\n    }, /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('phone'),\\\\n      onChange: handlerForKey('phone'),\\\\n      valid: true\\\\n    }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('tablet'),\\\\n      onChange: handlerForKey('tablet'),\\\\n      valid: true\\\\n    }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('laptop'),\\\\n      onChange: handlerForKey('laptop'),\\\\n      valid: true\\\\n    }, \\\\\"Laptop\\\\\"));\\\\n  };\\\\n}\",\"globals\":[\"React\",\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState();\n    const handlerForKey = React.useCallback((key) => () => setValue(key), []);\n    const isChecked = (key) => key === value;\n\n    return (\n        <ControlGroup label=\"Valid example\" valid>\n            <Radio\n                checked={isChecked('phone')}\n                onChange={handlerForKey('phone')}\n                valid\n            >\n                Phone\n            </Radio>\n            <Radio\n                checked={isChecked('tablet')}\n                onChange={handlerForKey('tablet')}\n                valid\n            >\n                Tablet\n            </Radio>\n            <Radio\n                checked={isChecked('laptop')}\n                onChange={handlerForKey('laptop')}\n                valid\n            >\n                Laptop\n            </Radio>\n        </ControlGroup>\n    );\n};\n`)),mdx(\"h3\",null,\"Disabled control inputs\"),mdx(\"p\",null,\"Disabled control inputs can be used to indicate inputs that are no longer valid or expired.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n    label: \\\\\"Disabled example\\\\\"\\\\n  }, /*#__PURE__*/React.createElement(Radio, {\\\\n    checked: false,\\\\n    disabled: true\\\\n  }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n    checked: true,\\\\n    disabled: true\\\\n  }, \\\\\"Tablet\\\\\"));\\\\n}\",\"globals\":[\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}'}),`<ControlGroup label=\"Disabled example\">\n    <Radio checked={false} disabled>\n        Phone\n    </Radio>\n    <Radio checked={true} disabled>\n        Tablet\n    </Radio>\n</ControlGroup>\n`)),mdx(\"h3\",null,\"Small inputs\"),mdx(\"p\",null,\"Smaller versions of control inputs.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n    label: \\\\\"Small example\\\\\"\\\\n  }, /*#__PURE__*/React.createElement(Checkbox, {\\\\n    size: \\\\\"sm\\\\\"\\\\n  }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Checkbox, {\\\\n    size: \\\\\"sm\\\\\"\\\\n  }, \\\\\"Tablet\\\\\"));\\\\n}\",\"globals\":[\"ControlGroup\",\"Checkbox\"],\"exampleType\":\"jsx\"}'}),`<ControlGroup label=\"Small example\">\n    <Checkbox size=\"sm\">Phone</Checkbox>\n    <Checkbox size=\"sm\">Tablet</Checkbox>\n</ControlGroup>\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Control Input","description":"Control inputs help users input one or more selections from multiple options. Our control inputs consist of checkboxes and radio buttons.","group":"Forms","storybookPath":"/story/forms-checkbox--basic"}},"data":{"title":"Control Input","description":"Control inputs help users input one or more selections from multiple options. Our control inputs consist of checkboxes and radio buttons.","group":"Forms","storybookPath":"/story/forms-checkbox--basic"},"name":"@ag.ds-next/control-input","version":"12.0.0","title":"Control Input","storybookPath":"/story/forms-checkbox--basic","subNavItems":[{"label":"Overview","href":"/components/control-input","path":"/home/runner/work/agds-next/agds-next/packages/control-input/docs/overview.mdx"},{"label":"Code","href":"/components/control-input/code","path":"/home/runner/work/agds-next/agds-next/packages/control-input/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG Branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call To Action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control Input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date Picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction Link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File Upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form Stack","href":"/components/form-stack"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero Banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage Nav","href":"/components/inpage-nav"},{"label":"Keyword List","href":"/components/keyword-list"},{"label":"Link List","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main Nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page Alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress Indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search Box","href":"/components/search-box"},{"label":"Select","href":"/components/select"},{"label":"Side Nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip Link","href":"/components/skip-link"},{"label":"Sub Nav","href":"/components/sub-nav"},{"label":"Summary List","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task List","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text Input","href":"/components/text-input"},{"label":"Text Link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Control Input"}],"content":{"compiledSource":"var d=Object.defineProperty,p=Object.defineProperties;var _=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var c=(e,r,n)=>r in e?d(e,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[r]=n,t=(e,r)=>{for(var n in r||(r={}))l.call(r,n)&&c(e,n,r[n]);if(o)for(var n of o(r))i.call(r,n)&&c(e,n,r[n]);return e},u=(e,r)=>p(e,_(r));var s=(e,r)=>{var n={};for(var a in e)l.call(e,a)&&r.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&o)for(var a of o(e))r.indexOf(a)<0&&i.call(e,a)&&(n[a]=e[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,r=s(a,[\"components\"]);return mdx(MDXLayout,u(t(t({},layoutProps),r),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h3\",null,\"Checkbox\"),mdx(\"p\",null,\"Check boxes allow users to select one or more items.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n    label: \\\\\"Example\\\\\"\\\\n  }, /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"phone\\\\\"\\\\n  }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"tablet\\\\\"\\\\n  }, \\\\\"Tablet\\\\\"));\\\\n}\",\"globals\":[\"ControlGroup\",\"Checkbox\"],\"exampleType\":\"jsx\"}'}),`<ControlGroup label=\"Example\">\n    <Checkbox value=\"phone\">Phone</Checkbox>\n    <Checkbox value=\"tablet\">Tablet</Checkbox>\n</ControlGroup>\n`)),mdx(\"h3\",null,\"Radio\"),mdx(\"p\",null,\"Radio inputs allow users to select one item at a time.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var handlerForKey = React.useCallback(function (key) {\\\\n      return function () {\\\\n        return setValue(key);\\\\n      };\\\\n    }, []);\\\\n\\\\n    var isChecked = function isChecked(key) {\\\\n      return key === value;\\\\n    };\\\\n\\\\n    return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n      label: \\\\\"Example\\\\\"\\\\n    }, /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('phone'),\\\\n      onChange: handlerForKey('phone')\\\\n    }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('tablet'),\\\\n      onChange: handlerForKey('tablet')\\\\n    }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('laptop'),\\\\n      onChange: handlerForKey('laptop')\\\\n    }, \\\\\"Laptop\\\\\"));\\\\n  };\\\\n}\",\"globals\":[\"React\",\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState();\n    const handlerForKey = React.useCallback((key) => () => setValue(key), []);\n    const isChecked = (key) => key === value;\n\n    return (\n        <ControlGroup label=\"Example\">\n            <Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n                Phone\n            </Radio>\n            <Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\n                Tablet\n            </Radio>\n            <Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\n                Laptop\n            </Radio>\n        </ControlGroup>\n    );\n};\n`)),mdx(\"h3\",null,\"Checkbox block\"),mdx(\"p\",null,\"Inline checkbox options can sometimes be difficult to scan. Users may find it challenging to determine with which label the checkbox option corresponds: the one before the checkbox or the one after. Vertical positioning of checkbox, with one choice per line, eliminates this potential cause for confusion.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n    label: \\\\\"Block example\\\\\",\\\\n    block: true\\\\n  }, /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"phone\\\\\"\\\\n  }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"tablet\\\\\"\\\\n  }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Checkbox, {\\\\n    value: \\\\\"laptop\\\\\"\\\\n  }, \\\\\"Laptop\\\\\"));\\\\n}\",\"globals\":[\"ControlGroup\",\"Checkbox\"],\"exampleType\":\"jsx\"}'}),`<ControlGroup label=\"Block example\" block>\n    <Checkbox value=\"phone\">Phone</Checkbox>\n    <Checkbox value=\"tablet\">Tablet</Checkbox>\n    <Checkbox value=\"laptop\">Laptop</Checkbox>\n</ControlGroup>\n`)),mdx(\"h3\",null,\"Radio block\"),mdx(\"p\",null,\"Vertically stacked radio buttons.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var handlerForKey = React.useCallback(function (key) {\\\\n      return function () {\\\\n        return setValue(key);\\\\n      };\\\\n    }, []);\\\\n\\\\n    var isChecked = function isChecked(key) {\\\\n      return key === value;\\\\n    };\\\\n\\\\n    return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n      label: \\\\\"Block example\\\\\",\\\\n      block: true\\\\n    }, /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('phone'),\\\\n      onChange: handlerForKey('phone')\\\\n    }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('tablet'),\\\\n      onChange: handlerForKey('tablet')\\\\n    }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('laptop'),\\\\n      onChange: handlerForKey('laptop')\\\\n    }, \\\\\"Laptop\\\\\"));\\\\n  };\\\\n}\",\"globals\":[\"React\",\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState();\n    const handlerForKey = React.useCallback((key) => () => setValue(key), []);\n    const isChecked = (key) => key === value;\n\n    return (\n        <ControlGroup label=\"Block example\" block>\n            <Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\n                Phone\n            </Radio>\n            <Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\n                Tablet\n            </Radio>\n            <Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\n                Laptop\n            </Radio>\n        </ControlGroup>\n    );\n};\n`)),mdx(\"h3\",null,\"Valid and invalid states\"),mdx(\"p\",null,\"Add a border around the control inputs to indicate valid or invalid selections.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var handlerForKey = React.useCallback(function (key) {\\\\n      return function () {\\\\n        return setValue(key);\\\\n      };\\\\n    }, []);\\\\n\\\\n    var isChecked = function isChecked(key) {\\\\n      return key === value;\\\\n    };\\\\n\\\\n    return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n      label: \\\\\"Invalid example\\\\\",\\\\n      message: \\\\\"Select an option\\\\\",\\\\n      invalid: true\\\\n    }, /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('phone'),\\\\n      onChange: handlerForKey('phone'),\\\\n      invalid: true\\\\n    }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('tablet'),\\\\n      onChange: handlerForKey('tablet'),\\\\n      invalid: true\\\\n    }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('laptop'),\\\\n      onChange: handlerForKey('laptop'),\\\\n      invalid: true\\\\n    }, \\\\\"Laptop\\\\\"));\\\\n  };\\\\n}\",\"globals\":[\"React\",\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState();\n    const handlerForKey = React.useCallback((key) => () => setValue(key), []);\n    const isChecked = (key) => key === value;\n\n    return (\n        <ControlGroup label=\"Invalid example\" message=\"Select an option\" invalid>\n            <Radio\n                checked={isChecked('phone')}\n                onChange={handlerForKey('phone')}\n                invalid\n            >\n                Phone\n            </Radio>\n            <Radio\n                checked={isChecked('tablet')}\n                onChange={handlerForKey('tablet')}\n                invalid\n            >\n                Tablet\n            </Radio>\n            <Radio\n                checked={isChecked('laptop')}\n                onChange={handlerForKey('laptop')}\n                invalid\n            >\n                Laptop\n            </Radio>\n        </ControlGroup>\n    );\n};\n`)),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var handlerForKey = React.useCallback(function (key) {\\\\n      return function () {\\\\n        return setValue(key);\\\\n      };\\\\n    }, []);\\\\n\\\\n    var isChecked = function isChecked(key) {\\\\n      return key === value;\\\\n    };\\\\n\\\\n    return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n      label: \\\\\"Valid example\\\\\",\\\\n      valid: true\\\\n    }, /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('phone'),\\\\n      onChange: handlerForKey('phone'),\\\\n      valid: true\\\\n    }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('tablet'),\\\\n      onChange: handlerForKey('tablet'),\\\\n      valid: true\\\\n    }, \\\\\"Tablet\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n      checked: isChecked('laptop'),\\\\n      onChange: handlerForKey('laptop'),\\\\n      valid: true\\\\n    }, \\\\\"Laptop\\\\\"));\\\\n  };\\\\n}\",\"globals\":[\"React\",\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState();\n    const handlerForKey = React.useCallback((key) => () => setValue(key), []);\n    const isChecked = (key) => key === value;\n\n    return (\n        <ControlGroup label=\"Valid example\" valid>\n            <Radio\n                checked={isChecked('phone')}\n                onChange={handlerForKey('phone')}\n                valid\n            >\n                Phone\n            </Radio>\n            <Radio\n                checked={isChecked('tablet')}\n                onChange={handlerForKey('tablet')}\n                valid\n            >\n                Tablet\n            </Radio>\n            <Radio\n                checked={isChecked('laptop')}\n                onChange={handlerForKey('laptop')}\n                valid\n            >\n                Laptop\n            </Radio>\n        </ControlGroup>\n    );\n};\n`)),mdx(\"h3\",null,\"Disabled control inputs\"),mdx(\"p\",null,\"Disabled control inputs can be used to indicate inputs that are no longer valid or expired.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n    label: \\\\\"Disabled example\\\\\"\\\\n  }, /*#__PURE__*/React.createElement(Radio, {\\\\n    checked: false,\\\\n    disabled: true\\\\n  }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Radio, {\\\\n    checked: true,\\\\n    disabled: true\\\\n  }, \\\\\"Tablet\\\\\"));\\\\n}\",\"globals\":[\"ControlGroup\",\"Radio\"],\"exampleType\":\"jsx\"}'}),`<ControlGroup label=\"Disabled example\">\n    <Radio checked={false} disabled>\n        Phone\n    </Radio>\n    <Radio checked={true} disabled>\n        Tablet\n    </Radio>\n</ControlGroup>\n`)),mdx(\"h3\",null,\"Small inputs\"),mdx(\"p\",null,\"Smaller versions of control inputs.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(ControlGroup, {\\\\n    label: \\\\\"Small example\\\\\"\\\\n  }, /*#__PURE__*/React.createElement(Checkbox, {\\\\n    size: \\\\\"sm\\\\\"\\\\n  }, \\\\\"Phone\\\\\"), /*#__PURE__*/React.createElement(Checkbox, {\\\\n    size: \\\\\"sm\\\\\"\\\\n  }, \\\\\"Tablet\\\\\"));\\\\n}\",\"globals\":[\"ControlGroup\",\"Checkbox\"],\"exampleType\":\"jsx\"}'}),`<ControlGroup label=\"Small example\">\n    <Checkbox size=\"sm\">Phone</Checkbox>\n    <Checkbox size=\"sm\">Tablet</Checkbox>\n</ControlGroup>\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Control Input","description":"Control inputs help users input one or more selections from multiple options. Our control inputs consist of checkboxes and radio buttons.","group":"Forms","storybookPath":"/story/forms-checkbox--basic"}}},"__N_SSG":true}