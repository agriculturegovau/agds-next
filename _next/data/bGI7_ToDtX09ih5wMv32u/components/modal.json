{"pageProps":{"pkg":{"slug":"modal","source":{"compiledSource":"var d=Object.defineProperty,_=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var s=(e,t,n)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,o=(e,t)=>{for(var n in t||(t={}))i.call(t,n)&&s(e,n,t[n]);if(a)for(var n of a(t))l.call(t,n)&&s(e,n,t[n]);return e},u=(e,t)=>_(e,p(t));var c=(e,t)=>{var n={};for(var r in e)i.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&a)for(var r of a(e))t.indexOf(r)<0&&l.call(e,r)&&(n[r]=e[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:e}=r,t=c(r,[\"components\"]);return mdx(MDXLayout,u(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Modals are ideal for prompting a user to confirm a destructive action.\"),mdx(\"p\",null,\"For other uses, other patterns are preferred.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _useTernaryState = useTernaryState(false),\\\\n        _useTernaryState2 = _slicedToArray(_useTernaryState, 3),\\\\n        isModalOpen = _useTernaryState2[0],\\\\n        openModal = _useTernaryState2[1],\\\\n        closeModal = _useTernaryState2[2];\\\\n\\\\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\\\\n      onClick: openModal\\\\n    }, \\\\\"Open modal\\\\\"), /*#__PURE__*/React.createElement(Modal, {\\\\n      isOpen: isModalOpen,\\\\n      onDismiss: closeModal,\\\\n      title: \\\\\"This is the title of the modal dialog, it can span lines but should not be too long.\\\\\",\\\\n      actions: /*#__PURE__*/React.createElement(ButtonGroup, null, /*#__PURE__*/React.createElement(Button, {\\\\n        onClick: closeModal\\\\n      }, \\\\\"Primary button\\\\\"), /*#__PURE__*/React.createElement(Button, {\\\\n        variant: \\\\\"secondary\\\\\",\\\\n        onClick: closeModal\\\\n      }, \\\\\"Secondary button\\\\\"), /*#__PURE__*/React.createElement(Button, {\\\\n        variant: \\\\\"tertiary\\\\\",\\\\n        onClick: closeModal\\\\n      }, \\\\\"Tertiary button\\\\\"))\\\\n    }, /*#__PURE__*/React.createElement(Text, {\\\\n      as: \\\\\"p\\\\\"\\\\n    }, \\\\\"This is the Modal Body paragraph, it provides detailed instruction and context for the the modal action. It can also span lines but long form content should be avoided.\\\\\")));\\\\n  };\\\\n}\",\"globals\":[\"useTernaryState\",\"React\",\"Button\",\"Modal\",\"ButtonGroup\",\"Text\"],\"exampleType\":\"jsx\"}'}),`() => {\n    const [isModalOpen, openModal, closeModal] = useTernaryState(false);\n    return (\n        <React.Fragment>\n            <Button onClick={openModal}>Open modal</Button>\n            <Modal\n                isOpen={isModalOpen}\n                onDismiss={closeModal}\n                title=\"This is the title of the modal dialog, it can span lines but should not be too long.\"\n                actions={\n                    <ButtonGroup>\n                        <Button onClick={closeModal}>Primary button</Button>\n                        <Button variant=\"secondary\" onClick={closeModal}>\n                            Secondary button\n                        </Button>\n                        <Button variant=\"tertiary\" onClick={closeModal}>\n                            Tertiary button\n                        </Button>\n                    </ButtonGroup>\n                }\n            >\n                <Text as=\"p\">\n                    This is the Modal Body paragraph, it provides detailed instruction and\n                    context for the the modal action. It can also span lines but long form\n                    content should be avoided.\n                </Text>\n            </Modal>\n        </React.Fragment>\n    );\n};\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Modal","description":"Modal is a window that appears in front of the current page, to focus user attention on one action or piece of information","group":"Content","storybookPath":"/story/content-modal--basic"}},"data":{"title":"Modal","description":"Modal is a window that appears in front of the current page, to focus user attention on one action or piece of information","group":"Content","storybookPath":"/story/content-modal--basic"},"name":"@ag.ds-next/modal","version":"9.0.0","title":"Modal","storybookPath":"/story/content-modal--basic","subNavItems":[{"label":"Overview","href":"/components/modal","path":"/home/runner/work/agds-next/agds-next/packages/modal/docs/overview.mdx"},{"label":"Code","href":"/components/modal/code","path":"/home/runner/work/agds-next/agds-next/packages/modal/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG Branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call To Action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control Input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date Picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction Link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File Upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form Stack","href":"/components/form-stack"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero Banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage Nav","href":"/components/inpage-nav"},{"label":"Keyword List","href":"/components/keyword-list"},{"label":"Link List","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main Nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page Alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress Indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search Box","href":"/components/search-box"},{"label":"Select","href":"/components/select"},{"label":"Side Nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip Link","href":"/components/skip-link"},{"label":"Sub Nav","href":"/components/sub-nav"},{"label":"Summary List","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task List","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text Input","href":"/components/text-input"},{"label":"Text Link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Modal"}],"content":{"compiledSource":"var d=Object.defineProperty,_=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var s=(e,t,n)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,o=(e,t)=>{for(var n in t||(t={}))i.call(t,n)&&s(e,n,t[n]);if(a)for(var n of a(t))l.call(t,n)&&s(e,n,t[n]);return e},u=(e,t)=>_(e,p(t));var c=(e,t)=>{var n={};for(var r in e)i.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&a)for(var r of a(e))t.indexOf(r)<0&&l.call(e,r)&&(n[r]=e[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:e}=r,t=c(r,[\"components\"]);return mdx(MDXLayout,u(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Modals are ideal for prompting a user to confirm a destructive action.\"),mdx(\"p\",null,\"For other uses, other patterns are preferred.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _useTernaryState = useTernaryState(false),\\\\n        _useTernaryState2 = _slicedToArray(_useTernaryState, 3),\\\\n        isModalOpen = _useTernaryState2[0],\\\\n        openModal = _useTernaryState2[1],\\\\n        closeModal = _useTernaryState2[2];\\\\n\\\\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\\\\n      onClick: openModal\\\\n    }, \\\\\"Open modal\\\\\"), /*#__PURE__*/React.createElement(Modal, {\\\\n      isOpen: isModalOpen,\\\\n      onDismiss: closeModal,\\\\n      title: \\\\\"This is the title of the modal dialog, it can span lines but should not be too long.\\\\\",\\\\n      actions: /*#__PURE__*/React.createElement(ButtonGroup, null, /*#__PURE__*/React.createElement(Button, {\\\\n        onClick: closeModal\\\\n      }, \\\\\"Primary button\\\\\"), /*#__PURE__*/React.createElement(Button, {\\\\n        variant: \\\\\"secondary\\\\\",\\\\n        onClick: closeModal\\\\n      }, \\\\\"Secondary button\\\\\"), /*#__PURE__*/React.createElement(Button, {\\\\n        variant: \\\\\"tertiary\\\\\",\\\\n        onClick: closeModal\\\\n      }, \\\\\"Tertiary button\\\\\"))\\\\n    }, /*#__PURE__*/React.createElement(Text, {\\\\n      as: \\\\\"p\\\\\"\\\\n    }, \\\\\"This is the Modal Body paragraph, it provides detailed instruction and context for the the modal action. It can also span lines but long form content should be avoided.\\\\\")));\\\\n  };\\\\n}\",\"globals\":[\"useTernaryState\",\"React\",\"Button\",\"Modal\",\"ButtonGroup\",\"Text\"],\"exampleType\":\"jsx\"}'}),`() => {\n    const [isModalOpen, openModal, closeModal] = useTernaryState(false);\n    return (\n        <React.Fragment>\n            <Button onClick={openModal}>Open modal</Button>\n            <Modal\n                isOpen={isModalOpen}\n                onDismiss={closeModal}\n                title=\"This is the title of the modal dialog, it can span lines but should not be too long.\"\n                actions={\n                    <ButtonGroup>\n                        <Button onClick={closeModal}>Primary button</Button>\n                        <Button variant=\"secondary\" onClick={closeModal}>\n                            Secondary button\n                        </Button>\n                        <Button variant=\"tertiary\" onClick={closeModal}>\n                            Tertiary button\n                        </Button>\n                    </ButtonGroup>\n                }\n            >\n                <Text as=\"p\">\n                    This is the Modal Body paragraph, it provides detailed instruction and\n                    context for the the modal action. It can also span lines but long form\n                    content should be avoided.\n                </Text>\n            </Modal>\n        </React.Fragment>\n    );\n};\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Modal","description":"Modal is a window that appears in front of the current page, to focus user attention on one action or piece of information","group":"Content","storybookPath":"/story/content-modal--basic"}}},"__N_SSG":true}