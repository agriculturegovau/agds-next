{"pageProps":{"pkg":{"slug":"modal","source":{"compiledSource":"var d=Object.defineProperty,_=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var s=(e,t,n)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,o=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&s(e,n,t[n]);if(a)for(var n of a(t))i.call(t,n)&&s(e,n,t[n]);return e},u=(e,t)=>_(e,p(t));var c=(e,t)=>{var n={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&a)for(var r of a(e))t.indexOf(r)<0&&i.call(e,r)&&(n[r]=e[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:e}=r,t=c(r,[\"components\"]);return mdx(MDXLayout,u(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Modals are ideal for prompting a user to confirm a destructive action.\"),mdx(\"p\",null,\"For other uses, other patterns are preferred.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _useTernaryState = useTernaryState(false),\\\\n        _useTernaryState2 = _slicedToArray(_useTernaryState, 3),\\\\n        isModalOpen = _useTernaryState2[0],\\\\n        openModal = _useTernaryState2[1],\\\\n        closeModal = _useTernaryState2[2];\\\\n\\\\n    return /*#__PURE__*/React.createElement(\\\\\"div\\\\\", null, /*#__PURE__*/React.createElement(Button, {\\\\n      onClick: openModal\\\\n    }, \\\\\"Open modal\\\\\"), /*#__PURE__*/React.createElement(Modal, {\\\\n      isOpen: isModalOpen,\\\\n      onDismiss: closeModal,\\\\n      title: \\\\\"This is the title of the modal dialogue, it can span lines but should not be too long.\\\\\"\\\\n    }, /*#__PURE__*/React.createElement(Stack, {\\\\n      gap: 2\\\\n    }, /*#__PURE__*/React.createElement(Text, {\\\\n      as: \\\\\"p\\\\\"\\\\n    }, \\\\\"This is the Modal Body paragraph, it provides detailed instruction and context for the the modal action. It can also span lines but long form content should be avoided.\\\\\"), /*#__PURE__*/React.createElement(ModalButtonGroup, null, /*#__PURE__*/React.createElement(Button, {\\\\n      onClick: closeModal\\\\n    }, \\\\\"Ok\\\\\"), /*#__PURE__*/React.createElement(Button, {\\\\n      variant: \\\\\"secondary\\\\\",\\\\n      onClick: closeModal\\\\n    }, \\\\\"Cancel\\\\\"), /*#__PURE__*/React.createElement(Button, {\\\\n      variant: \\\\\"tertiary\\\\\",\\\\n      onClick: closeModal\\\\n    }, \\\\\"Cancel\\\\\")))));\\\\n  };\\\\n}\",\"globals\":[\"useTernaryState\",\"Button\",\"Modal\",\"Stack\",\"Text\",\"ModalButtonGroup\"],\"exampleType\":\"jsx\"}'}),`() => {\n    const [isModalOpen, openModal, closeModal] = useTernaryState(false);\n\n    return (\n        <div>\n            <Button onClick={openModal}>Open modal</Button>\n            <Modal\n                isOpen={isModalOpen}\n                onDismiss={closeModal}\n                title=\"This is the title of the modal dialogue, it can span lines but should not be too long.\"\n            >\n                <Stack gap={2}>\n                    <Text as=\"p\">\n                        This is the Modal Body paragraph, it provides detailed instruction\n                        and context for the the modal action. It can also span lines but\n                        long form content should be avoided.\n                    </Text>\n                    <ModalButtonGroup>\n                        <Button onClick={closeModal}>Ok</Button>\n                        <Button variant=\"secondary\" onClick={closeModal}>\n                            Cancel\n                        </Button>\n                        <Button variant=\"tertiary\" onClick={closeModal}>\n                            Cancel\n                        </Button>\n                    </ModalButtonGroup>\n                </Stack>\n            </Modal>\n        </div>\n    );\n};\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Modal","description":"Modal is a window that appears in front of the current page, to focus user attention on one action or piece of information","group":"Content"}},"data":{"title":"Modal","description":"Modal is a window that appears in front of the current page, to focus user attention on one action or piece of information","group":"Content"},"name":"@ag.ds-next/modal","version":"1.0.0","title":"Modal"},"navLinks":[{"label":"Brand","href":"/packages/brand"},{"label":"Content","href":"/packages/content","items":[{"label":"Body","href":"/packages/content/body"},{"label":"Call to action","href":"/packages/content/call-to-action"},{"label":"Callout","href":"/packages/content/callout"},{"label":"Headings","href":"/packages/content/heading"},{"label":"Keyword List","href":"/packages/content/keyword-list"},{"label":"Modal","href":"/packages/content/modal"},{"label":"Page alert","href":"/packages/content/page-alert"},{"label":"Table","href":"/packages/content/table"},{"label":"Tags","href":"/packages/content/tags"}]},{"label":"Forms","href":"/packages/forms"},{"label":"Foundations","href":"/packages/foundations"},{"label":"Layout","href":"/packages/layout"},{"label":"Navigation","href":"/packages/navigation"}],"breadcrumbs":[{"href":"/packages","label":"Packages"},{"href":"/packages/content","label":"Content"},{"label":"Modal"}]},"__N_SSG":true}