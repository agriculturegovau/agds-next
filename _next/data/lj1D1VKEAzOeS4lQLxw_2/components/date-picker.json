{"pageProps":{"pkg":{"slug":"date-picker","name":"date-picker","title":"Date picker","description":"The Date picker component allows users to select a single date via a calendar or text input.","storybookPath":"/story/forms-datepicker-datepicker--basic","figmaGalleryNodeId":"12444%3A100327","subNavItems":[{"label":"Overview","href":"/components/date-picker","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker/docs/overview.mdx"},{"label":"Code","href":"/components/date-picker/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker/docs/code.mdx"},{"label":"Accessibility","href":"/components/date-picker/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker/docs/accessibility.mdx"}],"relatedComponents":["date-picker-next","date-range-picker","date-range-picker-next"],"relatedPatterns":null,"deprecated":false,"unreleased":false},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"App layout","href":"/components/app-layout"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Avatar","href":"/components/avatar"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Checkbox","href":"/components/checkbox"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control group","href":"/components/control-group"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Date picker (Next)","href":"/components/date-picker-next"},{"label":"Date range picker","href":"/components/date-range-picker"},{"label":"Date range picker (Next)","href":"/components/date-range-picker-next"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Divider","href":"/components/divider"},{"label":"Drawer","href":"/components/drawer"},{"label":"Dropdown menu","href":"/components/dropdown-menu"},{"label":"Feature link list","href":"/components/feature-link-list"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File input","href":"/components/file-input"},{"label":"File upload","href":"/components/file-upload"},{"label":"Filter sidebar","href":"/components/filter-sidebar"},{"label":"Flex","href":"/components/flex"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Grouped fields","href":"/components/grouped-fields"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Indicator dot","href":"/components/indicator-dot"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"List","href":"/components/list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Notification badge","href":"/components/notification-badge"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Password input","href":"/components/password-input"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Radio","href":"/components/radio"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Section alert","href":"/components/section-alert"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Stack","href":"/components/stack"},{"label":"Status badge","href":"/components/status-badge"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tabs","href":"/components/tabs"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"},{"label":"Time input","href":"/components/time-input"},{"label":"Time picker","href":"/components/time-picker"},{"label":"Toggle button","href":"/components/toggle-button"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Date picker"}],"toc":[{"id":"tracking-the-input-value","title":"Tracking the input value","level":2,"slug":"tracking-the-input-value","items":[]},{"id":"hint","title":"Hint","level":2,"slug":"hint","items":[]},{"id":"block","title":"Block","level":2,"slug":"block","items":[]},{"id":"invalid","title":"Invalid","level":2,"slug":"invalid","items":[]},{"id":"disabled","title":"Disabled","level":2,"slug":"disabled","items":[]},{"id":"minimum-and-maximum-dates","title":"Minimum and maximum dates","level":2,"slug":"minimum-and-maximum-dates","items":[]},{"id":"custom-year-range","title":"Custom year range","level":2,"slug":"custom-year-range","items":[]},{"id":"changing-the-date-format","title":"Changing the date format","level":2,"slug":"changing-the-date-format","items":[]},{"id":"changing-the-allowed-date-formats","title":"Changing the allowed date formats","level":2,"slug":"changing-the-allowed-date-formats","items":[]},{"title":"Related components","slug":"related-components","id":"related-components","level":2,"items":[]}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {PageAlert, Text, TextLink, DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  if (!PageAlert) _missingMdxReference(\"PageAlert\", true);\n  if (!Text) _missingMdxReference(\"Text\", true);\n  if (!TextLink) _missingMdxReference(\"TextLink\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(PageAlert, {\n      tone: \"info\",\n      title: \"This component has been superseded\",\n      children: [_jsxs(Text, {\n        as: \"p\",\n        children: ['A newer, backwards-incompatible version of Date picker is available as: ', _jsx(TextLink, {\n          href: \"/components/date-picker-next\",\n          children: 'Date picker (Next)'\n        }), '.']\n      }), _jsx(Text, {\n        as: \"p\",\n        children: 'Date picker will be removed in the next major release.'\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn <DatePicker label=\\\"Select date\\\" value={value} onChange={setValue} />;\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Date picker is a \", _jsx(_components.a, {\n        href: \"https://reactjs.org/docs/forms.html#controlled-components\",\n        children: \"controlled component\"\n      }), \" which means consumers of this component need to manage the state of this component by using the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \", \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onInputChange\"\n      }), \" props.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For an example of using this component in a form built with \", _jsx(_components.a, {\n        href: \"https://react-hook-form.com/\",\n        children: \"react-hook-form\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://github.com/jquense/yup\",\n        children: \"yup\"\n      }), \", please see the \", _jsx(_components.a, {\n        href: \"/templates/single-page-form\",\n        children: \"Single-page form template\"\n      }), \".\"]\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"always display the date format above the text input\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"prefer Australian date format 'dd/mm/yyyy'\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"allow users to navigate dates via the calendar\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ensure users can enter dates via the calendar or text input\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make sure error messages are specific about what input is required.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"hide the date format\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use international date formats such as USA mm/dd/yyyy\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"hijack built-in keyboard navigation behaviour.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tracking the input value\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Date picker component has two methods of input:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Typing in a date string (dd/mm/yyyy) via the text input\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Selecting a date via the calendar widget\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As we do not have any sort of input masking due to accessibility and user experience concerns, it is possible for the user to enter an invalid value via the text input.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this case, you can use the \", _jsx(_components.code, {\n        children: \"onInputChange\"\n      }), \" prop to keep track of the user’s input. The \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" prop can also be set to a string, which represents the value of the text input.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\t// Set the value to a value that the user might think is valid\\n\\tconst [value, setValue] = React.useState('31/1o/2020');\\n\\n\\tconst onInputChange = (value) => {\\n\\t\\tconsole.log('onInputChange', value);\\n\\t\\tsetValue(value);\\n\\t};\\n\\n\\tconst onChange = (date) => {\\n\\t\\tconsole.log('onChange', date);\\n\\t\\tsetValue(date);\\n\\t};\\n\\n\\t// This logic is for documentation purposes only. This should be done with `yup` or `zod`.\\n\\tconst invalid = React.useMemo(() => {\\n\\t\\tif (typeof value === 'undefined' || value == '') return false;\\n\\t\\tif (value instanceof Date && !isNaN(value.getTime())) return false;\\n\\t\\treturn true;\\n\\t}, [value]);\\n\\n\\treturn (\\n\\t\\t<DatePicker\\n\\t\\t\\tlabel=\\\"Select date\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={onChange}\\n\\t\\t\\tonInputChange={onInputChange}\\n\\t\\t\\t{...(invalid && {\\n\\t\\t\\t\\tinvalid: true,\\n\\t\\t\\t\\tmessage: 'Enter a valid date',\\n\\t\\t\\t})}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hint\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hint\"\n      }), \" prop to provide help that’s relevant to the majority of users, like how their information will be used, or where to find it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t use long paragraphs and lists in hint text. Screen readers read out the entire text when users interact with the form element. This could frustrate users if the text is long.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn (\\n\\t\\t<DatePicker\\n\\t\\t\\tlabel=\\\"Select date\\\"\\n\\t\\t\\thint=\\\"Hint text\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Block\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"block\"\n      }), \" prop to expand the component to fill the available space.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn (\\n\\t\\t<DatePicker label=\\\"Select date\\\" value={value} onChange={setValue} block />\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn (\\n\\t\\t<DatePicker\\n\\t\\t\\tlabel=\\\"Invalid\\\"\\n\\t\\t\\tinvalid\\n\\t\\t\\tmessage=\\\"Enter a valid date\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Disabled input elements are unusable and can not be clicked. This prevents a user from interacting with the input element until another action is complete.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn (\\n\\t\\t<DatePicker\\n\\t\\t\\tlabel=\\\"Select date\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tdisabled\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Minimum and maximum dates\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"minDate\"\n      }), \" property can be used to disable any days before a specific date.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"maxDate\"\n      }), \" property can be used to disable any days after a specific date.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a valid date is entered using the text input but it falls outside the constrained range, the closest valid date will be used.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\n\\tconst today = new Date();\\n\\tconst lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\\n\\tconst nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\\n\\n\\treturn (\\n\\t\\t<DatePicker\\n\\t\\t\\tlabel=\\\"Select date\\\"\\n\\t\\t\\tminDate={lastWeek}\\n\\t\\t\\tmaxDate={nextWeek}\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom year range\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"yearRange\"\n      }), \" prop can be used to change the range of options to display in calendar year select.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst thisYear = new Date().getFullYear();\\n\\tconst yearRange = { from: thisYear - 2, to: thisYear + 2 };\\n\\treturn (\\n\\t\\t<DatePicker\\n\\t\\t\\tlabel=\\\"Select date\\\"\\n\\t\\t\\tyearRange={yearRange}\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Changing the date format\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Date picker component allows users to enter dates in various formats. To select the 18th February 2023, a user could input '18/02/2023', '18 Feb 2023', '18th February 2023', or any other supported date format.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a valid date is typed, on blur, the date will be formatted using the \", _jsx(_components.code, {\n        children: \"dateFormat\"\n      }), \" prop, which is set to \", _jsx(_components.code, {\n        children: \"'dd/MM/yyyy'\"\n      }), \" by default.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To modify the date format, you can change the \", _jsx(_components.code, {\n        children: \"dateFormat\"\n      }), \" prop to one of these supported date formats:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'dd/MM/yyyy'\"\n        }), \" (e.g. 18/02/2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'dd-MM-yyyy'\"\n        }), \" (e.g. 18-02-2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'dd MM yyyy'\"\n        }), \" (e.g. 18 02 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MM/dd/yyyy'\"\n        }), \" (e.g. 02/18/2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MM-dd-yyyy'\"\n        }), \" (e.g. 02-18-2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MM dd yyyy'\"\n        }), \" (e.g. 02 18 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'do MMMM yyyy'\"\n        }), \" (e.g. 8th February 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'do MMM yyyy'\"\n        }), \" (e.g. 8th Feb 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MMMM do yyyy'\"\n        }), \" (e.g. February 8th 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MMM do yyyy'\"\n        }), \" (e.g. Feb 8th 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'d MMMM yyyy'\"\n        }), \" (e.g. 8 February 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'d MMM yyyy'\"\n        }), \" (e.g. 8 Feb 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MMMM d yyyy'\"\n        }), \" (e.g. February 8 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MMM d yyyy'\"\n        }), \" (e.g. Feb 8 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'dd MMMM yyyy'\"\n        }), \" (e.g. 08 February 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'dd MMM yyyy'\"\n        }), \" (e.g. 08 Feb 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MMMM dd yyyy'\"\n        }), \" (e.g. February 08 2023)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"'MMM dd yyyy'\"\n        }), \" (e.g. Feb 08 2023)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\treturn (\\n\\t\\t<DatePicker\\n\\t\\t\\tlabel=\\\"Select date\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={setValue}\\n\\t\\t\\tdateFormat=\\\"d MMM yyyy\\\"\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Changing the allowed date formats\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, all of the supported date formats are allowed, but should you need to restrict the formats that can be parsed and validated, you can pass in an array of date format strings to the \", _jsx(_components.code, {\n        children: \"allowedDateFormats\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some applications may find it useful to remove US formats, since an invalid AU date could become a valid US date and cause confusion for users.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Date formats are parsed in order from first to last and stops when a valid date is found. The preferred \", _jsx(_components.code, {\n        children: \"dateFormat\"\n      }), \" always becomes the first to check, even if omitted in \", _jsx(_components.code, {\n        children: \"allowedDateFormats\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\n\\tconst onInputChange = (value) => {\\n\\t\\tconsole.log('onInputChange', value);\\n\\t\\tsetValue(value);\\n\\t};\\n\\n\\tconst onChange = (date) => {\\n\\t\\tconsole.log('onChange', date);\\n\\t\\tsetValue(date);\\n\\t};\\n\\n\\t// This logic is for documentation purposes only. This should be done with `yup` or `zod`.\\n\\tconst invalid = React.useMemo(() => {\\n\\t\\tif (typeof value === 'undefined' || value == '') return false;\\n\\t\\tif (value instanceof Date && !isNaN(value.getTime())) return false;\\n\\t\\treturn true;\\n\\t}, [value]);\\n\\n\\treturn (\\n\\t\\t<DatePicker\\n\\t\\t\\tlabel=\\\"Select date\\\"\\n\\t\\t\\thint=\\\"Only short AU formats allowed\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={onChange}\\n\\t\\t\\tonInputChange={onInputChange}\\n\\t\\t\\t{...(invalid && {\\n\\t\\t\\t\\tinvalid: true,\\n\\t\\t\\t\\tmessage: 'Enter a valid date',\\n\\t\\t\\t})}\\n\\t\\t\\tallowedDateFormats={['dd MM yyyy', 'dd-MM-yyyy']}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Date picker","description":"The Date picker component allows users to select a single date via a calendar or text input.","group":"Forms","storybookPath":"/story/forms-datepicker-datepicker--basic","figmaGalleryNodeId":"12444%3A100327","relatedComponents":["date-picker-next","date-range-picker","date-range-picker-next"]}},"relatedPatterns":null,"relatedComponents":[{"slug":"date-picker-next","name":"date-picker-next","title":"Date picker (Next)","description":"The Date picker component allows users to select a single date via a calendar or text input.","storybookPath":"/story/forms-datepickerNext-datepickerNext--basic","figmaGalleryNodeId":"12444%3A100327","subNavItems":[{"label":"Overview","href":"/components/date-picker-next","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker-next/docs/overview.mdx"},{"label":"Code","href":"/components/date-picker-next/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker-next/docs/code.mdx"},{"label":"Accessibility","href":"/components/date-picker-next/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-picker-next/docs/accessibility.mdx"}],"relatedComponents":["date-range-picker-next"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"date-range-picker","name":"date-range-picker","title":"Date range picker","description":"The Date range picker component allows users to select a range of dates via a calendar or text input.","storybookPath":"/story/forms-daterangepicker--basic","figmaGalleryNodeId":"18834%3A97298","subNavItems":[{"label":"Overview","href":"/components/date-range-picker","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker/docs/overview.mdx"},{"label":"Code","href":"/components/date-range-picker/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker/docs/code.mdx"},{"label":"Accessibility","href":"/components/date-range-picker/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker/docs/accessibility.mdx"}],"relatedComponents":["date-picker-next","date-range-picker-next","date-picker"],"relatedPatterns":null,"deprecated":false,"unreleased":false},{"slug":"date-range-picker-next","name":"date-range-picker-next","title":"Date range picker (Next)","description":"The Date range picker component allows users to select a range of dates via a calendar or text input.","storybookPath":"/story/forms-daterangepickerNext--basic","figmaGalleryNodeId":"18834%3A97298","subNavItems":[{"label":"Overview","href":"/components/date-range-picker-next","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker-next/docs/overview.mdx"},{"label":"Code","href":"/components/date-range-picker-next/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker-next/docs/code.mdx"},{"label":"Accessibility","href":"/components/date-range-picker-next/accessibility","path":"/home/runner/work/agds-next/agds-next/packages/react/src/date-range-picker-next/docs/accessibility.mdx"}],"relatedComponents":["date-picker-next"],"relatedPatterns":null,"deprecated":false,"unreleased":false}]},"__N_SSG":true}