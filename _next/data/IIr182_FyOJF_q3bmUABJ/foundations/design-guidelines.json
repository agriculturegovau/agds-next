{"pageProps":{"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/foundations","label":"Foundations"},{"label":"Design guidelines"}],"foundation":{"slug":"design-guidelines","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Placement of actions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Align actions to the left margin or as close to supporting content as possible - it will ensure users of screen magnifiers can easily see and use them.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avoid aligning actions and links to the right margin, as this could impact users of screen magnifiers.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use the simplest pattern that works\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Users understand conventional form inputs and buttons. Don’t reinvent the wheel and design new components when current ones meet the needs of the user.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Progressive disclosure\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Progressive disclosure is a design pattern that allows users to access more information or functionality as they need it. It is a way of reducing cognitive load by only showing the user the information they need to see at any given time.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avoid placing important information inside Progressive Disclosure patterns such as Accordions, Tabs or Details. This information should be visible to the user without having to expand the content.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.a, {\n        href: \"/components/modal\",\n        children: \"Modal\"\n      }), \" is another form of progressive disclosure. They are used in AgDS to confirm actions that are potentially destructive. They are also used in certain cases for displaying a list of fields to enable data filtering, when the amount of space needed isn’t practical to display on the main app page. Modals should be used sparingly and only when other patterns, such as accordions, details or another page, are not suitable. Don’t use a modal to contain a user flow such as a form or content.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dropdowns and tooltips\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avoid using dropdowns and tooltips as they can be difficult to use on mobile devices and for those with fine motor skill disabilities.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Always explore more simple solutions to fly outs and pop ups and make sure the solution works on desktop and touch devices.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need to provide additional information, consider using a \", _jsx(_components.a, {\n        href: \"/components/details\",\n        children: \"Details\"\n      }), \" component instead.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Navigation patterns\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When designing navigation components, always consider small devices to make sure the solution is responsive and scalable.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don’t rely on sideways scroll on nav bars unless you provide sufficient affordance that content is off the page.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Interactive elements\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Interactive elements, like links and buttons, should be clearly indicated to users through the use of consistent style treatments. Use the \", _jsx(_components.code, {\n        children: \"action\"\n      }), \" token (blue) for interactive elements. Don’t use the action colour for non-interactive components as it could confuse users. Also make sure you don’t rely on colour alone to indicate that a component is interactive, use additional visual cues.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When hovering an interactive element, you should communicate the change appropriately. Examples include inverting the underline, adding a shade background, and/or changing the colour of the text to \", _jsx(_components.code, {\n        children: \"body\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A coloured border below or aside an element (along with appropriate ARIA attributes) can be used to communicate a selected state.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Try to ensure interactive elements are large enough to be easily tappable on mobile devices.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Design guidelines","description":"Guidelines for how we design."}},"content":"\n## Placement of actions\n\nAlign actions to the left margin or as close to supporting content as possible - it will ensure users of screen magnifiers can easily see and use them.\n\nAvoid aligning actions and links to the right margin, as this could impact users of screen magnifiers.\n\n## Use the simplest pattern that works\n\nUsers understand conventional form inputs and buttons. Don’t reinvent the wheel and design new components when current ones meet the needs of the user.\n\n## Progressive disclosure\n\nProgressive disclosure is a design pattern that allows users to access more information or functionality as they need it. It is a way of reducing cognitive load by only showing the user the information they need to see at any given time.\n\nAvoid placing important information inside Progressive Disclosure patterns such as Accordions, Tabs or Details. This information should be visible to the user without having to expand the content.\n\nA [Modal](/components/modal) is another form of progressive disclosure. They are used in AgDS to confirm actions that are potentially destructive. They are also used in certain cases for displaying a list of fields to enable data filtering, when the amount of space needed isn’t practical to display on the main app page. Modals should be used sparingly and only when other patterns, such as accordions, details or another page, are not suitable. Don’t use a modal to contain a user flow such as a form or content.\n\n## Dropdowns and tooltips\n\nAvoid using dropdowns and tooltips as they can be difficult to use on mobile devices and for those with fine motor skill disabilities.\n\nAlways explore more simple solutions to fly outs and pop ups and make sure the solution works on desktop and touch devices.\n\nIf you need to provide additional information, consider using a [Details](/components/details) component instead.\n\n## Navigation patterns\n\nWhen designing navigation components, always consider small devices to make sure the solution is responsive and scalable.\n\nDon’t rely on sideways scroll on nav bars unless you provide sufficient affordance that content is off the page.\n\n## Interactive elements\n\nInteractive elements, like links and buttons, should be clearly indicated to users through the use of consistent style treatments. Use the `action` token (blue) for interactive elements. Don’t use the action colour for non-interactive components as it could confuse users. Also make sure you don’t rely on colour alone to indicate that a component is interactive, use additional visual cues.\n\nWhen hovering an interactive element, you should communicate the change appropriately. Examples include inverting the underline, adding a shade background, and/or changing the colour of the text to `body`.\n\nA coloured border below or aside an element (along with appropriate ARIA attributes) can be used to communicate a selected state.\n\nTry to ensure interactive elements are large enough to be easily tappable on mobile devices.\n","data":{"title":"Design guidelines","description":"Guidelines for how we design."},"title":"Design guidelines","description":"Guidelines for how we design."},"toc":[{"id":"placement-of-actions","title":"Placement of actions","level":2,"slug":"placement-of-actions","items":[]},{"id":"use-the-simplest-pattern-that-works","title":"Use the simplest pattern that works","level":2,"slug":"use-the-simplest-pattern-that-works","items":[]},{"id":"progressive-disclosure","title":"Progressive disclosure","level":2,"slug":"progressive-disclosure","items":[]},{"id":"dropdowns-and-tooltips","title":"Dropdowns and tooltips","level":2,"slug":"dropdowns-and-tooltips","items":[]},{"id":"navigation-patterns","title":"Navigation patterns","level":2,"slug":"navigation-patterns","items":[]},{"id":"interactive-elements","title":"Interactive elements","level":2,"slug":"interactive-elements","items":[]}]},"__N_SSG":true}