{"pageProps":{"pkg":{"slug":"autocomplete","source":{"compiledSource":"var _=Object.defineProperty,v=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var u=(e,n,r)=>n in e?_(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,a=(e,n)=>{for(var r in n||(n={}))o.call(n,r)&&u(e,r,n[r]);if(l)for(var r of l(n))i.call(n,r)&&u(e,r,n[r]);return e},s=(e,n)=>v(e,p(n));var c=(e,n)=>{var r={};for(var t in e)o.call(e,t)&&n.indexOf(t)<0&&(r[t]=e[t]);if(e!=null&&l)for(var t of l(e))n.indexOf(t)<0&&i.call(e,t)&&(r[t]=e[t]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var t=r,{components:e}=t,n=c(t,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Basic\"),mdx(\"p\",null,\"By default, the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Autocomplete\"),\" component does not expand to fill the available space.\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\\\n\\\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"next\\\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"throw\\\\\", err); } _next(undefined); }); }; }\\\\n\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(null),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    return /*#__PURE__*/React.createElement(Autocomplete, {\\\\n      label: \\\\\"Find your state\\\\\",\\\\n      hint: \\\\\"Start typing to see results\\\\\",\\\\n      value: value,\\\\n      onChange: function onChange(value) {\\\\n        return setValue(value);\\\\n      },\\\\n      loadOptions: /*#__PURE__*/function () {\\\\n        var _loadOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputValue) {\\\\n          return regeneratorRuntime.wrap(function _callee$(_context) {\\\\n            while (1) {\\\\n              switch (_context.prev = _context.next) {\\\\n                case 0:\\\\n                  _context.next = 2;\\\\n                  return new Promise(function (resolve) {\\\\n                    return setTimeout(resolve, 3000);\\\\n                  });\\\\n\\\\n                case 2:\\\\n                  return _context.abrupt(\\\\\"return\\\\\", [{\\\\n                    label: 'Australian Capital Territory',\\\\n                    value: 'act'\\\\n                  }, {\\\\n                    label: 'New South Wales',\\\\n                    value: 'nsw'\\\\n                  }, {\\\\n                    label: 'Northern Territory',\\\\n                    value: 'nt'\\\\n                  }, {\\\\n                    label: 'Queensland',\\\\n                    value: 'qld'\\\\n                  }, {\\\\n                    label: 'South Australia',\\\\n                    value: 'sa'\\\\n                  }, {\\\\n                    label: 'Tasmania',\\\\n                    value: 'tas'\\\\n                  }, {\\\\n                    label: 'Victoria',\\\\n                    value: 'vic'\\\\n                  }, {\\\\n                    label: 'Western Australia',\\\\n                    value: 'wa'\\\\n                  }]);\\\\n\\\\n                case 3:\\\\n                case \\\\\"end\\\\\":\\\\n                  return _context.stop();\\\\n              }\\\\n            }\\\\n          }, _callee);\\\\n        }));\\\\n\\\\n        function loadOptions(_x) {\\\\n          return _loadOptions.apply(this, arguments);\\\\n        }\\\\n\\\\n        return loadOptions;\\\\n      }()\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"React\",\"Autocomplete\",\"Promise\",\"setTimeout\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState(null);\n    return (\n        <Autocomplete\n            label=\"Find your state\"\n            hint=\"Start typing to see results\"\n            value={value}\n            onChange={(value) => setValue(value)}\n            loadOptions={async function loadOptions(inputValue) {\n                // Simulate a slow network call\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                return [\n                    { label: 'Australian Capital Territory', value: 'act' },\n                    { label: 'New South Wales', value: 'nsw' },\n                    { label: 'Northern Territory', value: 'nt' },\n                    { label: 'Queensland', value: 'qld' },\n                    { label: 'South Australia', value: 'sa' },\n                    { label: 'Tasmania', value: 'tas' },\n                    { label: 'Victoria', value: 'vic' },\n                    { label: 'Western Australia', value: 'wa' },\n                ];\n            }}\n        />\n    );\n};\n`)),mdx(\"h3\",null,\"Required\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Autocomplete\"),\" component will always append \",mdx(\"inlineCode\",{parentName:\"p\"},\"(optional)\"),\" to the label based on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"required\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\\\n\\\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"next\\\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"throw\\\\\", err); } _next(undefined); }); }; }\\\\n\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(null),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    return /*#__PURE__*/React.createElement(Autocomplete, {\\\\n      label: \\\\\"Find your state\\\\\",\\\\n      hint: \\\\\"Start typing to see results\\\\\",\\\\n      required: true,\\\\n      value: value,\\\\n      onChange: function onChange(value) {\\\\n        return setValue(value);\\\\n      },\\\\n      loadOptions: /*#__PURE__*/function () {\\\\n        var _loadOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputValue) {\\\\n          return regeneratorRuntime.wrap(function _callee$(_context) {\\\\n            while (1) {\\\\n              switch (_context.prev = _context.next) {\\\\n                case 0:\\\\n                  _context.next = 2;\\\\n                  return new Promise(function (resolve) {\\\\n                    return setTimeout(resolve, 3000);\\\\n                  });\\\\n\\\\n                case 2:\\\\n                  return _context.abrupt(\\\\\"return\\\\\", [{\\\\n                    label: 'Australian Capital Territory',\\\\n                    value: 'act'\\\\n                  }, {\\\\n                    label: 'New South Wales',\\\\n                    value: 'nsw'\\\\n                  }, {\\\\n                    label: 'Northern Territory',\\\\n                    value: 'nt'\\\\n                  }, {\\\\n                    label: 'Queensland',\\\\n                    value: 'qld'\\\\n                  }, {\\\\n                    label: 'South Australia',\\\\n                    value: 'sa'\\\\n                  }, {\\\\n                    label: 'Tasmania',\\\\n                    value: 'tas'\\\\n                  }, {\\\\n                    label: 'Victoria',\\\\n                    value: 'vic'\\\\n                  }, {\\\\n                    label: 'Western Australia',\\\\n                    value: 'wa'\\\\n                  }]);\\\\n\\\\n                case 3:\\\\n                case \\\\\"end\\\\\":\\\\n                  return _context.stop();\\\\n              }\\\\n            }\\\\n          }, _callee);\\\\n        }));\\\\n\\\\n        function loadOptions(_x) {\\\\n          return _loadOptions.apply(this, arguments);\\\\n        }\\\\n\\\\n        return loadOptions;\\\\n      }()\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"React\",\"Autocomplete\",\"Promise\",\"setTimeout\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState(null);\n    return (\n        <Autocomplete\n            label=\"Find your state\"\n            hint=\"Start typing to see results\"\n            required\n            value={value}\n            onChange={(value) => setValue(value)}\n            loadOptions={async function loadOptions(inputValue) {\n                // Simulate a slow network call\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                return [\n                    { label: 'Australian Capital Territory', value: 'act' },\n                    { label: 'New South Wales', value: 'nsw' },\n                    { label: 'Northern Territory', value: 'nt' },\n                    { label: 'Queensland', value: 'qld' },\n                    { label: 'South Australia', value: 'sa' },\n                    { label: 'Tasmania', value: 'tas' },\n                    { label: 'Victoria', value: 'vic' },\n                    { label: 'Western Australia', value: 'wa' },\n                ];\n            }}\n        />\n    );\n};\n`)),mdx(\"h2\",null,\"Block\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"block\"),\" prop to expand the component to fill the available space.\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\\\n\\\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"next\\\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"throw\\\\\", err); } _next(undefined); }); }; }\\\\n\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(null),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    return /*#__PURE__*/React.createElement(Autocomplete, {\\\\n      label: \\\\\"Find your state\\\\\",\\\\n      hint: \\\\\"Start typing to see results\\\\\",\\\\n      block: true,\\\\n      value: value,\\\\n      onChange: function onChange(value) {\\\\n        return setValue(value);\\\\n      },\\\\n      loadOptions: /*#__PURE__*/function () {\\\\n        var _loadOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputValue) {\\\\n          return regeneratorRuntime.wrap(function _callee$(_context) {\\\\n            while (1) {\\\\n              switch (_context.prev = _context.next) {\\\\n                case 0:\\\\n                  _context.next = 2;\\\\n                  return new Promise(function (resolve) {\\\\n                    return setTimeout(resolve, 3000);\\\\n                  });\\\\n\\\\n                case 2:\\\\n                  return _context.abrupt(\\\\\"return\\\\\", [{\\\\n                    label: 'Australian Capital Territory',\\\\n                    value: 'act'\\\\n                  }, {\\\\n                    label: 'New South Wales',\\\\n                    value: 'nsw'\\\\n                  }, {\\\\n                    label: 'Northern Territory',\\\\n                    value: 'nt'\\\\n                  }, {\\\\n                    label: 'Queensland',\\\\n                    value: 'qld'\\\\n                  }, {\\\\n                    label: 'South Australia',\\\\n                    value: 'sa'\\\\n                  }, {\\\\n                    label: 'Tasmania',\\\\n                    value: 'tas'\\\\n                  }, {\\\\n                    label: 'Victoria',\\\\n                    value: 'vic'\\\\n                  }, {\\\\n                    label: 'Western Australia',\\\\n                    value: 'wa'\\\\n                  }]);\\\\n\\\\n                case 3:\\\\n                case \\\\\"end\\\\\":\\\\n                  return _context.stop();\\\\n              }\\\\n            }\\\\n          }, _callee);\\\\n        }));\\\\n\\\\n        function loadOptions(_x) {\\\\n          return _loadOptions.apply(this, arguments);\\\\n        }\\\\n\\\\n        return loadOptions;\\\\n      }()\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"React\",\"Autocomplete\",\"Promise\",\"setTimeout\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState(null);\n    return (\n        <Autocomplete\n            label=\"Find your state\"\n            hint=\"Start typing to see results\"\n            block\n            value={value}\n            onChange={(value) => setValue(value)}\n            loadOptions={async function loadOptions(inputValue) {\n                // Simulate a slow network call\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                return [\n                    { label: 'Australian Capital Territory', value: 'act' },\n                    { label: 'New South Wales', value: 'nsw' },\n                    { label: 'Northern Territory', value: 'nt' },\n                    { label: 'Queensland', value: 'qld' },\n                    { label: 'South Australia', value: 'sa' },\n                    { label: 'Tasmania', value: 'tas' },\n                    { label: 'Victoria', value: 'vic' },\n                    { label: 'Western Australia', value: 'wa' },\n                ];\n            }}\n        />\n    );\n};\n`)),mdx(\"h2\",null,\"Invalid\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\\\n\\\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"next\\\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"throw\\\\\", err); } _next(undefined); }); }; }\\\\n\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(null),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var invalid = !value;\\\\n    return /*#__PURE__*/React.createElement(Autocomplete, {\\\\n      label: \\\\\"Find your state\\\\\",\\\\n      hint: \\\\\"Start typing to see results\\\\\",\\\\n      invalid: invalid,\\\\n      message: invalid ? 'State is required' : undefined,\\\\n      value: value,\\\\n      onChange: function onChange(value) {\\\\n        return setValue(value);\\\\n      },\\\\n      loadOptions: /*#__PURE__*/function () {\\\\n        var _loadOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputValue) {\\\\n          return regeneratorRuntime.wrap(function _callee$(_context) {\\\\n            while (1) {\\\\n              switch (_context.prev = _context.next) {\\\\n                case 0:\\\\n                  _context.next = 2;\\\\n                  return new Promise(function (resolve) {\\\\n                    return setTimeout(resolve, 3000);\\\\n                  });\\\\n\\\\n                case 2:\\\\n                  return _context.abrupt(\\\\\"return\\\\\", [{\\\\n                    label: 'Australian Capital Territory',\\\\n                    value: 'act'\\\\n                  }, {\\\\n                    label: 'New South Wales',\\\\n                    value: 'nsw'\\\\n                  }, {\\\\n                    label: 'Northern Territory',\\\\n                    value: 'nt'\\\\n                  }, {\\\\n                    label: 'Queensland',\\\\n                    value: 'qld'\\\\n                  }, {\\\\n                    label: 'South Australia',\\\\n                    value: 'sa'\\\\n                  }, {\\\\n                    label: 'Tasmania',\\\\n                    value: 'tas'\\\\n                  }, {\\\\n                    label: 'Victoria',\\\\n                    value: 'vic'\\\\n                  }, {\\\\n                    label: 'Western Australia',\\\\n                    value: 'wa'\\\\n                  }]);\\\\n\\\\n                case 3:\\\\n                case \\\\\"end\\\\\":\\\\n                  return _context.stop();\\\\n              }\\\\n            }\\\\n          }, _callee);\\\\n        }));\\\\n\\\\n        function loadOptions(_x) {\\\\n          return _loadOptions.apply(this, arguments);\\\\n        }\\\\n\\\\n        return loadOptions;\\\\n      }()\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"React\",\"Autocomplete\",\"undefined\",\"Promise\",\"setTimeout\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState(null);\n    const invalid = !value;\n    return (\n        <Autocomplete\n            label=\"Find your state\"\n            hint=\"Start typing to see results\"\n            invalid={invalid}\n            message={invalid ? 'State is required' : undefined}\n            value={value}\n            onChange={(value) => setValue(value)}\n            loadOptions={async function loadOptions(inputValue) {\n                // Simulate a slow network call\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                return [\n                    { label: 'Australian Capital Territory', value: 'act' },\n                    { label: 'New South Wales', value: 'nsw' },\n                    { label: 'Northern Territory', value: 'nt' },\n                    { label: 'Queensland', value: 'qld' },\n                    { label: 'South Australia', value: 'sa' },\n                    { label: 'Tasmania', value: 'tas' },\n                    { label: 'Victoria', value: 'vic' },\n                    { label: 'Western Australia', value: 'wa' },\n                ];\n            }}\n        />\n    );\n};\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Autocomplete","description":"Autocompletes allow users to search through a set of options fetched over the network based on their input","group":"Forms","storybookPath":"/story/forms-autocomplete--basic"}},"data":{"title":"Autocomplete","description":"Autocompletes allow users to search through a set of options fetched over the network based on their input","group":"Forms","storybookPath":"/story/forms-autocomplete--basic"},"name":"@ag.ds-next/autocomplete","version":"0.0.1","title":"Autocomplete","storybookPath":"/story/forms-autocomplete--basic","subNavItems":[{"label":"Overview","href":"/packages/forms/autocomplete","path":"/home/runner/work/agds-next/agds-next/packages/autocomplete/docs/overview.mdx"},{"label":"Code","href":"/packages/forms/autocomplete/code","path":"/home/runner/work/agds-next/agds-next/packages/autocomplete/docs/code.mdx"}]},"navLinks":[{"label":"Brand","href":"/packages/brand"},{"label":"Content","href":"/packages/content"},{"label":"Forms","href":"/packages/forms","items":[{"label":"Autocomplete","href":"/packages/forms/autocomplete"},{"label":"Button","href":"/packages/forms/button"},{"label":"Combobox","href":"/packages/forms/combobox"},{"label":"Control Input","href":"/packages/forms/control-input"},{"label":"Date Picker","href":"/packages/forms/date-picker"},{"label":"Field","href":"/packages/forms/field"},{"label":"Fieldset","href":"/packages/forms/fieldset"},{"label":"File Upload","href":"/packages/forms/file-upload"},{"label":"Form Stack","href":"/packages/forms/form-stack"},{"label":"Progress Indicator","href":"/packages/forms/progress-indicator"},{"label":"Search Box","href":"/packages/forms/search-box"},{"label":"Select","href":"/packages/forms/select"},{"label":"Switch","href":"/packages/forms/switch"},{"label":"Task List","href":"/packages/forms/task-list"},{"label":"Text Input","href":"/packages/forms/text-input"},{"label":"Textarea","href":"/packages/forms/textarea"}]},{"label":"Foundations","href":"/packages/foundations"},{"label":"Layout","href":"/packages/layout"},{"label":"Navigation","href":"/packages/navigation"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/packages","label":"Packages"},{"href":"/packages/forms","label":"Forms"},{"label":"Autocomplete"}],"content":{"compiledSource":"var _=Object.defineProperty,v=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var u=(e,n,r)=>n in e?_(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,a=(e,n)=>{for(var r in n||(n={}))o.call(n,r)&&u(e,r,n[r]);if(l)for(var r of l(n))i.call(n,r)&&u(e,r,n[r]);return e},s=(e,n)=>v(e,p(n));var c=(e,n)=>{var r={};for(var t in e)o.call(e,t)&&n.indexOf(t)<0&&(r[t]=e[t]);if(e!=null&&l)for(var t of l(e))n.indexOf(t)<0&&i.call(e,t)&&(r[t]=e[t]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var t=r,{components:e}=t,n=c(t,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Basic\"),mdx(\"p\",null,\"By default, the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Autocomplete\"),\" component does not expand to fill the available space.\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\\\n\\\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"next\\\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"throw\\\\\", err); } _next(undefined); }); }; }\\\\n\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(null),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    return /*#__PURE__*/React.createElement(Autocomplete, {\\\\n      label: \\\\\"Find your state\\\\\",\\\\n      hint: \\\\\"Start typing to see results\\\\\",\\\\n      value: value,\\\\n      onChange: function onChange(value) {\\\\n        return setValue(value);\\\\n      },\\\\n      loadOptions: /*#__PURE__*/function () {\\\\n        var _loadOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputValue) {\\\\n          return regeneratorRuntime.wrap(function _callee$(_context) {\\\\n            while (1) {\\\\n              switch (_context.prev = _context.next) {\\\\n                case 0:\\\\n                  _context.next = 2;\\\\n                  return new Promise(function (resolve) {\\\\n                    return setTimeout(resolve, 3000);\\\\n                  });\\\\n\\\\n                case 2:\\\\n                  return _context.abrupt(\\\\\"return\\\\\", [{\\\\n                    label: 'Australian Capital Territory',\\\\n                    value: 'act'\\\\n                  }, {\\\\n                    label: 'New South Wales',\\\\n                    value: 'nsw'\\\\n                  }, {\\\\n                    label: 'Northern Territory',\\\\n                    value: 'nt'\\\\n                  }, {\\\\n                    label: 'Queensland',\\\\n                    value: 'qld'\\\\n                  }, {\\\\n                    label: 'South Australia',\\\\n                    value: 'sa'\\\\n                  }, {\\\\n                    label: 'Tasmania',\\\\n                    value: 'tas'\\\\n                  }, {\\\\n                    label: 'Victoria',\\\\n                    value: 'vic'\\\\n                  }, {\\\\n                    label: 'Western Australia',\\\\n                    value: 'wa'\\\\n                  }]);\\\\n\\\\n                case 3:\\\\n                case \\\\\"end\\\\\":\\\\n                  return _context.stop();\\\\n              }\\\\n            }\\\\n          }, _callee);\\\\n        }));\\\\n\\\\n        function loadOptions(_x) {\\\\n          return _loadOptions.apply(this, arguments);\\\\n        }\\\\n\\\\n        return loadOptions;\\\\n      }()\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"React\",\"Autocomplete\",\"Promise\",\"setTimeout\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState(null);\n    return (\n        <Autocomplete\n            label=\"Find your state\"\n            hint=\"Start typing to see results\"\n            value={value}\n            onChange={(value) => setValue(value)}\n            loadOptions={async function loadOptions(inputValue) {\n                // Simulate a slow network call\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                return [\n                    { label: 'Australian Capital Territory', value: 'act' },\n                    { label: 'New South Wales', value: 'nsw' },\n                    { label: 'Northern Territory', value: 'nt' },\n                    { label: 'Queensland', value: 'qld' },\n                    { label: 'South Australia', value: 'sa' },\n                    { label: 'Tasmania', value: 'tas' },\n                    { label: 'Victoria', value: 'vic' },\n                    { label: 'Western Australia', value: 'wa' },\n                ];\n            }}\n        />\n    );\n};\n`)),mdx(\"h3\",null,\"Required\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Autocomplete\"),\" component will always append \",mdx(\"inlineCode\",{parentName:\"p\"},\"(optional)\"),\" to the label based on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"required\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\\\n\\\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"next\\\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"throw\\\\\", err); } _next(undefined); }); }; }\\\\n\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(null),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    return /*#__PURE__*/React.createElement(Autocomplete, {\\\\n      label: \\\\\"Find your state\\\\\",\\\\n      hint: \\\\\"Start typing to see results\\\\\",\\\\n      required: true,\\\\n      value: value,\\\\n      onChange: function onChange(value) {\\\\n        return setValue(value);\\\\n      },\\\\n      loadOptions: /*#__PURE__*/function () {\\\\n        var _loadOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputValue) {\\\\n          return regeneratorRuntime.wrap(function _callee$(_context) {\\\\n            while (1) {\\\\n              switch (_context.prev = _context.next) {\\\\n                case 0:\\\\n                  _context.next = 2;\\\\n                  return new Promise(function (resolve) {\\\\n                    return setTimeout(resolve, 3000);\\\\n                  });\\\\n\\\\n                case 2:\\\\n                  return _context.abrupt(\\\\\"return\\\\\", [{\\\\n                    label: 'Australian Capital Territory',\\\\n                    value: 'act'\\\\n                  }, {\\\\n                    label: 'New South Wales',\\\\n                    value: 'nsw'\\\\n                  }, {\\\\n                    label: 'Northern Territory',\\\\n                    value: 'nt'\\\\n                  }, {\\\\n                    label: 'Queensland',\\\\n                    value: 'qld'\\\\n                  }, {\\\\n                    label: 'South Australia',\\\\n                    value: 'sa'\\\\n                  }, {\\\\n                    label: 'Tasmania',\\\\n                    value: 'tas'\\\\n                  }, {\\\\n                    label: 'Victoria',\\\\n                    value: 'vic'\\\\n                  }, {\\\\n                    label: 'Western Australia',\\\\n                    value: 'wa'\\\\n                  }]);\\\\n\\\\n                case 3:\\\\n                case \\\\\"end\\\\\":\\\\n                  return _context.stop();\\\\n              }\\\\n            }\\\\n          }, _callee);\\\\n        }));\\\\n\\\\n        function loadOptions(_x) {\\\\n          return _loadOptions.apply(this, arguments);\\\\n        }\\\\n\\\\n        return loadOptions;\\\\n      }()\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"React\",\"Autocomplete\",\"Promise\",\"setTimeout\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState(null);\n    return (\n        <Autocomplete\n            label=\"Find your state\"\n            hint=\"Start typing to see results\"\n            required\n            value={value}\n            onChange={(value) => setValue(value)}\n            loadOptions={async function loadOptions(inputValue) {\n                // Simulate a slow network call\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                return [\n                    { label: 'Australian Capital Territory', value: 'act' },\n                    { label: 'New South Wales', value: 'nsw' },\n                    { label: 'Northern Territory', value: 'nt' },\n                    { label: 'Queensland', value: 'qld' },\n                    { label: 'South Australia', value: 'sa' },\n                    { label: 'Tasmania', value: 'tas' },\n                    { label: 'Victoria', value: 'vic' },\n                    { label: 'Western Australia', value: 'wa' },\n                ];\n            }}\n        />\n    );\n};\n`)),mdx(\"h2\",null,\"Block\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"block\"),\" prop to expand the component to fill the available space.\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\\\n\\\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"next\\\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"throw\\\\\", err); } _next(undefined); }); }; }\\\\n\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(null),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    return /*#__PURE__*/React.createElement(Autocomplete, {\\\\n      label: \\\\\"Find your state\\\\\",\\\\n      hint: \\\\\"Start typing to see results\\\\\",\\\\n      block: true,\\\\n      value: value,\\\\n      onChange: function onChange(value) {\\\\n        return setValue(value);\\\\n      },\\\\n      loadOptions: /*#__PURE__*/function () {\\\\n        var _loadOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputValue) {\\\\n          return regeneratorRuntime.wrap(function _callee$(_context) {\\\\n            while (1) {\\\\n              switch (_context.prev = _context.next) {\\\\n                case 0:\\\\n                  _context.next = 2;\\\\n                  return new Promise(function (resolve) {\\\\n                    return setTimeout(resolve, 3000);\\\\n                  });\\\\n\\\\n                case 2:\\\\n                  return _context.abrupt(\\\\\"return\\\\\", [{\\\\n                    label: 'Australian Capital Territory',\\\\n                    value: 'act'\\\\n                  }, {\\\\n                    label: 'New South Wales',\\\\n                    value: 'nsw'\\\\n                  }, {\\\\n                    label: 'Northern Territory',\\\\n                    value: 'nt'\\\\n                  }, {\\\\n                    label: 'Queensland',\\\\n                    value: 'qld'\\\\n                  }, {\\\\n                    label: 'South Australia',\\\\n                    value: 'sa'\\\\n                  }, {\\\\n                    label: 'Tasmania',\\\\n                    value: 'tas'\\\\n                  }, {\\\\n                    label: 'Victoria',\\\\n                    value: 'vic'\\\\n                  }, {\\\\n                    label: 'Western Australia',\\\\n                    value: 'wa'\\\\n                  }]);\\\\n\\\\n                case 3:\\\\n                case \\\\\"end\\\\\":\\\\n                  return _context.stop();\\\\n              }\\\\n            }\\\\n          }, _callee);\\\\n        }));\\\\n\\\\n        function loadOptions(_x) {\\\\n          return _loadOptions.apply(this, arguments);\\\\n        }\\\\n\\\\n        return loadOptions;\\\\n      }()\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"React\",\"Autocomplete\",\"Promise\",\"setTimeout\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState(null);\n    return (\n        <Autocomplete\n            label=\"Find your state\"\n            hint=\"Start typing to see results\"\n            block\n            value={value}\n            onChange={(value) => setValue(value)}\n            loadOptions={async function loadOptions(inputValue) {\n                // Simulate a slow network call\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                return [\n                    { label: 'Australian Capital Territory', value: 'act' },\n                    { label: 'New South Wales', value: 'nsw' },\n                    { label: 'Northern Territory', value: 'nt' },\n                    { label: 'Queensland', value: 'qld' },\n                    { label: 'South Australia', value: 'sa' },\n                    { label: 'Tasmania', value: 'tas' },\n                    { label: 'Victoria', value: 'vic' },\n                    { label: 'Western Australia', value: 'wa' },\n                ];\n            }}\n        />\n    );\n};\n`)),mdx(\"h2\",null,\"Invalid\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\\\n\\\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"next\\\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\\\"throw\\\\\", err); } _next(undefined); }); }; }\\\\n\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\n\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\"); }\\\\n\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\"string\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\"Object\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\"Map\\\\\" || n === \\\\\"Set\\\\\") return Array.from(o); if (n === \\\\\"Arguments\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\n\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\\\n\\\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\\\"undefined\\\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\\\"return\\\\\"] != null) _i[\\\\\"return\\\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\\\n\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\n\\\\nfunction Example() {\\\\n  return function () {\\\\n    var _React$useState = React.useState(null),\\\\n        _React$useState2 = _slicedToArray(_React$useState, 2),\\\\n        value = _React$useState2[0],\\\\n        setValue = _React$useState2[1];\\\\n\\\\n    var invalid = !value;\\\\n    return /*#__PURE__*/React.createElement(Autocomplete, {\\\\n      label: \\\\\"Find your state\\\\\",\\\\n      hint: \\\\\"Start typing to see results\\\\\",\\\\n      invalid: invalid,\\\\n      message: invalid ? 'State is required' : undefined,\\\\n      value: value,\\\\n      onChange: function onChange(value) {\\\\n        return setValue(value);\\\\n      },\\\\n      loadOptions: /*#__PURE__*/function () {\\\\n        var _loadOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputValue) {\\\\n          return regeneratorRuntime.wrap(function _callee$(_context) {\\\\n            while (1) {\\\\n              switch (_context.prev = _context.next) {\\\\n                case 0:\\\\n                  _context.next = 2;\\\\n                  return new Promise(function (resolve) {\\\\n                    return setTimeout(resolve, 3000);\\\\n                  });\\\\n\\\\n                case 2:\\\\n                  return _context.abrupt(\\\\\"return\\\\\", [{\\\\n                    label: 'Australian Capital Territory',\\\\n                    value: 'act'\\\\n                  }, {\\\\n                    label: 'New South Wales',\\\\n                    value: 'nsw'\\\\n                  }, {\\\\n                    label: 'Northern Territory',\\\\n                    value: 'nt'\\\\n                  }, {\\\\n                    label: 'Queensland',\\\\n                    value: 'qld'\\\\n                  }, {\\\\n                    label: 'South Australia',\\\\n                    value: 'sa'\\\\n                  }, {\\\\n                    label: 'Tasmania',\\\\n                    value: 'tas'\\\\n                  }, {\\\\n                    label: 'Victoria',\\\\n                    value: 'vic'\\\\n                  }, {\\\\n                    label: 'Western Australia',\\\\n                    value: 'wa'\\\\n                  }]);\\\\n\\\\n                case 3:\\\\n                case \\\\\"end\\\\\":\\\\n                  return _context.stop();\\\\n              }\\\\n            }\\\\n          }, _callee);\\\\n        }));\\\\n\\\\n        function loadOptions(_x) {\\\\n          return _loadOptions.apply(this, arguments);\\\\n        }\\\\n\\\\n        return loadOptions;\\\\n      }()\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"React\",\"Autocomplete\",\"undefined\",\"Promise\",\"setTimeout\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const [value, setValue] = React.useState(null);\n    const invalid = !value;\n    return (\n        <Autocomplete\n            label=\"Find your state\"\n            hint=\"Start typing to see results\"\n            invalid={invalid}\n            message={invalid ? 'State is required' : undefined}\n            value={value}\n            onChange={(value) => setValue(value)}\n            loadOptions={async function loadOptions(inputValue) {\n                // Simulate a slow network call\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                return [\n                    { label: 'Australian Capital Territory', value: 'act' },\n                    { label: 'New South Wales', value: 'nsw' },\n                    { label: 'Northern Territory', value: 'nt' },\n                    { label: 'Queensland', value: 'qld' },\n                    { label: 'South Australia', value: 'sa' },\n                    { label: 'Tasmania', value: 'tas' },\n                    { label: 'Victoria', value: 'vic' },\n                    { label: 'Western Australia', value: 'wa' },\n                ];\n            }}\n        />\n    );\n};\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Autocomplete","description":"Autocompletes allow users to search through a set of options fetched over the network based on their input","group":"Forms","storybookPath":"/story/forms-autocomplete--basic"}}},"__N_SSG":true}