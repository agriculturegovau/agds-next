{"pageProps":{"pkg":{"slug":"columns","source":{"compiledSource":"var c=Object.defineProperty,i=Object.defineProperties;var r=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var d=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var m=(e,n,a)=>n in e?c(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,t=(e,n)=>{for(var a in n||(n={}))d.call(n,a)&&m(e,a,n[a]);if(l)for(var a of l(n))s.call(n,a)&&m(e,a,n[a]);return e},p=(e,n)=>i(e,r(n));var u=(e,n)=>{var a={};for(var o in e)d.call(e,o)&&n.indexOf(o)<0&&(a[o]=e[o]);if(e!=null&&l)for(var o of l(e))n.indexOf(o)<0&&s.call(e,o)&&(a[o]=e[o]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var o=a,{components:e}=o,n=u(o,[\"components\"]);return mdx(MDXLayout,p(t(t({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"This package includes the components \",mdx(\"inlineCode\",{parentName:\"p\"},\"<Columns />\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"<Column />\"),\".\"),mdx(\"h2\",null,\"Columns\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Columns\"),\" component creates a 12 column grid by default. You can use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"cols\"),\" prop to specify how many columns are needed. As a general rule, we prefer layouts to have 1 column for mobile and 2 columns for tablet viewports.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Columns, {\\\\n    gap: 1.5,\\\\n    cols: {\\\\n      xs: 1,\\\\n      sm: 2,\\\\n      md: 3\\\\n    }\\\\n  }, /*#__PURE__*/React.createElement(Box, {\\\\n    background: \\\\\"shadeAlt\\\\\",\\\\n    padding: 1\\\\n  }), /*#__PURE__*/React.createElement(Box, {\\\\n    background: \\\\\"shadeAlt\\\\\",\\\\n    padding: 1\\\\n  }), /*#__PURE__*/React.createElement(Box, {\\\\n    background: \\\\\"shadeAlt\\\\\",\\\\n    padding: 1\\\\n  }), /*#__PURE__*/React.createElement(Box, {\\\\n    background: \\\\\"shadeAlt\\\\\",\\\\n    padding: 1\\\\n  }), /*#__PURE__*/React.createElement(Box, {\\\\n    background: \\\\\"shadeAlt\\\\\",\\\\n    padding: 1\\\\n  }));\\\\n}\",\"globals\":[\"Columns\",\"Box\"],\"exampleType\":\"jsx\"}'}),`<Columns gap={1.5} cols={{ xs: 1, sm: 2, md: 3 }}>\n    <Box background=\"shadeAlt\" padding={1} />\n    <Box background=\"shadeAlt\" padding={1} />\n    <Box background=\"shadeAlt\" padding={1} />\n    <Box background=\"shadeAlt\" padding={1} />\n    <Box background=\"shadeAlt\" padding={1} />\n</Columns>\n`)),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"gap\"),\" prop effects both the row and column gap. To set a different gap for rows and column, you can use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"columnGap\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"rowGap\"),\" props.\"),mdx(\"h2\",null,\"Column\"),mdx(\"p\",null,\"You can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"Column\"),\" to make an item span multiple columns.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Columns, {\\\\n    gap: 1.5,\\\\n    cols: {\\\\n      xs: 1,\\\\n      md: 3\\\\n    }\\\\n  }, /*#__PURE__*/React.createElement(Box, {\\\\n    background: \\\\\"shadeAlt\\\\\",\\\\n    padding: 1\\\\n  }), /*#__PURE__*/React.createElement(Column, {\\\\n    columnSpan: {\\\\n      xs: 1,\\\\n      md: 2\\\\n    }\\\\n  }, /*#__PURE__*/React.createElement(Box, {\\\\n    background: \\\\\"shadeAlt\\\\\",\\\\n    padding: 1\\\\n  })));\\\\n}\",\"globals\":[\"Columns\",\"Box\",\"Column\"],\"exampleType\":\"jsx\"}'}),`<Columns gap={1.5} cols={{ xs: 1, md: 3 }}>\n    <Box background=\"shadeAlt\" padding={1} />\n    <Column columnSpan={{ xs: 1, md: 2 }}>\n        <Box background=\"shadeAlt\" padding={1} />\n    </Column>\n</Columns>\n`)),mdx(\"h3\",null,\"Column start and end\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"columnStart\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"columnEnd\"),\" props can be used to determine the Column's start and end location within the row.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Column, {\\\\n    columnStart: 3,\\\\n    columnEnd: 9\\\\n  }, /*#__PURE__*/React.createElement(Box, {\\\\n    background: \\\\\"shadeAlt\\\\\",\\\\n    padding: 1\\\\n  })));\\\\n}\",\"globals\":[\"Columns\",\"Column\",\"Box\"],\"exampleType\":\"jsx\"}'}),`<Columns>\n    <Column columnStart={3} columnEnd={9}>\n        <Box background=\"shadeAlt\" padding={1} />\n    </Column>\n</Columns>\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Columns","description":"A grid consists of a framework of cells laid out and aligned vertically and horizontally. It helps users read and visually navigate website content more easily, using a responsive, scrollable column structure.","group":"Layout","storybookPath":"/story/layout-columns--basic"}},"data":{"title":"Columns","description":"A grid consists of a framework of cells laid out and aligned vertically and horizontally. It helps users read and visually navigate website content more easily, using a responsive, scrollable column structure.","group":"Layout","storybookPath":"/story/layout-columns--basic"},"name":"@ag.ds-next/columns","version":"8.0.0","title":"Columns","storybookPath":"/story/layout-columns--basic","subNavItems":[{"label":"Overview","href":"/packages/layout/columns","path":"/home/runner/work/agds-next/agds-next/packages/columns/docs/overview.mdx"},{"label":"Code","href":"/packages/layout/columns/code","path":"/home/runner/work/agds-next/agds-next/packages/columns/docs/code.mdx"}]},"navLinks":[{"label":"Brand","href":"/packages/brand"},{"label":"Content","href":"/packages/content"},{"label":"Forms","href":"/packages/forms"},{"label":"Foundations","href":"/packages/foundations"},{"label":"Layout","href":"/packages/layout","items":[{"label":"Accordion","href":"/packages/layout/accordion"},{"label":"Card","href":"/packages/layout/card"},{"label":"Columns","href":"/packages/layout/columns"},{"label":"Content","href":"/packages/layout/content"},{"label":"Footer","href":"/packages/layout/footer"},{"label":"Header","href":"/packages/layout/header"},{"label":"Hero Banner","href":"/packages/layout/hero-banner"}]},{"label":"Navigation","href":"/packages/navigation"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/packages","label":"Packages"},{"href":"/packages/layout","label":"Layout"},{"href":"/packages/layout/columns","label":"Columns"},{"label":"Code"}],"content":{"compiledSource":"var d=Object.defineProperty,l=Object.defineProperties;var C=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var m=(o,n,e)=>n in o?d(o,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[n]=e,r=(o,n)=>{for(var e in n||(n={}))a.call(n,e)&&m(o,e,n[e]);if(p)for(var e of p(n))s.call(n,e)&&m(o,e,n[e]);return o},u=(o,n)=>l(o,C(n));var c=(o,n)=>{var e={};for(var t in o)a.call(o,t)&&n.indexOf(t)<0&&(e[t]=o[t]);if(o!=null&&p)for(var t of p(o))n.indexOf(t)<0&&s.call(o,t)&&(e[t]=o[t]);return e};const makeShortcode=o=>function(e){return console.warn(\"Component \"+o+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",r({},e))},ComponentPropsTable=makeShortcode(\"ComponentPropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(e){var t=e,{components:o}=t,n=c(t,[\"components\"]);return mdx(MDXLayout,u(r(r({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Props\"),mdx(ComponentPropsTable,{name:\"Columns\",mdxType:\"ComponentPropsTable\"}),mdx(ComponentPropsTable,{name:\"Column\",mdxType:\"ComponentPropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}