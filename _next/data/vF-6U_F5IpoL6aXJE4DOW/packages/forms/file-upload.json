{"pageProps":{"pkg":{"slug":"file-upload","source":{"compiledSource":"var r=Object.defineProperty,u=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var m=(e,i,a)=>i in e?r(e,i,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[i]=a,n=(e,i)=>{for(var a in i||(i={}))p.call(i,a)&&m(e,a,i[a]);if(t)for(var a of t(i))o.call(i,a)&&m(e,a,i[a]);return e},s=(e,i)=>u(e,c(i));var d=(e,i)=>{var a={};for(var l in e)p.call(e,l)&&i.indexOf(l)<0&&(a[l]=e[l]);if(e!=null&&t)for(var l of t(e))i.indexOf(l)<0&&o.call(e,l)&&(a[l]=e[l]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var l=a,{components:e}=l,i=d(l,[\"components\"]);return mdx(MDXLayout,s(n(n({},layoutProps),i),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"FileUpload\"),\" is a \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://reactjs.org/docs/forms.html#controlled-components\"}),\"controlled component\"),\".\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(FileUpload, {\\\\n    label: \\\\\"Avatar image\\\\\",\\\\n    hint: \\\\\"Formats accepted: .png, .jpg.\\\\\",\\\\n    multiple: false,\\\\n    accept: ['image/jpeg', 'image/jpg', 'image/png']\\\\n  });\\\\n}\",\"globals\":[\"FileUpload\"],\"exampleType\":\"jsx\"}`}),`<FileUpload\n    label=\"Avatar image\"\n    hint=\"Formats accepted: .png, .jpg.\"\n    multiple={false}\n    accept={['image/jpeg', 'image/jpg', 'image/png']}\n/>\n`)),mdx(\"h2\",null,\"Indicating upload status\"),mdx(\"p\",null,'When using FileUpload, you need to consider how the communicate to the user that the upload is in progress. Otherwise the page will appear \"frozen\" as the operation happens in the background.'),mdx(\"h3\",null,\"Uploading on submission\"),mdx(\"p\",null,\"In this example, we are submitting a file as part of a typical form submission to an API.\"),mdx(\"p\",null,\"We recommend wrapping the FileUpload in a LoadingBanner as the form submits, to indicate to the user that any delays are being caused by a potentially larger file being uploaded. If your backend system supports it, you can also use this UI to indicate upload status as a percentage.\"),mdx(\"p\",null,\"As normal, we indicate that the form is submitting by adding a \",mdx(\"inlineCode\",{parentName:\"p\"},\"loading={true}\"),\" to the submit button. This will show animated dots to signify that the user has to wait for the operation to complete.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(FormStack, null, /*#__PURE__*/React.createElement(\\\\\"div\\\\\", {\\\\n    style: {\\\\n      position: 'relative'\\\\n    }\\\\n  }, /*#__PURE__*/React.createElement(FileUpload, {\\\\n    label: \\\\\"Avatar image\\\\\",\\\\n    hint: \\\\\"Formats accepted: .png, .jpg.\\\\\",\\\\n    multiple: false,\\\\n    accept: ['image/jpeg', 'image/jpg', 'image/png']\\\\n  }), /*#__PURE__*/React.createElement(LoadingBlanket, {\\\\n    label: \\\\\"Uploading file (53%)\\\\\"\\\\n  })), /*#__PURE__*/React.createElement(\\\\\"div\\\\\", null, /*#__PURE__*/React.createElement(Button, {\\\\n    loading: true\\\\n  }, \\\\\"Submit\\\\\")));\\\\n}\",\"globals\":[\"FormStack\",\"FileUpload\",\"LoadingBlanket\",\"Button\"],\"exampleType\":\"jsx\"}`}),`<FormStack>\n    <div style={{ position: 'relative' }}>\n        <FileUpload\n            label=\"Avatar image\"\n            hint=\"Formats accepted: .png, .jpg.\"\n            multiple={false}\n            accept={['image/jpeg', 'image/jpg', 'image/png']}\n        />\n        <LoadingBlanket label=\"Uploading file (53%)\" />\n    </div>\n    <div>\n        <Button loading>Submit</Button>\n    </div>\n</FormStack>\n`)),mdx(\"h3\",null,\"Uploading files instantly\"),mdx(\"p\",null,\"In this example, the file is instantly uploaded to a file hosting service, and the URL of the uploaded asset would be added to the form for submission. This means the form should not be allowed to submit until all assets are uploaded, but that the submission should be very quick as it's only text content being submitted.\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"FileUpload\"),\" component allows you to indicate the status of an upload via a \",mdx(\"inlineCode\",{parentName:\"p\"},\"file.status\"),\" property.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return function () {\\\\n    var uploadingFile = new File(['this is an example file'], 'example.jpg', {\\\\n      type: 'image/jpg'\\\\n    });\\\\n    uploadingFile.status = 'uploading';\\\\n    var uploadedFile = new File(['this is another example file that has uploaded'], 'example.jpg', {\\\\n      type: 'image/jpg'\\\\n    });\\\\n    uploadedFile.status = 'success';\\\\n    return /*#__PURE__*/React.createElement(FileUpload, {\\\\n      label: \\\\\"Avatar image\\\\\",\\\\n      hint: \\\\\"Formats accepted: .png, .jpg.\\\\\",\\\\n      multiple: false,\\\\n      accept: ['image/jpeg', 'image/jpg', 'image/png'],\\\\n      value: [uploadedFile, uploadingFile],\\\\n      onChange: console.log\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"File\",\"FileUpload\",\"console\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const uploadingFile = new File(['this is an example file'], 'example.jpg', {\n        type: 'image/jpg',\n    });\n    uploadingFile.status = 'uploading';\n    const uploadedFile = new File(\n        ['this is another example file that has uploaded'],\n        'example.jpg',\n        {\n            type: 'image/jpg',\n        }\n    );\n    uploadedFile.status = 'success';\n    return (\n        <FileUpload\n            label=\"Avatar image\"\n            hint=\"Formats accepted: .png, .jpg.\"\n            multiple={false}\n            accept={['image/jpeg', 'image/jpg', 'image/png']}\n            value={[uploadedFile, uploadingFile]}\n            onChange={console.log}\n        />\n    );\n};\n`)),mdx(\"hr\",null),mdx(\"h2\",null,\"Props\"),mdx(\"h3\",null,\"Multiple files\"),mdx(\"p\",null,\"Selecting multiple files is also supported with FileUpload. Simply add \",mdx(\"inlineCode\",{parentName:\"p\"},\"multiple={true}\"),\", and you can select as many files as you want. You can also set \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxFiles\"),\" to limit how many files can be selected.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<FileUpload multiple={true} maxFiles={3} />\n`)),mdx(\"h3\",null,\"Maximum size\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxSize\"),\" prop to set a maximum size for each file. This value is measured in kB.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<FileUpload maxSize={200} /> // 200kB\n<FileUpload maxSize={20000} /> // 20MB\n`)),mdx(\"h3\",null,\"Accepted files\"),mdx(\"p\",null,\"Using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"accept\"),\" prop, you can specify what filetypes are allowed to be selected. Filetypes include...\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/msword\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/pdf\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/rtf\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/vnd.ms-excel\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"),\" (.xls)\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"),\" (.doc)\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/zip\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"audio/*\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"audio/mpeg\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"audio/wav\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/*\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/gif\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/heic\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/jpeg\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/png\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/svg+xml\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/tiff\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/webp\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"text/*\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"text/csv\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"text/plain\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"text/rtf\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"video/*\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"video/mp4\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"video/mpeg\"))),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<FileUpload accept={['image/jpeg', 'image/jpg', 'image/png']} />\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"File Upload","description":"Allows a user to insert a file into a form, via drag-and-drop or using the system file browser.","group":"Forms","storybookPath":"/story/forms-fileupload--on-light"}},"data":{"title":"File Upload","description":"Allows a user to insert a file into a form, via drag-and-drop or using the system file browser.","group":"Forms","storybookPath":"/story/forms-fileupload--on-light"},"name":"@ag.ds-next/file-upload","version":"3.0.0","title":"File Upload","storybookPath":"/story/forms-fileupload--on-light","subNavItems":null},"navLinks":[{"label":"Brand","href":"/packages/brand"},{"label":"Content","href":"/packages/content"},{"label":"Forms","href":"/packages/forms","items":[{"label":"Button","href":"/packages/forms/button"},{"label":"Control Input","href":"/packages/forms/control-input"},{"label":"Date Picker","href":"/packages/forms/date-picker"},{"label":"Field","href":"/packages/forms/field"},{"label":"Fieldset","href":"/packages/forms/fieldset"},{"label":"File Upload","href":"/packages/forms/file-upload"},{"label":"Form Stack","href":"/packages/forms/form-stack"},{"label":"Progress Indicator","href":"/packages/forms/progress-indicator"},{"label":"Search Box","href":"/packages/forms/search-box"},{"label":"Select","href":"/packages/forms/select"},{"label":"Switch","href":"/packages/forms/switch"},{"label":"Task List","href":"/packages/forms/task-list"},{"label":"Text Input","href":"/packages/forms/text-input"},{"label":"Textarea","href":"/packages/forms/textarea"}]},{"label":"Foundations","href":"/packages/foundations"},{"label":"Layout","href":"/packages/layout"},{"label":"Navigation","href":"/packages/navigation"}],"breadcrumbs":[{"href":"/packages","label":"Packages"},{"href":"/packages/forms","label":"Forms"},{"label":"File Upload"}],"content":{"compiledSource":"var r=Object.defineProperty,u=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var m=(e,i,a)=>i in e?r(e,i,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[i]=a,n=(e,i)=>{for(var a in i||(i={}))p.call(i,a)&&m(e,a,i[a]);if(t)for(var a of t(i))o.call(i,a)&&m(e,a,i[a]);return e},s=(e,i)=>u(e,c(i));var d=(e,i)=>{var a={};for(var l in e)p.call(e,l)&&i.indexOf(l)<0&&(a[l]=e[l]);if(e!=null&&t)for(var l of t(e))i.indexOf(l)<0&&o.call(e,l)&&(a[l]=e[l]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var l=a,{components:e}=l,i=d(l,[\"components\"]);return mdx(MDXLayout,s(n(n({},layoutProps),i),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"FileUpload\"),\" is a \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://reactjs.org/docs/forms.html#controlled-components\"}),\"controlled component\"),\".\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(FileUpload, {\\\\n    label: \\\\\"Avatar image\\\\\",\\\\n    hint: \\\\\"Formats accepted: .png, .jpg.\\\\\",\\\\n    multiple: false,\\\\n    accept: ['image/jpeg', 'image/jpg', 'image/png']\\\\n  });\\\\n}\",\"globals\":[\"FileUpload\"],\"exampleType\":\"jsx\"}`}),`<FileUpload\n    label=\"Avatar image\"\n    hint=\"Formats accepted: .png, .jpg.\"\n    multiple={false}\n    accept={['image/jpeg', 'image/jpg', 'image/png']}\n/>\n`)),mdx(\"h2\",null,\"Indicating upload status\"),mdx(\"p\",null,'When using FileUpload, you need to consider how the communicate to the user that the upload is in progress. Otherwise the page will appear \"frozen\" as the operation happens in the background.'),mdx(\"h3\",null,\"Uploading on submission\"),mdx(\"p\",null,\"In this example, we are submitting a file as part of a typical form submission to an API.\"),mdx(\"p\",null,\"We recommend wrapping the FileUpload in a LoadingBanner as the form submits, to indicate to the user that any delays are being caused by a potentially larger file being uploaded. If your backend system supports it, you can also use this UI to indicate upload status as a percentage.\"),mdx(\"p\",null,\"As normal, we indicate that the form is submitting by adding a \",mdx(\"inlineCode\",{parentName:\"p\"},\"loading={true}\"),\" to the submit button. This will show animated dots to signify that the user has to wait for the operation to complete.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(FormStack, null, /*#__PURE__*/React.createElement(\\\\\"div\\\\\", {\\\\n    style: {\\\\n      position: 'relative'\\\\n    }\\\\n  }, /*#__PURE__*/React.createElement(FileUpload, {\\\\n    label: \\\\\"Avatar image\\\\\",\\\\n    hint: \\\\\"Formats accepted: .png, .jpg.\\\\\",\\\\n    multiple: false,\\\\n    accept: ['image/jpeg', 'image/jpg', 'image/png']\\\\n  }), /*#__PURE__*/React.createElement(LoadingBlanket, {\\\\n    label: \\\\\"Uploading file (53%)\\\\\"\\\\n  })), /*#__PURE__*/React.createElement(\\\\\"div\\\\\", null, /*#__PURE__*/React.createElement(Button, {\\\\n    loading: true\\\\n  }, \\\\\"Submit\\\\\")));\\\\n}\",\"globals\":[\"FormStack\",\"FileUpload\",\"LoadingBlanket\",\"Button\"],\"exampleType\":\"jsx\"}`}),`<FormStack>\n    <div style={{ position: 'relative' }}>\n        <FileUpload\n            label=\"Avatar image\"\n            hint=\"Formats accepted: .png, .jpg.\"\n            multiple={false}\n            accept={['image/jpeg', 'image/jpg', 'image/png']}\n        />\n        <LoadingBlanket label=\"Uploading file (53%)\" />\n    </div>\n    <div>\n        <Button loading>Submit</Button>\n    </div>\n</FormStack>\n`)),mdx(\"h3\",null,\"Uploading files instantly\"),mdx(\"p\",null,\"In this example, the file is instantly uploaded to a file hosting service, and the URL of the uploaded asset would be added to the form for submission. This means the form should not be allowed to submit until all assets are uploaded, but that the submission should be very quick as it's only text content being submitted.\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"FileUpload\"),\" component allows you to indicate the status of an upload via a \",mdx(\"inlineCode\",{parentName:\"p\"},\"file.status\"),\" property.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return function () {\\\\n    var uploadingFile = new File(['this is an example file'], 'example.jpg', {\\\\n      type: 'image/jpg'\\\\n    });\\\\n    uploadingFile.status = 'uploading';\\\\n    var uploadedFile = new File(['this is another example file that has uploaded'], 'example.jpg', {\\\\n      type: 'image/jpg'\\\\n    });\\\\n    uploadedFile.status = 'success';\\\\n    return /*#__PURE__*/React.createElement(FileUpload, {\\\\n      label: \\\\\"Avatar image\\\\\",\\\\n      hint: \\\\\"Formats accepted: .png, .jpg.\\\\\",\\\\n      multiple: false,\\\\n      accept: ['image/jpeg', 'image/jpg', 'image/png'],\\\\n      value: [uploadedFile, uploadingFile],\\\\n      onChange: console.log\\\\n    });\\\\n  };\\\\n}\",\"globals\":[\"File\",\"FileUpload\",\"console\"],\"exampleType\":\"jsx\"}`}),`() => {\n    const uploadingFile = new File(['this is an example file'], 'example.jpg', {\n        type: 'image/jpg',\n    });\n    uploadingFile.status = 'uploading';\n    const uploadedFile = new File(\n        ['this is another example file that has uploaded'],\n        'example.jpg',\n        {\n            type: 'image/jpg',\n        }\n    );\n    uploadedFile.status = 'success';\n    return (\n        <FileUpload\n            label=\"Avatar image\"\n            hint=\"Formats accepted: .png, .jpg.\"\n            multiple={false}\n            accept={['image/jpeg', 'image/jpg', 'image/png']}\n            value={[uploadedFile, uploadingFile]}\n            onChange={console.log}\n        />\n    );\n};\n`)),mdx(\"hr\",null),mdx(\"h2\",null,\"Props\"),mdx(\"h3\",null,\"Multiple files\"),mdx(\"p\",null,\"Selecting multiple files is also supported with FileUpload. Simply add \",mdx(\"inlineCode\",{parentName:\"p\"},\"multiple={true}\"),\", and you can select as many files as you want. You can also set \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxFiles\"),\" to limit how many files can be selected.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<FileUpload multiple={true} maxFiles={3} />\n`)),mdx(\"h3\",null,\"Maximum size\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxSize\"),\" prop to set a maximum size for each file. This value is measured in kB.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<FileUpload maxSize={200} /> // 200kB\n<FileUpload maxSize={20000} /> // 20MB\n`)),mdx(\"h3\",null,\"Accepted files\"),mdx(\"p\",null,\"Using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"accept\"),\" prop, you can specify what filetypes are allowed to be selected. Filetypes include...\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/msword\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/pdf\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/rtf\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/vnd.ms-excel\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"),\" (.xls)\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"),\" (.doc)\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"application/zip\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"audio/*\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"audio/mpeg\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"audio/wav\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/*\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/gif\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/heic\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/jpeg\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/png\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/svg+xml\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/tiff\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image/webp\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"text/*\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"text/csv\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"text/plain\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"text/rtf\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"video/*\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"video/mp4\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"video/mpeg\"))),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<FileUpload accept={['image/jpeg', 'image/jpg', 'image/png']} />\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"File Upload","description":"Allows a user to insert a file into a form, via drag-and-drop or using the system file browser.","group":"Forms","storybookPath":"/story/forms-fileupload--on-light"}}},"__N_SSG":true}