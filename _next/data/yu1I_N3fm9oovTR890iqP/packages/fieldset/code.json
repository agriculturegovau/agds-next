{"pageProps":{"pkg":{"slug":"fieldset","source":{"compiledSource":"var m=Object.defineProperty,p=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var d=(e,t,n)=>t in e?m(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,o=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&d(e,n,t[n]);if(r)for(var n of r(t))u.call(t,n)&&d(e,n,t[n]);return e},i=(e,t)=>p(e,c(t));var s=(e,t)=>{var n={};for(var a in e)l.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&r)for(var a of r(e))t.indexOf(a)<0&&u.call(e,a)&&(n[a]=e[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,t=s(a,[\"components\"]);return mdx(MDXLayout,i(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Fieldset is used to associate a number of related form fields as well as labels within a form. The legend provides an association and caption for the form fields in the fieldset.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Fieldset, {\\\\n    legend: \\\\\"What is your address?\\\\\",\\\\n    hint: \\\\\"We will only use this to respond to your request\\\\\"\\\\n  }, /*#__PURE__*/React.createElement(FormStack, null, /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Street and number\\\\\",\\\\n    required: true,\\\\n    autoComplete: \\\\\"street-address\\\\\",\\\\n    maxWidth: \\\\\"xl\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Suburb\\\\\",\\\\n    required: true,\\\\n    autoComplete: \\\\\"address-level2\\\\\",\\\\n    maxWidth: \\\\\"xl\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Country\\\\\",\\\\n    required: true,\\\\n    autoComplete: \\\\\"country\\\\\",\\\\n    maxWidth: \\\\\"xl\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Postcode\\\\\",\\\\n    required: true,\\\\n    autoComplete: \\\\\"postal-code\\\\\",\\\\n    maxWidth: \\\\\"sm\\\\\"\\\\n  })));\\\\n}\",\"globals\":[\"Fieldset\",\"FormStack\",\"TextInput\"],\"exampleType\":\"jsx\"}'}),`<Fieldset\n    legend=\"What is your address?\"\n    hint=\"We will only use this to respond to your request\"\n>\n    <FormStack>\n        <TextInput\n            label=\"Street and number\"\n            required\n            autoComplete=\"street-address\"\n            maxWidth=\"xl\"\n        />\n        <TextInput\n            label=\"Suburb\"\n            required\n            autoComplete=\"address-level2\"\n            maxWidth=\"xl\"\n        />\n        <TextInput label=\"Country\" required autoComplete=\"country\" maxWidth=\"xl\" />\n        <TextInput\n            label=\"Postcode\"\n            required\n            autoComplete=\"postal-code\"\n            maxWidth=\"sm\"\n        />\n    </FormStack>\n</Fieldset>\n`)),mdx(\"h3\",null,\"Legend as page heading\"),mdx(\"p\",null,\"If you\\u2019re asking just one question per page, you can set the contents of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"legend\"),\" as the page heading, as shown in the example below. This is good practice as it means that users of screen readers will only hear the contents once.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Fieldset, {\\\\n    legend: /*#__PURE__*/React.createElement(H1, null, \\\\\"What is your date of birth?\\\\\"),\\\\n    hint: /*#__PURE__*/React.createElement(Text, {\\\\n      as: \\\\\"p\\\\\",\\\\n      fontSize: \\\\\"md\\\\\",\\\\n      color: \\\\\"muted\\\\\"\\\\n    }, \\\\\"We will only use this to respond to your requests\\\\\")\\\\n  }, /*#__PURE__*/React.createElement(FormStack, null, /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Day\\\\\",\\\\n    inputMode: \\\\\"numeric\\\\\",\\\\n    maxWidth: \\\\\"md\\\\\",\\\\n    required: true,\\\\n    autoComplete: \\\\\"bday-day\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Month\\\\\",\\\\n    inputMode: \\\\\"numeric\\\\\",\\\\n    maxWidth: \\\\\"md\\\\\",\\\\n    required: true,\\\\n    autoComplete: \\\\\"bday-month\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Year\\\\\",\\\\n    inputMode: \\\\\"numeric\\\\\",\\\\n    maxWidth: \\\\\"md\\\\\",\\\\n    required: true,\\\\n    autoComplete: \\\\\"bday-year\\\\\"\\\\n  })));\\\\n}\",\"globals\":[\"Fieldset\",\"H1\",\"Text\",\"FormStack\",\"TextInput\"],\"exampleType\":\"jsx\"}'}),`<Fieldset\n    legend={<H1>What is your date of birth?</H1>}\n    hint={\n        <Text as=\"p\" fontSize=\"md\" color=\"muted\">\n            We will only use this to respond to your requests\n        </Text>\n    }\n>\n    <FormStack>\n        <TextInput\n            label=\"Day\"\n            inputMode=\"numeric\"\n            maxWidth=\"md\"\n            required\n            autoComplete=\"bday-day\"\n        />\n        <TextInput\n            label=\"Month\"\n            inputMode=\"numeric\"\n            maxWidth=\"md\"\n            required\n            autoComplete=\"bday-month\"\n        />\n        <TextInput\n            label=\"Year\"\n            inputMode=\"numeric\"\n            maxWidth=\"md\"\n            required\n            autoComplete=\"bday-year\"\n        />\n    </FormStack>\n</Fieldset>\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Fieldset","description":"Use the fieldset component to group related form inputs.","group":"Forms","storybookPath":"/story/forms-fieldset--basic"}},"data":{"title":"Fieldset","description":"Use the fieldset component to group related form inputs.","group":"Forms","storybookPath":"/story/forms-fieldset--basic"},"name":"@ag.ds-next/fieldset","version":"8.0.0","title":"Fieldset","storybookPath":"/story/forms-fieldset--basic","subNavItems":[{"label":"Overview","href":"/packages/fieldset","path":"/home/runner/work/agds-next/agds-next/packages/fieldset/docs/overview.mdx"},{"label":"Code","href":"/packages/fieldset/code","path":"/home/runner/work/agds-next/agds-next/packages/fieldset/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/packages/a11y"},{"label":"AG Branding","href":"/packages/ag-branding"},{"label":"Accordion","href":"/packages/accordion"},{"label":"Autocomplete","href":"/packages/autocomplete"},{"label":"Badge","href":"/packages/badge"},{"label":"Box","href":"/packages/box"},{"label":"Breadcrumbs","href":"/packages/breadcrumbs"},{"label":"Button","href":"/packages/button"},{"label":"Call To Action","href":"/packages/call-to-action"},{"label":"Callout","href":"/packages/callout"},{"label":"Card","href":"/packages/card"},{"label":"Columns","href":"/packages/columns"},{"label":"Combobox","href":"/packages/combobox"},{"label":"Content","href":"/packages/content"},{"label":"Control Input","href":"/packages/control-input"},{"label":"Core","href":"/packages/core"},{"label":"Date Picker","href":"/packages/date-picker"},{"label":"Details","href":"/packages/details"},{"label":"Direction Link","href":"/packages/direction-link"},{"label":"Field","href":"/packages/field"},{"label":"Fieldset","href":"/packages/fieldset"},{"label":"File Upload","href":"/packages/file-upload"},{"label":"Footer","href":"/packages/footer"},{"label":"Form Stack","href":"/packages/form-stack"},{"label":"Header","href":"/packages/header"},{"label":"Heading","href":"/packages/heading"},{"label":"Hero Banner","href":"/packages/hero-banner"},{"label":"Icon","href":"/packages/icon"},{"label":"Inpage Nav","href":"/packages/inpage-nav"},{"label":"Keyword List","href":"/packages/keyword-list"},{"label":"Link List","href":"/packages/link-list"},{"label":"Loading","href":"/packages/loading"},{"label":"Main Nav","href":"/packages/main-nav"},{"label":"Modal","href":"/packages/modal"},{"label":"Page Alert","href":"/packages/page-alert"},{"label":"Pagination","href":"/packages/pagination"},{"label":"Progress Indicator","href":"/packages/progress-indicator"},{"label":"Prose","href":"/packages/prose"},{"label":"Search Box","href":"/packages/search-box"},{"label":"Select","href":"/packages/select"},{"label":"Side Nav","href":"/packages/side-nav"},{"label":"Skeleton","href":"/packages/skeleton"},{"label":"Skip Link","href":"/packages/skip-link"},{"label":"Sub Nav","href":"/packages/sub-nav"},{"label":"Summary List","href":"/packages/summary-list"},{"label":"Switch","href":"/packages/switch"},{"label":"Table","href":"/packages/table"},{"label":"Tags","href":"/packages/tags"},{"label":"Task List","href":"/packages/task-list"},{"label":"Text","href":"/packages/text"},{"label":"Text Input","href":"/packages/text-input"},{"label":"Text Link","href":"/packages/text-link"},{"label":"Textarea","href":"/packages/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/packages","label":"Packages"},{"href":"/packages/fieldset","label":"Fieldset"},{"label":"Code"}],"content":{"compiledSource":"var l=Object.defineProperty,u=Object.defineProperties;var i=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var d=(o,e,n)=>e in o?l(o,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[e]=n,r=(o,e)=>{for(var n in e||(e={}))s.call(e,n)&&d(o,n,e[n]);if(p)for(var n of p(e))a.call(e,n)&&d(o,n,e[n]);return o},m=(o,e)=>u(o,i(e));var c=(o,e)=>{var n={};for(var t in o)s.call(o,t)&&e.indexOf(t)<0&&(n[t]=o[t]);if(o!=null&&p)for(var t of p(o))e.indexOf(t)<0&&a.call(o,t)&&(n[t]=o[t]);return n};const makeShortcode=o=>function(n){return console.warn(\"Component \"+o+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",r({},n))},ComponentPropsTable=makeShortcode(\"ComponentPropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:o}=t,e=c(t,[\"components\"]);return mdx(MDXLayout,m(r(r({},layoutProps),e),{components:o,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Props\"),mdx(ComponentPropsTable,{name:\"Fieldset\",mdxType:\"ComponentPropsTable\"}),mdx(ComponentPropsTable,{name:\"FieldsetLegend\",mdxType:\"ComponentPropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}