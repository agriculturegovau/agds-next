{"pageProps":{"pkg":{"slug":"field","source":{"compiledSource":"var u=Object.defineProperty,d=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var o=(e,t,a)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,l=(e,t)=>{for(var a in t||(t={}))i.call(t,a)&&o(e,a,t[a]);if(r)for(var a of r(t))s.call(t,a)&&o(e,a,t[a]);return e},p=(e,t)=>d(e,m(t));var c=(e,t)=>{var a={};for(var n in e)i.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(e!=null&&r)for(var n of r(e))t.indexOf(n)<0&&s.call(e,n)&&(a[n]=e[n]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var n=a,{components:e}=n,t=c(n,[\"components\"]);return mdx(MDXLayout,p(l(l({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h3\",null,\"Field\"),mdx(\"p\",null,\"The field component connects the label, description, and message to the input element.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Field, {\\\\n    label: \\\\\"Name\\\\\"\\\\n  }, function (a11yProps) {\\\\n    return /*#__PURE__*/React.createElement(\\\\\"input\\\\\", a11yProps);\\\\n  });\\\\n}\",\"globals\":[\"Field\"],\"exampleType\":\"jsx\"}'}),`<Field label=\"Name\">{(a11yProps) => <input {...a11yProps} />}</Field>\n`)),mdx(\"h3\",null,\"Required\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Field, {\\\\n    label: \\\\\"Name\\\\\",\\\\n    required: true\\\\n  }, function (a11yProps) {\\\\n    return /*#__PURE__*/React.createElement(\\\\\"input\\\\\", a11yProps);\\\\n  });\\\\n}\",\"globals\":[\"Field\"],\"exampleType\":\"jsx\"}'}),`<Field label=\"Name\" required>\n    {(a11yProps) => <input {...a11yProps} />}\n</Field>\n`)),mdx(\"h3\",null,\"Label\"),mdx(\"p\",null,\"Each text field must be accompanied by a label. Effective form labeling helps users understand what information to enter into a text input.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Field, {\\\\n    label: \\\\\"Name\\\\\"\\\\n  }, function (a11yProps) {\\\\n    return /*#__PURE__*/React.createElement(\\\\\"input\\\\\", a11yProps);\\\\n  });\\\\n}\",\"globals\":[\"Field\"],\"exampleType\":\"jsx\"}'}),`<Field label=\"Name\">{(a11yProps) => <input {...a11yProps} />}</Field>\n`)),mdx(\"h3\",null,\"Hint\"),mdx(\"p\",null,\"Hints can be used to provide more context that will help the user successfully complete the form field.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\\\n\\\\nfunction Example() {\\\\n  return /*#__PURE__*/React.createElement(Field, {\\\\n    label: \\\\\"Email\\\\\",\\\\n    hint: \\\\\"We will only use this to respond to your question\\\\\"\\\\n  }, function (a11yProps) {\\\\n    return /*#__PURE__*/React.createElement(\\\\\"input\\\\\", _extends({\\\\n      type: \\\\\"email\\\\\"\\\\n    }, a11yProps));\\\\n  });\\\\n}\",\"globals\":[\"Field\"],\"exampleType\":\"jsx\"}'}),`<Field label=\"Email\" hint=\"We will only use this to respond to your question\">\n    {(a11yProps) => <input type=\"email\" {...a11yProps} />}\n</Field>\n`)),mdx(\"h3\",null,\"Messages\"),mdx(\"p\",null,\"Error messages are used to notify the user when a form field has not passed validation. Use clear messages to explain what went wrong and how to fix it.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\\\n\\\\nfunction Example() {\\\\n  return /*#__PURE__*/React.createElement(Stack, {\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(Field, {\\\\n    label: \\\\\"Email\\\\\",\\\\n    invalid: true,\\\\n    message: \\\\\"Enter an email address in the correct format, like name@example.com\\\\\"\\\\n  }, function (a11yProps) {\\\\n    return /*#__PURE__*/React.createElement(\\\\\"input\\\\\", _extends({\\\\n      type: \\\\\"email\\\\\"\\\\n    }, a11yProps));\\\\n  }), /*#__PURE__*/React.createElement(Field, {\\\\n    label: \\\\\"Email\\\\\",\\\\n    valid: true,\\\\n    message: \\\\\"The email address you have entered is valid\\\\\"\\\\n  }, function (a11yProps) {\\\\n    return /*#__PURE__*/React.createElement(\\\\\"input\\\\\", _extends({\\\\n      type: \\\\\"email\\\\\"\\\\n    }, a11yProps));\\\\n  }));\\\\n}\",\"globals\":[\"Stack\",\"Field\"],\"exampleType\":\"jsx\"}'}),`<Stack gap={1}>\n    <Field\n        label=\"Email\"\n        invalid\n        message=\"Enter an email address in the correct format, like name@example.com\"\n    >\n        {(a11yProps) => <input type=\"email\" {...a11yProps} />}\n    </Field>\n    <Field\n        label=\"Email\"\n        valid\n        message=\"The email address you have entered is valid\"\n    >\n        {(a11yProps) => <input type=\"email\" {...a11yProps} />}\n    </Field>\n</Stack>\n`)),mdx(\"h3\",null,\"Required\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Field\"),\" component will always append \",mdx(\"inlineCode\",{parentName:\"p\"},\"(optional)\"),\" to the label based on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"required\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Field, {\\\\n    label: \\\\\"Start date\\\\\",\\\\n    required: false\\\\n  }, function (a11yProps) {\\\\n    return /*#__PURE__*/React.createElement(\\\\\"select\\\\\", a11yProps);\\\\n  });\\\\n}\",\"globals\":[\"Field\"],\"exampleType\":\"jsx\"}'}),`<Field label=\"Start date\" required={false}>\n    {(a11yProps) => <select {...a11yProps} />}\n</Field>\n`)),mdx(\"h2\",null,\"Hooks\"),mdx(\"h3\",null,mdx(\"inlineCode\",{parentName:\"h3\"},\"useScrollToField\")),mdx(\"p\",null,\"By default, the browser will scroll the target into view. Because our labels or legends appear above the input, this means the user will be presented with an input without any context, as the label or legend will be off the top of the screen. Manually handling the click event, scrolling the question into view and then focussing the element solves this.\"),mdx(\"p\",null,\"Please refer to the \",mdx(\"a\",l({parentName:\"p\"},{href:\"https://steelthreads.github.io/agds-next/example-site/single-page-form\"}),\"example site single-page form example\"),\" to see an example of this hook in use.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\"}),`function ExampleForm() {\n    const scrollToField = useScrollToField();\n    return (\n        <ul>\n            {Object.entries(errors).map(([id, errorMessage]) => (\n                <li key={id}>\n                    <a href={\\`#\\${id}\\`} onClick={scrollToField}>\n                        {errorMessage}\n                    </a>\n                </li>\n            ))}\n        </ul>\n    );\n}\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Field","description":"The field package exposes the elements around form inputs, and an API to compose them.","group":"Forms","storybookPath":"/story/forms-field--basic"}},"data":{"title":"Field","description":"The field package exposes the elements around form inputs, and an API to compose them.","group":"Forms","storybookPath":"/story/forms-field--basic"},"name":"@ag.ds-next/field","version":"11.0.0","title":"Field","storybookPath":"/story/forms-field--basic","subNavItems":[{"label":"Overview","href":"/packages/field","path":"/home/runner/work/agds-next/agds-next/packages/field/docs/overview.mdx"},{"label":"Code","href":"/packages/field/code","path":"/home/runner/work/agds-next/agds-next/packages/field/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/packages/a11y"},{"label":"AG Branding","href":"/packages/ag-branding"},{"label":"Accordion","href":"/packages/accordion"},{"label":"Autocomplete","href":"/packages/autocomplete"},{"label":"Badge","href":"/packages/badge"},{"label":"Box","href":"/packages/box"},{"label":"Breadcrumbs","href":"/packages/breadcrumbs"},{"label":"Button","href":"/packages/button"},{"label":"Call To Action","href":"/packages/call-to-action"},{"label":"Callout","href":"/packages/callout"},{"label":"Card","href":"/packages/card"},{"label":"Columns","href":"/packages/columns"},{"label":"Combobox","href":"/packages/combobox"},{"label":"Content","href":"/packages/content"},{"label":"Control Input","href":"/packages/control-input"},{"label":"Core","href":"/packages/core"},{"label":"Date Picker","href":"/packages/date-picker"},{"label":"Details","href":"/packages/details"},{"label":"Direction Link","href":"/packages/direction-link"},{"label":"Field","href":"/packages/field"},{"label":"Fieldset","href":"/packages/fieldset"},{"label":"File Upload","href":"/packages/file-upload"},{"label":"Footer","href":"/packages/footer"},{"label":"Form Stack","href":"/packages/form-stack"},{"label":"Header","href":"/packages/header"},{"label":"Heading","href":"/packages/heading"},{"label":"Hero Banner","href":"/packages/hero-banner"},{"label":"Icon","href":"/packages/icon"},{"label":"Inpage Nav","href":"/packages/inpage-nav"},{"label":"Keyword List","href":"/packages/keyword-list"},{"label":"Link List","href":"/packages/link-list"},{"label":"Loading","href":"/packages/loading"},{"label":"Main Nav","href":"/packages/main-nav"},{"label":"Modal","href":"/packages/modal"},{"label":"Page Alert","href":"/packages/page-alert"},{"label":"Pagination","href":"/packages/pagination"},{"label":"Progress Indicator","href":"/packages/progress-indicator"},{"label":"Prose","href":"/packages/prose"},{"label":"Search Box","href":"/packages/search-box"},{"label":"Select","href":"/packages/select"},{"label":"Side Nav","href":"/packages/side-nav"},{"label":"Skeleton","href":"/packages/skeleton"},{"label":"Skip Link","href":"/packages/skip-link"},{"label":"Sub Nav","href":"/packages/sub-nav"},{"label":"Summary List","href":"/packages/summary-list"},{"label":"Switch","href":"/packages/switch"},{"label":"Table","href":"/packages/table"},{"label":"Tags","href":"/packages/tags"},{"label":"Task List","href":"/packages/task-list"},{"label":"Text","href":"/packages/text"},{"label":"Text Input","href":"/packages/text-input"},{"label":"Text Link","href":"/packages/text-link"},{"label":"Textarea","href":"/packages/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/packages","label":"Packages"},{"href":"/packages/field","label":"Field"},{"label":"Code"}],"content":{"compiledSource":"var i=Object.defineProperty,T=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable;var s=(o,e,n)=>e in o?i(o,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[e]=n,a=(o,e)=>{for(var n in e||(e={}))r.call(e,n)&&s(o,n,e[n]);if(p)for(var n of p(e))m.call(e,n)&&s(o,n,e[n]);return o},d=(o,e)=>T(o,c(e));var l=(o,e)=>{var n={};for(var t in o)r.call(o,t)&&e.indexOf(t)<0&&(n[t]=o[t]);if(o!=null&&p)for(var t of p(o))e.indexOf(t)<0&&m.call(o,t)&&(n[t]=o[t]);return n};const makeShortcode=o=>function(n){return console.warn(\"Component \"+o+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",a({},n))},ComponentPropsTable=makeShortcode(\"ComponentPropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:o}=t,e=l(t,[\"components\"]);return mdx(MDXLayout,d(a(a({},layoutProps),e),{components:o,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Props\"),mdx(ComponentPropsTable,{name:\"Field\",mdxType:\"ComponentPropsTable\"}),mdx(ComponentPropsTable,{name:\"FieldContainer\",mdxType:\"ComponentPropsTable\"}),mdx(ComponentPropsTable,{name:\"FieldHint\",mdxType:\"ComponentPropsTable\"}),mdx(ComponentPropsTable,{name:\"FieldLabel\",mdxType:\"ComponentPropsTable\"}),mdx(ComponentPropsTable,{name:\"FieldMessage\",mdxType:\"ComponentPropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}