{"pageProps":{"pkg":{"slug":"fieldset","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Fieldset is used to associate a number of related form fields as well as labels within a form. The legend provides an association and caption for the form fields in the fieldset.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Fieldset\\n\\tlegend=\\\"What is your address?\\\"\\n\\thint=\\\"We will only use this to respond to your request\\\"\\n>\\n\\t<FormStack>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Street and number\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"street-address\\\"\\n\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t/>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Suburb\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"address-level2\\\"\\n\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t/>\\n\\t\\t<TextInput label=\\\"Country\\\" required autoComplete=\\\"country\\\" maxWidth=\\\"xl\\\" />\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Postcode\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"postal-code\\\"\\n\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t/>\\n\\t</FormStack>\\n</Fieldset>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Legend as page heading\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you’re asking just one question per page, you can set the contents of the \", _jsx(_components.code, {\n        children: \"legend\"\n      }), \" as the page heading, as shown in the example below. This is good practice as it means that users of screen readers will only hear the contents once.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Fieldset\\n\\tlegend={<H1>What is your date of birth?</H1>}\\n\\thint={\\n\\t\\t<Text as=\\\"p\\\" fontSize=\\\"md\\\" color=\\\"muted\\\">\\n\\t\\t\\tWe will only use this to respond to your requests\\n\\t\\t</Text>\\n\\t}\\n>\\n\\t<FormStack>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Day\\\"\\n\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\tmaxWidth=\\\"md\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"bday-day\\\"\\n\\t\\t/>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Month\\\"\\n\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\tmaxWidth=\\\"md\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"bday-month\\\"\\n\\t\\t/>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Year\\\"\\n\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\tmaxWidth=\\\"md\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"bday-year\\\"\\n\\t\\t/>\\n\\t</FormStack>\\n</Fieldset>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Fieldset","description":"Use the fieldset component to group related form inputs.","group":"Forms","storybookPath":"/story/forms-fieldset--basic"}},"data":{"title":"Fieldset","description":"Use the fieldset component to group related form inputs.","group":"Forms","storybookPath":"/story/forms-fieldset--basic"},"name":"@ag.ds-next/fieldset","version":"8.0.0","title":"Fieldset","storybookPath":"/story/forms-fieldset--basic","subNavItems":[{"label":"Overview","href":"/components/fieldset","path":"/home/runner/work/agds-next/agds-next/packages/fieldset/docs/overview.mdx"},{"label":"Code","href":"/components/fieldset/code","path":"/home/runner/work/agds-next/agds-next/packages/fieldset/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG Branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call To Action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control Input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date Picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction Link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File Upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form Stack","href":"/components/form-stack"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero Banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage Nav","href":"/components/inpage-nav"},{"label":"Keyword List","href":"/components/keyword-list"},{"label":"Link List","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main Nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page Alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress Indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search Box","href":"/components/search-box"},{"label":"Search Input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side Nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip Link","href":"/components/skip-link"},{"label":"Sub Nav","href":"/components/sub-nav"},{"label":"Summary List","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task List","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text Input","href":"/components/text-input"},{"label":"Text Link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Fieldset"}],"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Fieldset is used to associate a number of related form fields as well as labels within a form. The legend provides an association and caption for the form fields in the fieldset.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Fieldset\\n\\tlegend=\\\"What is your address?\\\"\\n\\thint=\\\"We will only use this to respond to your request\\\"\\n>\\n\\t<FormStack>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Street and number\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"street-address\\\"\\n\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t/>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Suburb\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"address-level2\\\"\\n\\t\\t\\tmaxWidth=\\\"xl\\\"\\n\\t\\t/>\\n\\t\\t<TextInput label=\\\"Country\\\" required autoComplete=\\\"country\\\" maxWidth=\\\"xl\\\" />\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Postcode\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"postal-code\\\"\\n\\t\\t\\tmaxWidth=\\\"sm\\\"\\n\\t\\t/>\\n\\t</FormStack>\\n</Fieldset>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Legend as page heading\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you’re asking just one question per page, you can set the contents of the \", _jsx(_components.code, {\n        children: \"legend\"\n      }), \" as the page heading, as shown in the example below. This is good practice as it means that users of screen readers will only hear the contents once.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Fieldset\\n\\tlegend={<H1>What is your date of birth?</H1>}\\n\\thint={\\n\\t\\t<Text as=\\\"p\\\" fontSize=\\\"md\\\" color=\\\"muted\\\">\\n\\t\\t\\tWe will only use this to respond to your requests\\n\\t\\t</Text>\\n\\t}\\n>\\n\\t<FormStack>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Day\\\"\\n\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\tmaxWidth=\\\"md\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"bday-day\\\"\\n\\t\\t/>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Month\\\"\\n\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\tmaxWidth=\\\"md\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"bday-month\\\"\\n\\t\\t/>\\n\\t\\t<TextInput\\n\\t\\t\\tlabel=\\\"Year\\\"\\n\\t\\t\\tinputMode=\\\"numeric\\\"\\n\\t\\t\\tmaxWidth=\\\"md\\\"\\n\\t\\t\\trequired\\n\\t\\t\\tautoComplete=\\\"bday-year\\\"\\n\\t\\t/>\\n\\t</FormStack>\\n</Fieldset>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Fieldset","description":"Use the fieldset component to group related form inputs.","group":"Forms","storybookPath":"/story/forms-fieldset--basic"}}},"__N_SSG":true}