{"pageProps":{"pkg":{"slug":"text-input","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Default\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the \", _jsx(_components.code, {\n        children: \"TextInput\"\n      }), \" component does not expand to fill the available space.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"Name\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Block\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"block\"\n      }), \" prop to expand the component to fill the available space.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"Name\\\" block />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop, this component will automatically append \\\"(optional)\\\" to the label as well as using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen reader user that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indiciate to screen reader users that a field is optional but don't want to show the \\\"(optional)\\\" label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<TextInput label=\\\"Required\\\" required />\\n\\t<TextInput label=\\\"Optional\\\" required={false} />\\n\\t<TextInput\\n\\t\\tlabel=\\\"Optional with hideOptionalLabel\\\"\\n\\t\\trequired={false}\\n\\t\\thideOptionalLabel={true}\\n\\t/>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid (does not validate according to the elements settings).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"Invalid\\\" invalid message=\\\"This input is invalid\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Disabled input elements are unusable and can not be clicked. This prevents a user from interacting with the input element until another action is complete. Disabled input elements in a form will not be submitted.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"Name\\\" disabled />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Maximum widths\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The width of a text input field should indicate the amount of information expected to be entered into the field. The size of the text input acts as a visual constraint for the end user.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As an example, input fields for postcodes should have a smaller width than fields for emails.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<TextInput label=\\\"xs input\\\" maxWidth=\\\"xs\\\" />\\n\\t<TextInput label=\\\"sm input\\\" maxWidth=\\\"sm\\\" />\\n\\t<TextInput label=\\\"md input\\\" maxWidth=\\\"md\\\" />\\n\\t<TextInput label=\\\"lg input\\\" maxWidth=\\\"lg\\\" />\\n\\t<TextInput label=\\\"xl input\\\" maxWidth=\\\"xl\\\" />\\n</Stack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Text Input","description":"Text inputs are input fields typically used in forms that allow the user to enter text data in a structured format.","group":"Forms","storybookPath":"/story/forms-textinput--basic"}},"data":{"title":"Text Input","description":"Text inputs are input fields typically used in forms that allow the user to enter text data in a structured format.","group":"Forms","storybookPath":"/story/forms-textinput--basic"},"name":"@ag.ds-next/text-input","version":"12.0.0","title":"Text Input","description":"Text inputs are input fields typically used in forms that allow the user to enter text data in a structured format.","storybookPath":"/story/forms-textinput--basic","subNavItems":[{"label":"Overview","href":"/components/text-input","path":"/home/runner/work/agds-next/agds-next/packages/text-input/docs/overview.mdx"},{"label":"Code","href":"/components/text-input/code","path":"/home/runner/work/agds-next/agds-next/packages/text-input/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG Branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call To Action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control Input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date Picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction Link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File Upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form Stack","href":"/components/form-stack"},{"label":"Global Alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero Banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage Nav","href":"/components/inpage-nav"},{"label":"Link List","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main Nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page Alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress Indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search Box","href":"/components/search-box"},{"label":"Search Input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side Nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip Link","href":"/components/skip-link"},{"label":"Sub Nav","href":"/components/sub-nav"},{"label":"Summary List","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task List","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text Input","href":"/components/text-input"},{"label":"Text Link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Text Input"}],"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Default\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the \", _jsx(_components.code, {\n        children: \"TextInput\"\n      }), \" component does not expand to fill the available space.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"Name\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Block\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"block\"\n      }), \" prop to expand the component to fill the available space.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"Name\\\" block />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop, this component will automatically append \\\"(optional)\\\" to the label as well as using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen reader user that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indiciate to screen reader users that a field is optional but don't want to show the \\\"(optional)\\\" label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<TextInput label=\\\"Required\\\" required />\\n\\t<TextInput label=\\\"Optional\\\" required={false} />\\n\\t<TextInput\\n\\t\\tlabel=\\\"Optional with hideOptionalLabel\\\"\\n\\t\\trequired={false}\\n\\t\\thideOptionalLabel={true}\\n\\t/>\\n</Stack>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid (does not validate according to the elements settings).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"Invalid\\\" invalid message=\\\"This input is invalid\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Disabled input elements are unusable and can not be clicked. This prevents a user from interacting with the input element until another action is complete. Disabled input elements in a form will not be submitted.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<TextInput label=\\\"Name\\\" disabled />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Maximum widths\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The width of a text input field should indicate the amount of information expected to be entered into the field. The size of the text input acts as a visual constraint for the end user.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As an example, input fields for postcodes should have a smaller width than fields for emails.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Stack gap={1}>\\n\\t<TextInput label=\\\"xs input\\\" maxWidth=\\\"xs\\\" />\\n\\t<TextInput label=\\\"sm input\\\" maxWidth=\\\"sm\\\" />\\n\\t<TextInput label=\\\"md input\\\" maxWidth=\\\"md\\\" />\\n\\t<TextInput label=\\\"lg input\\\" maxWidth=\\\"lg\\\" />\\n\\t<TextInput label=\\\"xl input\\\" maxWidth=\\\"xl\\\" />\\n</Stack>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Text Input","description":"Text inputs are input fields typically used in forms that allow the user to enter text data in a structured format.","group":"Forms","storybookPath":"/story/forms-textinput--basic"}}},"__N_SSG":true}