{"pageProps":{"pkg":{"slug":"combobox","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\treturn (\\n\\t\\t<Combobox\\n\\t\\t\\tlabel=\\\"Select state\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={(value) => setValue(value)}\\n\\t\\t\\toptions={[\\n\\t\\t\\t\\t{ label: 'Australian Capital Territory', value: 'act' },\\n\\t\\t\\t\\t{ label: 'New South Wales', value: 'nsw' },\\n\\t\\t\\t\\t{ label: 'Northern Territory', value: 'nt' },\\n\\t\\t\\t\\t{ label: 'Queensland', value: 'qld' },\\n\\t\\t\\t\\t{ label: 'South Australia', value: 'sa' },\\n\\t\\t\\t\\t{ label: 'Tasmania', value: 'tas' },\\n\\t\\t\\t\\t{ label: 'Victoria', value: 'vic' },\\n\\t\\t\\t\\t{ label: 'Western Australia', value: 'wa' },\\n\\t\\t\\t]}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the \", _jsx(_components.code, {\n        children: \"Combobox\"\n      }), \" component does not expand to fill the available space.\"]\n    }), \"\\n\", _jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"include to help users select from a large list\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"provide concise options\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"create hint text to let the user know they can search or select\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use a pre-filled list so users can search or scroll\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"consider whether the list of selections is complex enough to merit searching and filtering\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"indicate whether input is optional.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use if the list of possible results is small â€“ use Select\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"leave the list open once an option is selected.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Block\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"block\"\n      }), \" prop to expand the component to fill the available space.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\treturn (\\n\\t\\t<Combobox\\n\\t\\t\\tlabel=\\\"Select state\\\"\\n\\t\\t\\tblock\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={(value) => setValue(value)}\\n\\t\\t\\toptions={[\\n\\t\\t\\t\\t{ label: 'Australian Capital Territory', value: 'act' },\\n\\t\\t\\t\\t{ label: 'New South Wales', value: 'nsw' },\\n\\t\\t\\t\\t{ label: 'Northern Territory', value: 'nt' },\\n\\t\\t\\t\\t{ label: 'Queensland', value: 'qld' },\\n\\t\\t\\t\\t{ label: 'South Australia', value: 'sa' },\\n\\t\\t\\t\\t{ label: 'Tasmania', value: 'tas' },\\n\\t\\t\\t\\t{ label: 'Victoria', value: 'vic' },\\n\\t\\t\\t\\t{ label: 'Western Australia', value: 'wa' },\\n\\t\\t\\t]}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop can be used to indicate that user input is required on the field before a form can be submitted.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop, this component will automatically append \\\"(optional)\\\" to the label as well as using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\",\n        children: \"aria-required\"\n      }), \" to indicate to screen reader user that the field is required.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hide optional label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" prop can be used in situations where you want to indiciate to screen reader users that a field is optional but don't want to show the \\\"(optional)\\\" label.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The usage of \", _jsx(_components.code, {\n        children: \"hideOptionalLabel\"\n      }), \" should be reserved for inputs that filter data in a table or chart, and should never be used in standard forms for submitting information.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\treturn (\\n\\t\\t<Combobox\\n\\t\\t\\tlabel=\\\"Select state\\\"\\n\\t\\t\\thideOptionalLabel\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={(value) => setValue(value)}\\n\\t\\t\\toptions={[\\n\\t\\t\\t\\t{ label: 'Australian Capital Territory', value: 'act' },\\n\\t\\t\\t\\t{ label: 'New South Wales', value: 'nsw' },\\n\\t\\t\\t\\t{ label: 'Northern Territory', value: 'nt' },\\n\\t\\t\\t\\t{ label: 'Queensland', value: 'qld' },\\n\\t\\t\\t\\t{ label: 'South Australia', value: 'sa' },\\n\\t\\t\\t\\t{ label: 'Tasmania', value: 'tas' },\\n\\t\\t\\t\\t{ label: 'Victoria', value: 'vic' },\\n\\t\\t\\t\\t{ label: 'Western Australia', value: 'wa' },\\n\\t\\t\\t]}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid (does not validate according to the elements settings).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\tconst invalid = !value;\\n\\treturn (\\n\\t\\t<Combobox\\n\\t\\t\\tlabel=\\\"Select state\\\"\\n\\t\\t\\tinvalid={invalid}\\n\\t\\t\\tmessage={invalid ? 'City is required' : undefined}\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={(value) => setValue(value)}\\n\\t\\t\\toptions={[\\n\\t\\t\\t\\t{ label: 'Australian Capital Territory', value: 'act' },\\n\\t\\t\\t\\t{ label: 'New South Wales', value: 'nsw' },\\n\\t\\t\\t\\t{ label: 'Northern Territory', value: 'nt' },\\n\\t\\t\\t\\t{ label: 'Queensland', value: 'qld' },\\n\\t\\t\\t\\t{ label: 'South Australia', value: 'sa' },\\n\\t\\t\\t\\t{ label: 'Tasmania', value: 'tas' },\\n\\t\\t\\t\\t{ label: 'Victoria', value: 'vic' },\\n\\t\\t\\t\\t{ label: 'Western Australia', value: 'wa' },\\n\\t\\t\\t]}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"ComboboxAsync\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"ComboboxAsync\"\n      }), \" component when you need to populate options from a network request.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState(null);\\n\\treturn (\\n\\t\\t<ComboboxAsync\\n\\t\\t\\tlabel=\\\"Select state\\\"\\n\\t\\t\\thint=\\\"Start typing to see results\\\"\\n\\t\\t\\tvalue={value}\\n\\t\\t\\tonChange={(value) => setValue(value)}\\n\\t\\t\\tloadOptions={async function loadOptions(inputValue) {\\n\\t\\t\\t\\t// Simulate a slow network call\\n\\t\\t\\t\\tawait new Promise((resolve) => setTimeout(resolve, 1500));\\n\\t\\t\\t\\treturn [\\n\\t\\t\\t\\t\\t{ label: 'Australian Capital Territory', value: 'act' },\\n\\t\\t\\t\\t\\t{ label: 'New South Wales', value: 'nsw' },\\n\\t\\t\\t\\t\\t{ label: 'Northern Territory', value: 'nt' },\\n\\t\\t\\t\\t\\t{ label: 'Queensland', value: 'qld' },\\n\\t\\t\\t\\t\\t{ label: 'South Australia', value: 'sa' },\\n\\t\\t\\t\\t\\t{ label: 'Tasmania', value: 'tas' },\\n\\t\\t\\t\\t\\t{ label: 'Victoria', value: 'vic' },\\n\\t\\t\\t\\t\\t{ label: 'Western Australia', value: 'wa' },\\n\\t\\t\\t\\t];\\n\\t\\t\\t}}\\n\\t\\t/>\\n\\t);\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Combobox","description":"This component lets users select from a list of options. It is especially useful when there are many options to choose from.","group":"Forms","storybookPath":"/story/forms-combobox--basic","figmaGalleryNodeId":"12925%3A104632"}},"data":{"title":"Combobox","description":"This component lets users select from a list of options. It is especially useful when there are many options to choose from.","group":"Forms","storybookPath":"/story/forms-combobox--basic","figmaGalleryNodeId":"12925%3A104632"},"name":"combobox","version":"1.0.0","title":"Combobox","description":"This component lets users select from a list of options. It is especially useful when there are many options to choose from.","storybookPath":"/story/forms-combobox--basic","figmaGalleryNodeId":"12925%3A104632","subNavItems":[{"label":"Overview","href":"/components/combobox","path":"/home/runner/work/agds-next/agds-next/packages/react/src/combobox/docs/overview.mdx"},{"label":"Code","href":"/components/combobox/code","path":"/home/runner/work/agds-next/agds-next/packages/react/src/combobox/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call to action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form stack","href":"/components/form-stack"},{"label":"Global alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage nav","href":"/components/inpage-nav"},{"label":"Link list","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search box","href":"/components/search-box"},{"label":"Search input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip link","href":"/components/skip-link"},{"label":"Sub nav","href":"/components/sub-nav"},{"label":"Summary list","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task list","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text input","href":"/components/text-input"},{"label":"Text link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"href":"/components/combobox","label":"Combobox"},{"label":"Code"}],"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {ComponentPropsTable} = _components;\n  if (!ComponentPropsTable) _missingMdxReference(\"ComponentPropsTable\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Props\"\n    }), \"\\n\", _jsx(ComponentPropsTable, {\n      name: \"Combobox\"\n    }), \"\\n\", _jsx(ComponentPropsTable, {\n      name: \"ComboboxAsync\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}