{"pageProps":{"pkg":{"slug":"text-input","source":{"compiledSource":"var d=Object.defineProperty,c=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(e,t,n)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,l=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&u(e,n,t[n]);if(i)for(var n of i(t))s.call(t,n)&&u(e,n,t[n]);return e},r=(e,t)=>c(e,m(t));var o=(e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&i)for(var a of i(e))t.indexOf(a)<0&&s.call(e,a)&&(n[a]=e[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,t=o(a,[\"components\"]);return mdx(MDXLayout,r(l(l({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h3\",null,\"Default\"),mdx(\"p\",null,\"By default, the \",mdx(\"inlineCode\",{parentName:\"p\"},\"TextInput\"),\" component does not expand to fill the available space.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Name\\\\\"\\\\n  });\\\\n}\",\"globals\":[\"TextInput\"],\"exampleType\":\"jsx\"}'}),`<TextInput label=\"Name\" />\n`)),mdx(\"h3\",null,\"Block\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"block\"),\" prop to expand the component to fill the available space.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Name\\\\\",\\\\n    block: true\\\\n  });\\\\n}\",\"globals\":[\"TextInput\"],\"exampleType\":\"jsx\"}'}),`<TextInput label=\"Name\" block />\n`)),mdx(\"h3\",null,\"Required\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"TextInput\"),\" component will always append \",mdx(\"inlineCode\",{parentName:\"p\"},\"(optional)\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"(required)\"),\" to the label based on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"required\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Stack, {\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Default\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Required\\\\\",\\\\n    required: true\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Optional\\\\\",\\\\n    required: false\\\\n  }));\\\\n}\",\"globals\":[\"Stack\",\"TextInput\"],\"exampleType\":\"jsx\"}'}),`<Stack gap={1}>\n    <TextInput label=\"Default\" />\n    <TextInput label=\"Required\" required />\n    <TextInput label=\"Optional\" required={false} />\n</Stack>\n`)),mdx(\"h3\",null,\"Valid and invalid inputs\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"invalid\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"valid\"),\" props to indicate whether user input is valid (validates according to the elements settings) or invalid (does not validate according to the elements settings).\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Stack, {\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Invalid\\\\\",\\\\n    invalid: true,\\\\n    message: \\\\\"This input is invalid\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Valid\\\\\",\\\\n    valid: true\\\\n  }));\\\\n}\",\"globals\":[\"Stack\",\"TextInput\"],\"exampleType\":\"jsx\"}'}),`<Stack gap={1}>\n    <TextInput label=\"Invalid\" invalid message=\"This input is invalid\" />\n    <TextInput label=\"Valid\" valid />\n</Stack>\n`)),mdx(\"h3\",null,\"Disabled\"),mdx(\"p\",null,\"Disabled input elements are unusable and can not be clicked. This prevents a user from interacting with the input element until another action is complete. Disabled input elements in a form will not be submitted.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"Name\\\\\",\\\\n    disabled: true\\\\n  });\\\\n}\",\"globals\":[\"TextInput\"],\"exampleType\":\"jsx\"}'}),`<TextInput label=\"Name\" disabled />\n`)),mdx(\"h3\",null,\"Different width sizes for inputs\"),mdx(\"p\",null,\"The width of a text input field should indicate the amount of information expected to be entered into the field. The size of the field acts as a visual constraint for the end user. As an example, input fields for postcodes should have a smaller width than fields for emails.\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:'{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Stack, {\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"xs input\\\\\",\\\\n    maxWidth: \\\\\"xs\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"sm input\\\\\",\\\\n    maxWidth: \\\\\"sm\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"md input\\\\\",\\\\n    maxWidth: \\\\\"md\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"lg input\\\\\",\\\\n    maxWidth: \\\\\"lg\\\\\"\\\\n  }), /*#__PURE__*/React.createElement(TextInput, {\\\\n    label: \\\\\"xl input\\\\\",\\\\n    maxWidth: \\\\\"xl\\\\\"\\\\n  }));\\\\n}\",\"globals\":[\"Stack\",\"TextInput\"],\"exampleType\":\"jsx\"}'}),`<Stack gap={1}>\n    <TextInput label=\"xs input\" maxWidth=\"xs\" />\n    <TextInput label=\"sm input\" maxWidth=\"sm\" />\n    <TextInput label=\"md input\" maxWidth=\"md\" />\n    <TextInput label=\"lg input\" maxWidth=\"lg\" />\n    <TextInput label=\"xl input\" maxWidth=\"xl\" />\n</Stack>\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Text Input","description":"Text inputs are input fields typically used in forms that allow the user to enter text data in a structured format.","group":"Forms"}},"data":{"title":"Text Input","description":"Text inputs are input fields typically used in forms that allow the user to enter text data in a structured format.","group":"Forms"},"name":"@ag.ds-next/text-input","version":"1.0.0","title":"Text Input"},"navLinks":[{"label":"Brand","href":"/packages/brand"},{"label":"Content","href":"/packages/content"},{"label":"Forms","href":"/packages/forms","items":[{"label":"Button","href":"/packages/forms/button"},{"label":"Field","href":"/packages/forms/field"},{"label":"Search Box","href":"/packages/forms/search-box"},{"label":"Text Input","href":"/packages/forms/text-input"},{"label":"Textarea","href":"/packages/forms/textarea"}]},{"label":"Foundations","href":"/packages/foundations"},{"label":"Layout","href":"/packages/layout"},{"label":"Navigation","href":"/packages/navigation"}],"breadcrumbs":[{"href":"/packages","label":"Packages"},{"href":"/packages/forms","label":"Forms"},{"label":"Text Input"}]},"__N_SSG":true}