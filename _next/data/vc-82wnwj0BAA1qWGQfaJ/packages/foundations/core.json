{"pageProps":{"pkg":{"slug":"core","source":{"compiledSource":"var g=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(e,t,n)=>t in e?g(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,l=(e,t)=>{for(var n in t||(t={}))i.call(t,n)&&r(e,n,t[n]);if(o)for(var n of o(t))c.call(t,n)&&r(e,n,t[n]);return e},s=(e,t)=>d(e,u(t));var x=(e,t)=>{var n={};for(var a in e)i.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&o)for(var a of o(e))t.indexOf(a)<0&&c.call(e,a)&&(n[a]=e[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,t=x(a,[\"components\"]);return mdx(MDXLayout,s(l(l({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Colour\"),mdx(\"p\",null,\"The colour palette is designed and tested to provide colour pairings that pass accessibility contrast ratios while still being easy to implement. This means that designers and developers using the system do not need to be concerned about if a colour will pass WCAG requirements in a particular circumstance.\"),mdx(\"h3\",null,\"Colour names imply their use\"),mdx(\"p\",null,\"We use semantic naming so that all colours labeled as foreground colours in a theme. These colours are manually tested to pass accessibility contrast ratios when used with all background colours within a theme and vice versa.\"),mdx(\"h3\",null,\"Tips\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Do pair foreground and background colours.\"),mdx(\"li\",{parentName:\"ul\"},\"Don't mix light and dark variables.\"),mdx(\"li\",{parentName:\"ul\"},\"Don't pair foreground with foreground or background with background.\")),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Flex, {\\\\n    flexDirection: \\\\\"column\\\\\",\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(Flex, {\\\\n    palette: \\\\\"light\\\\\"\\\\n  }, ['body', 'shade', 'bodyAlt', 'shadeAlt'].map(function (bg) {\\\\n    return /*#__PURE__*/React.createElement(Flex, {\\\\n      key: bg,\\\\n      flexDirection: \\\\\"column\\\\\",\\\\n      gap: 1,\\\\n      background: bg,\\\\n      paddingY: 1,\\\\n      paddingX: 2\\\\n    }, ['text', 'muted', 'action', 'focus'].map(function (fg) {\\\\n      return /*#__PURE__*/React.createElement(Text, {\\\\n        key: fg,\\\\n        color: fg\\\\n      }, fg);\\\\n    }));\\\\n  })), /*#__PURE__*/React.createElement(Flex, {\\\\n    palette: \\\\\"dark\\\\\"\\\\n  }, ['body', 'shade', 'bodyAlt', 'shadeAlt'].map(function (bg) {\\\\n    return /*#__PURE__*/React.createElement(Flex, {\\\\n      key: bg,\\\\n      flexDirection: \\\\\"column\\\\\",\\\\n      gap: 1,\\\\n      background: bg,\\\\n      paddingY: 1,\\\\n      paddingX: 2\\\\n    }, ['text', 'muted', 'action', 'focus'].map(function (fg) {\\\\n      return /*#__PURE__*/React.createElement(Text, {\\\\n        key: fg,\\\\n        color: fg\\\\n      }, fg);\\\\n    }), /*#__PURE__*/React.createElement(Text, {\\\\n      color: \\\\\"focus\\\\\"\\\\n    }, /*#__PURE__*/React.createElement(\\\\\"hr\\\\\", null)));\\\\n  })));\\\\n}\",\"globals\":[\"Flex\",\"Text\"],\"exampleType\":\"jsx\"}`}),`<Flex flexDirection=\"column\" gap={1}>\n    <Flex palette=\"light\">\n        {['body', 'shade', 'bodyAlt', 'shadeAlt'].map((bg) => (\n            <Flex\n                key={bg}\n                flexDirection=\"column\"\n                gap={1}\n                background={bg}\n                paddingY={1}\n                paddingX={2}\n            >\n                {['text', 'muted', 'action', 'focus'].map((fg) => (\n                    <Text key={fg} color={fg}>\n                        {fg}\n                    </Text>\n                ))}\n            </Flex>\n        ))}\n    </Flex>\n    <Flex palette=\"dark\">\n        {['body', 'shade', 'bodyAlt', 'shadeAlt'].map((bg) => (\n            <Flex\n                key={bg}\n                flexDirection=\"column\"\n                gap={1}\n                background={bg}\n                paddingY={1}\n                paddingX={2}\n            >\n                {['text', 'muted', 'action', 'focus'].map((fg) => (\n                    <Text key={fg} color={fg}>\n                        {fg}\n                    </Text>\n                ))}\n                <Text color=\"focus\">\n                    <hr />\n                </Text>\n            </Flex>\n        ))}\n    </Flex>\n</Flex>\n`)),mdx(\"h2\",null,\"Typography\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live\",live:!0,initialCompiledResult:`{\"status\":\"success\",\"code\":\"function Example() {\\\\n  return /*#__PURE__*/React.createElement(Flex, {\\\\n    palette: \\\\\"light\\\\\",\\\\n    background: \\\\\"body\\\\\",\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(Flex, {\\\\n    flexDirection: \\\\\"column\\\\\",\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(Text, {\\\\n    fontSize: \\\\\"sm\\\\\",\\\\n    fontWeight: \\\\\"bold\\\\\"\\\\n  }, \\\\\"Default\\\\\"), ['xxxl', 'xxl', 'xl', 'lg', 'md', 'sm', 'xs'].map(function (size) {\\\\n    return /*#__PURE__*/React.createElement(Box, {\\\\n      key: size,\\\\n      background: \\\\\"shade\\\\\"\\\\n    }, /*#__PURE__*/React.createElement(Text, {\\\\n      fontSize: size\\\\n    }, size.toUpperCase()));\\\\n  })), /*#__PURE__*/React.createElement(Flex, {\\\\n    flexDirection: \\\\\"column\\\\\",\\\\n    palette: \\\\\"light\\\\\",\\\\n    background: \\\\\"body\\\\\",\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(Text, {\\\\n    fontSize: \\\\\"sm\\\\\",\\\\n    fontWeight: \\\\\"bold\\\\\"\\\\n  }, \\\\\"Heading\\\\\"), ['xxxl', 'xxl', 'xl', 'lg', 'md', 'sm', 'xs'].map(function (size) {\\\\n    return /*#__PURE__*/React.createElement(Box, {\\\\n      key: size,\\\\n      background: \\\\\"shade\\\\\"\\\\n    }, /*#__PURE__*/React.createElement(Text, {\\\\n      fontSize: size,\\\\n      lineHeight: \\\\\"heading\\\\\"\\\\n    }, size.toUpperCase()));\\\\n  })), /*#__PURE__*/React.createElement(Flex, {\\\\n    flexDirection: \\\\\"column\\\\\",\\\\n    palette: \\\\\"light\\\\\",\\\\n    background: \\\\\"body\\\\\",\\\\n    gap: 1\\\\n  }, /*#__PURE__*/React.createElement(Text, {\\\\n    fontSize: \\\\\"sm\\\\\",\\\\n    fontWeight: \\\\\"bold\\\\\"\\\\n  }, \\\\\"Nospace\\\\\"), ['xxxl', 'xxl', 'xl', 'lg', 'md', 'sm', 'xs'].map(function (size) {\\\\n    return /*#__PURE__*/React.createElement(Box, {\\\\n      key: size,\\\\n      background: \\\\\"shade\\\\\"\\\\n    }, /*#__PURE__*/React.createElement(Text, {\\\\n      fontSize: size,\\\\n      lineHeight: \\\\\"nospace\\\\\"\\\\n    }, size.toUpperCase()));\\\\n  })));\\\\n}\",\"globals\":[\"Flex\",\"Text\",\"Box\"],\"exampleType\":\"jsx\"}`}),`<Flex palette=\"light\" background=\"body\" gap={1}>\n    <Flex flexDirection=\"column\" gap={1}>\n        <Text fontSize=\"sm\" fontWeight=\"bold\">\n            Default\n        </Text>\n        {['xxxl', 'xxl', 'xl', 'lg', 'md', 'sm', 'xs'].map((size) => (\n            <Box key={size} background=\"shade\">\n                <Text fontSize={size}>{size.toUpperCase()}</Text>\n            </Box>\n        ))}\n    </Flex>\n    <Flex flexDirection=\"column\" palette=\"light\" background=\"body\" gap={1}>\n        <Text fontSize=\"sm\" fontWeight=\"bold\">\n            Heading\n        </Text>\n        {['xxxl', 'xxl', 'xl', 'lg', 'md', 'sm', 'xs'].map((size) => (\n            <Box key={size} background=\"shade\">\n                <Text fontSize={size} lineHeight=\"heading\">\n                    {size.toUpperCase()}\n                </Text>\n            </Box>\n        ))}\n    </Flex>\n    <Flex flexDirection=\"column\" palette=\"light\" background=\"body\" gap={1}>\n        <Text fontSize=\"sm\" fontWeight=\"bold\">\n            Nospace\n        </Text>\n        {['xxxl', 'xxl', 'xl', 'lg', 'md', 'sm', 'xs'].map((size) => (\n            <Box key={size} background=\"shade\">\n                <Text fontSize={size} lineHeight=\"nospace\">\n                    {size.toUpperCase()}\n                </Text>\n            </Box>\n        ))}\n    </Flex>\n</Flex>\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Core","description":"Core includes a range of styles, variables and code that form the foundation of how the Design System works, including colour, typography and spacing.","group":"Foundations"}},"data":{"title":"Core","description":"Core includes a range of styles, variables and code that form the foundation of how the Design System works, including colour, typography and spacing.","group":"Foundations"},"name":"@ag.ds-next/core","version":"1.1.0","title":"Core"},"navLinks":[{"label":"Foundations","href":"/packages/foundations","items":[{"label":"Box","href":"/packages/foundations/box"},{"label":"Columns","href":"/packages/foundations/columns"},{"label":"Core","href":"/packages/foundations/core"},{"label":"Icon","href":"/packages/foundations/icon"},{"label":"Text","href":"/packages/foundations/text"}]},{"label":"Brand","href":"/packages/brand"},{"label":"Content","href":"/packages/content"},{"label":"Forms","href":"/packages/forms"},{"label":"Layout","href":"/packages/layout"},{"label":"Navigation","href":"/packages/navigation"}],"breadcrumbs":[{"href":"/packages","label":"Packages"},{"href":"/packages/foundations","label":"Foundations"},{"label":"Core"}]},"__N_SSG":true}