{"pageProps":{"pkg":{"slug":"control-input","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to help users select one or more items\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"use for a concise list of options \", _jsx(_components.code, {\n          children: \"(<10)\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"indicate if input is optional\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ensure users can select one item at a time\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use vertical lists.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use when only one item can be selected\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"provide disabled options unless unavoidable\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use horizontal groups.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Check boxes allow users to select one or more items.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\">\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Radio\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Radio inputs allow users to select one item at a time.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Example\\\">\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Checkbox block\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Inline checkbox options can sometimes be difficult to scan. Users may find it challenging to determine with which label the checkbox option corresponds: the one before the checkbox or the one after. Vertical positioning of checkbox, with one choice per line, eliminates this potential cause for confusion.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Block example\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Radio block\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vertically stacked radio buttons.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Block example\\\" block>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid (does not validate according to the elements settings).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup\\n\\t\\t\\tlabel=\\\"Invalid example\\\"\\n\\t\\t\\tmessage=\\\"Please choose an option\\\"\\n\\t\\t\\tinvalid\\n\\t\\t>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled control inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Disabled control inputs can be used to indicate inputs that are no longer valid or expired.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Disabled example\\\">\\n\\t<Radio checked={false} disabled>\\n\\t\\tPhone\\n\\t</Radio>\\n\\t<Radio checked={true} disabled>\\n\\t\\tTablet\\n\\t</Radio>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Small inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Smaller versions of control inputs.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Small example\\\">\\n\\t<Checkbox size=\\\"sm\\\">Phone</Checkbox>\\n\\t<Checkbox size=\\\"sm\\\">Tablet</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Control Input","description":"Control inputs helps users select one or more options from a list. Our control inputs consist of checkboxes and radio buttons.","group":"Forms","storybookPath":"/story/forms-checkbox--basic"}},"data":{"title":"Control Input","description":"Control inputs helps users select one or more options from a list. Our control inputs consist of checkboxes and radio buttons.","group":"Forms","storybookPath":"/story/forms-checkbox--basic"},"name":"@ag.ds-next/control-input","version":"12.0.0","title":"Control Input","description":"Control inputs helps users select one or more options from a list. Our control inputs consist of checkboxes and radio buttons.","storybookPath":"/story/forms-checkbox--basic","subNavItems":[{"label":"Overview","href":"/components/control-input","path":"/home/runner/work/agds-next/agds-next/packages/control-input/docs/overview.mdx"},{"label":"Code","href":"/components/control-input/code","path":"/home/runner/work/agds-next/agds-next/packages/control-input/docs/code.mdx"}]},"navLinks":[{"label":"A11y","href":"/components/a11y"},{"label":"AG Branding","href":"/components/ag-branding"},{"label":"Accordion","href":"/components/accordion"},{"label":"Autocomplete","href":"/components/autocomplete"},{"label":"Badge","href":"/components/badge"},{"label":"Box","href":"/components/box"},{"label":"Breadcrumbs","href":"/components/breadcrumbs"},{"label":"Button","href":"/components/button"},{"label":"Call To Action","href":"/components/call-to-action"},{"label":"Callout","href":"/components/callout"},{"label":"Card","href":"/components/card"},{"label":"Columns","href":"/components/columns"},{"label":"Combobox","href":"/components/combobox"},{"label":"Content","href":"/components/content"},{"label":"Control Input","href":"/components/control-input"},{"label":"Core","href":"/components/core"},{"label":"Date Picker","href":"/components/date-picker"},{"label":"Details","href":"/components/details"},{"label":"Direction Link","href":"/components/direction-link"},{"label":"Field","href":"/components/field"},{"label":"Fieldset","href":"/components/fieldset"},{"label":"File Upload","href":"/components/file-upload"},{"label":"Footer","href":"/components/footer"},{"label":"Form Stack","href":"/components/form-stack"},{"label":"Global Alert","href":"/components/global-alert"},{"label":"Header","href":"/components/header"},{"label":"Heading","href":"/components/heading"},{"label":"Hero Banner","href":"/components/hero-banner"},{"label":"Icon","href":"/components/icon"},{"label":"Inpage Nav","href":"/components/inpage-nav"},{"label":"Link List","href":"/components/link-list"},{"label":"Loading","href":"/components/loading"},{"label":"Main Nav","href":"/components/main-nav"},{"label":"Modal","href":"/components/modal"},{"label":"Page Alert","href":"/components/page-alert"},{"label":"Pagination","href":"/components/pagination"},{"label":"Progress Indicator","href":"/components/progress-indicator"},{"label":"Prose","href":"/components/prose"},{"label":"Search Box","href":"/components/search-box"},{"label":"Search Input","href":"/components/search-input"},{"label":"Select","href":"/components/select"},{"label":"Side Nav","href":"/components/side-nav"},{"label":"Skeleton","href":"/components/skeleton"},{"label":"Skip Link","href":"/components/skip-link"},{"label":"Sub Nav","href":"/components/sub-nav"},{"label":"Summary List","href":"/components/summary-list"},{"label":"Switch","href":"/components/switch"},{"label":"Table","href":"/components/table"},{"label":"Tags","href":"/components/tags"},{"label":"Task List","href":"/components/task-list"},{"label":"Text","href":"/components/text"},{"label":"Text Input","href":"/components/text-input"},{"label":"Text Link","href":"/components/text-link"},{"label":"Textarea","href":"/components/textarea"}],"breadcrumbs":[{"href":"/","label":"Home"},{"href":"/components","label":"Components"},{"label":"Control Input"}],"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {DoHeading, DontHeading} = _components;\n  if (!DoHeading) _missingMdxReference(\"DoHeading\", true);\n  if (!DontHeading) _missingMdxReference(\"DontHeading\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DoHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use to help users select one or more items\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"use for a concise list of options \", _jsx(_components.code, {\n          children: \"(<10)\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"indicate if input is optional\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ensure users can select one item at a time\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use vertical lists.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(DontHeading, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"use when only one item can be selected\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"provide disabled options unless unavoidable\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use horizontal groups.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Check boxes allow users to select one or more items.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Example\\\">\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Radio\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Radio inputs allow users to select one item at a time.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Example\\\">\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Checkbox block\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Inline checkbox options can sometimes be difficult to scan. Users may find it challenging to determine with which label the checkbox option corresponds: the one before the checkbox or the one after. Vertical positioning of checkbox, with one choice per line, eliminates this potential cause for confusion.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Block example\\\" block>\\n\\t<Checkbox value=\\\"phone\\\">Phone</Checkbox>\\n\\t<Checkbox value=\\\"tablet\\\">Tablet</Checkbox>\\n\\t<Checkbox value=\\\"laptop\\\">Laptop</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Radio block\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vertically stacked radio buttons.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup label=\\\"Block example\\\" block>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Invalid\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"invalid\"\n      }), \" prop to indicate if the user input is invalid (does not validate according to the elements settings).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"() => {\\n\\tconst [value, setValue] = React.useState();\\n\\tconst handlerForKey = React.useCallback((key) => () => setValue(key), []);\\n\\tconst isChecked = (key) => key === value;\\n\\n\\treturn (\\n\\t\\t<ControlGroup\\n\\t\\t\\tlabel=\\\"Invalid example\\\"\\n\\t\\t\\tmessage=\\\"Please choose an option\\\"\\n\\t\\t\\tinvalid\\n\\t\\t>\\n\\t\\t\\t<Radio checked={isChecked('phone')} onChange={handlerForKey('phone')}>\\n\\t\\t\\t\\tPhone\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('tablet')} onChange={handlerForKey('tablet')}>\\n\\t\\t\\t\\tTablet\\n\\t\\t\\t</Radio>\\n\\t\\t\\t<Radio checked={isChecked('laptop')} onChange={handlerForKey('laptop')}>\\n\\t\\t\\t\\tLaptop\\n\\t\\t\\t</Radio>\\n\\t\\t</ControlGroup>\\n\\t);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled control inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Disabled control inputs can be used to indicate inputs that are no longer valid or expired.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Disabled example\\\">\\n\\t<Radio checked={false} disabled>\\n\\t\\tPhone\\n\\t</Radio>\\n\\t<Radio checked={true} disabled>\\n\\t\\tTablet\\n\\t</Radio>\\n</ControlGroup>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Small inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Smaller versions of control inputs.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<ControlGroup label=\\\"Small example\\\">\\n\\t<Checkbox size=\\\"sm\\\">Phone</Checkbox>\\n\\t<Checkbox size=\\\"sm\\\">Tablet</Checkbox>\\n</ControlGroup>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Control Input","description":"Control inputs helps users select one or more options from a list. Our control inputs consist of checkboxes and radio buttons.","group":"Forms","storybookPath":"/story/forms-checkbox--basic"}}},"__N_SSG":true}