{"version":3,"file":"react-src-modal-Modal-stories.9ca7bb3b.iframe.bundle.js","mappings":";;;;;;AAeA","sources":["webpack://agds-next/./packages/react/src/modal/Modal.tsx"],"sourcesContent":["import { Fragment, FunctionComponent, useEffect } from 'react';\nimport { Global } from '@emotion/react';\nimport { createPortal } from 'react-dom';\nimport { canUseDOM, useAriaModalPolyfill } from '../core';\nimport { getRequiredCloseHandler } from '../getCloseHandler';\nimport { ModalCover } from './ModalCover';\nimport { ModalDialog, ModalDialogProps } from './ModalDialog';\n\nexport type ModalProps = ModalDialogProps & {\n\t/** If true, the modal will be rendered.  */\n\tisOpen?: boolean;\n\t/** @deprecated use `onClose` instead */\n\tonDismiss?: () => void;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n\tactions,\n\tchildren,\n\tisOpen = false,\n\tonClose,\n\tonDismiss,\n\ttitle,\n}) => {\n\tconst closeHandler = getRequiredCloseHandler(onClose, onDismiss);\n\n\t// Close the modal when the user presses the escape key\n\tuseEffect(() => {\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\t\tif (isOpen && e.code === 'Escape') {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tcloseHandler();\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('keydown', handleKeyDown);\n\t\treturn () => window.removeEventListener('keydown', handleKeyDown);\n\t}, [closeHandler, isOpen]);\n\n\t// Polyfill usage of `aria-modal`\n\tconst { modalContainerRef } = useAriaModalPolyfill(isOpen);\n\n\tif (!isOpen) return null;\n\n\t// Since react portals can not be rendered on the server and this component is always closed by default\n\t// This component doesn't need to be server side rendered\n\tif (!canUseDOM()) return null;\n\n\treturn createPortal(\n\t\t<Fragment>\n\t\t\t<LockScroll />\n\t\t\t<ModalCover ref={modalContainerRef}>\n\t\t\t\t<ModalDialog actions={actions} onClose={closeHandler} title={title}>\n\t\t\t\t\t{children}\n\t\t\t\t</ModalDialog>\n\t\t\t</ModalCover>\n\t\t</Fragment>,\n\t\tdocument.body\n\t);\n};\n\nconst LockScroll = () => <Global styles={{ body: { overflow: 'hidden' } }} />;\n"],"names":[],"sourceRoot":""}